// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/unit.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Possible temperature units for physical bodies.
type TemperatureUnit int32

const (
	TemperatureUnit_CELSIUS    TemperatureUnit = 0
	TemperatureUnit_FAHRENHEIT TemperatureUnit = 1
	TemperatureUnit_KELVIN     TemperatureUnit = 2
)

var TemperatureUnit_name = map[int32]string{
	0: "CELSIUS",
	1: "FAHRENHEIT",
	2: "KELVIN",
}

var TemperatureUnit_value = map[string]int32{
	"CELSIUS":    0,
	"FAHRENHEIT": 1,
	"KELVIN":     2,
}

func (x TemperatureUnit) String() string {
	return proto.EnumName(TemperatureUnit_name, int32(x))
}

func (TemperatureUnit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd2e8072946edc43, []int{0}
}

// A temperature value
type Temperature struct {
	// The value in celsius, always! Use device attributes if the device 'thinks' in a different unit but always
	// communicate in celsius.
	ValueCelsius         float64  `protobuf:"fixed64,1,opt,name=value_celsius,json=valueCelsius,proto3" json:"value_celsius,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Temperature) Reset()         { *m = Temperature{} }
func (m *Temperature) String() string { return proto.CompactTextString(m) }
func (*Temperature) ProtoMessage()    {}
func (*Temperature) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2e8072946edc43, []int{0}
}

func (m *Temperature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Temperature.Unmarshal(m, b)
}
func (m *Temperature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Temperature.Marshal(b, m, deterministic)
}
func (m *Temperature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Temperature.Merge(m, src)
}
func (m *Temperature) XXX_Size() int {
	return xxx_messageInfo_Temperature.Size(m)
}
func (m *Temperature) XXX_DiscardUnknown() {
	xxx_messageInfo_Temperature.DiscardUnknown(m)
}

var xxx_messageInfo_Temperature proto.InternalMessageInfo

func (m *Temperature) GetValueCelsius() float64 {
	if m != nil {
		return m.ValueCelsius
	}
	return 0
}

// Represents the audio signal level for either input or output devices. When reading mute is always accurate, when
// writing please use a FieldMask to exclude the mute value if you do not intend on changing it.
type Volume struct {
	Gain                 *FloatVar `protobuf:"bytes,1,opt,name=gain,proto3" json:"gain,omitempty"`
	Mute                 bool      `protobuf:"varint,2,opt,name=mute,proto3" json:"mute,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Volume) Reset()         { *m = Volume{} }
func (m *Volume) String() string { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()    {}
func (*Volume) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd2e8072946edc43, []int{1}
}

func (m *Volume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Volume.Unmarshal(m, b)
}
func (m *Volume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Volume.Marshal(b, m, deterministic)
}
func (m *Volume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Volume.Merge(m, src)
}
func (m *Volume) XXX_Size() int {
	return xxx_messageInfo_Volume.Size(m)
}
func (m *Volume) XXX_DiscardUnknown() {
	xxx_messageInfo_Volume.DiscardUnknown(m)
}

var xxx_messageInfo_Volume proto.InternalMessageInfo

func (m *Volume) GetGain() *FloatVar {
	if m != nil {
		return m.Gain
	}
	return nil
}

func (m *Volume) GetMute() bool {
	if m != nil {
		return m.Mute
	}
	return false
}

func init() {
	proto.RegisterEnum("smartcore.api.types.TemperatureUnit", TemperatureUnit_name, TemperatureUnit_value)
	proto.RegisterType((*Temperature)(nil), "smartcore.api.types.Temperature")
	proto.RegisterType((*Volume)(nil), "smartcore.api.types.Volume")
}

func init() { proto.RegisterFile("types/unit.proto", fileDescriptor_bd2e8072946edc43) }

var fileDescriptor_bd2e8072946edc43 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0xcd, 0x18, 0x55, 0xdf, 0xfa, 0xa7, 0x64, 0x07, 0x87, 0x20, 0x8c, 0x79, 0x99, 0x82,
	0x29, 0xce, 0x9b, 0xb7, 0x6d, 0x74, 0xac, 0x38, 0xe6, 0x68, 0xbb, 0x1e, 0xbc, 0x48, 0x56, 0x43,
	0x09, 0xb6, 0x4d, 0x48, 0x93, 0x82, 0x5f, 0xc9, 0x4f, 0x29, 0x4d, 0x61, 0x78, 0xd8, 0x2d, 0x3c,
	0xf9, 0x3d, 0xcf, 0xf3, 0xbe, 0x2f, 0x78, 0xfa, 0x47, 0xb2, 0xda, 0x37, 0x15, 0xd7, 0x44, 0x2a,
	0xa1, 0x05, 0x1e, 0xd4, 0x25, 0x55, 0x3a, 0x13, 0x8a, 0x11, 0x2a, 0x39, 0xb1, 0xff, 0xb7, 0xb8,
	0xc3, 0x2a, 0x53, 0xee, 0x99, 0xea, 0xc0, 0xf1, 0x14, 0xdc, 0x84, 0x95, 0x92, 0x29, 0xaa, 0x8d,
	0x62, 0xf8, 0x1e, 0x2e, 0x1b, 0x5a, 0x18, 0xf6, 0x99, 0xb1, 0xa2, 0xe6, 0xa6, 0x1e, 0xa2, 0x11,
	0x9a, 0xa0, 0xe8, 0xc2, 0x8a, 0x8b, 0x4e, 0x1b, 0xbf, 0x83, 0x93, 0x8a, 0xc2, 0x94, 0x0c, 0x3f,
	0x43, 0x3f, 0xa7, 0xbc, 0xb2, 0x94, 0x3b, 0xbd, 0x23, 0x47, 0x5a, 0xc9, 0xb2, 0x10, 0x54, 0xa7,
	0x54, 0x45, 0x16, 0xc5, 0x18, 0xfa, 0xa5, 0xd1, 0x6c, 0xd8, 0x1b, 0xa1, 0xc9, 0x59, 0x64, 0xdf,
	0x8f, 0xaf, 0x70, 0xfd, 0x6f, 0x88, 0x5d, 0xc5, 0x35, 0x76, 0xe1, 0x74, 0x11, 0xac, 0xe3, 0x70,
	0x17, 0x7b, 0x27, 0xf8, 0x0a, 0x60, 0x39, 0x5b, 0x45, 0xc1, 0x66, 0x15, 0x84, 0x89, 0x87, 0x30,
	0x80, 0xf3, 0x16, 0xac, 0xd3, 0x70, 0xe3, 0xf5, 0xe6, 0x39, 0xdc, 0x7c, 0xb1, 0xe6, 0x58, 0xf3,
	0xfc, 0xbc, 0x4d, 0xda, 0xb6, 0x6b, 0x6e, 0xd1, 0xc7, 0x43, 0xce, 0x35, 0x69, 0x68, 0xa5, 0x39,
	0xc9, 0x04, 0x31, 0xdf, 0xfe, 0xc1, 0xe1, 0xd7, 0xd9, 0x13, 0x95, 0xdc, 0xcf, 0x85, 0x6f, 0x7d,
	0xbf, 0xbd, 0x41, 0x7c, 0x48, 0x9b, 0x49, 0x4e, 0x92, 0x56, 0xdd, 0x3b, 0xf6, 0x60, 0x2f, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xaa, 0xb1, 0xc6, 0x6d, 0x01, 0x00, 0x00,
}
