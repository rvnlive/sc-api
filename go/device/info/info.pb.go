// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/info/info.proto

package info

import (
	context "context"
	fmt "fmt"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListDevicesRequest struct {
	// Only return devices this deep in the device -> device -> device tree. Default is unlimited depth, 1 means only
	// return devices owned by the enclosing service.
	Depth int32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	// How many items should be returned. Default is 10, max is 100.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token from the previous response
	PageToken            string   `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDevicesRequest) Reset()         { *m = ListDevicesRequest{} }
func (m *ListDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*ListDevicesRequest) ProtoMessage()    {}
func (*ListDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{0}
}

func (m *ListDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesRequest.Unmarshal(m, b)
}
func (m *ListDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesRequest.Marshal(b, m, deterministic)
}
func (m *ListDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesRequest.Merge(m, src)
}
func (m *ListDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_ListDevicesRequest.Size(m)
}
func (m *ListDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesRequest proto.InternalMessageInfo

func (m *ListDevicesRequest) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *ListDevicesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListDevicesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListDevicesResponse struct {
	// The current page of devices to satisfy the request
	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	// Use in page_token to retrieve the next page
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of devices that would be returned if not splitting the response into pages.
	TotalSize            int32    `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDevicesResponse) Reset()         { *m = ListDevicesResponse{} }
func (m *ListDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*ListDevicesResponse) ProtoMessage()    {}
func (*ListDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{1}
}

func (m *ListDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDevicesResponse.Unmarshal(m, b)
}
func (m *ListDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDevicesResponse.Marshal(b, m, deterministic)
}
func (m *ListDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDevicesResponse.Merge(m, src)
}
func (m *ListDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_ListDevicesResponse.Size(m)
}
func (m *ListDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDevicesResponse proto.InternalMessageInfo

func (m *ListDevicesResponse) GetDevices() []*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *ListDevicesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListDevicesResponse) GetTotalSize() int32 {
	if m != nil {
		return m.TotalSize
	}
	return 0
}

type PullDevicesRequest struct {
	// Only return devices this deep in the device -> device -> device tree. Default is unlimited depth, 1 means only
	// return devices owned by the enclosing service.
	Depth int32 `protobuf:"varint,1,opt,name=depth,proto3" json:"depth,omitempty"`
	// if true, all existing devices will be sent down the stream before any updates.
	Sync                 bool     `protobuf:"varint,2,opt,name=sync,proto3" json:"sync,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullDevicesRequest) Reset()         { *m = PullDevicesRequest{} }
func (m *PullDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*PullDevicesRequest) ProtoMessage()    {}
func (*PullDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{2}
}

func (m *PullDevicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullDevicesRequest.Unmarshal(m, b)
}
func (m *PullDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullDevicesRequest.Marshal(b, m, deterministic)
}
func (m *PullDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDevicesRequest.Merge(m, src)
}
func (m *PullDevicesRequest) XXX_Size() int {
	return xxx_messageInfo_PullDevicesRequest.Size(m)
}
func (m *PullDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullDevicesRequest proto.InternalMessageInfo

func (m *PullDevicesRequest) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

func (m *PullDevicesRequest) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

type PullDevicesResponse struct {
	Changes              []*PullDevicesResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PullDevicesResponse) Reset()         { *m = PullDevicesResponse{} }
func (m *PullDevicesResponse) String() string { return proto.CompactTextString(m) }
func (*PullDevicesResponse) ProtoMessage()    {}
func (*PullDevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{3}
}

func (m *PullDevicesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullDevicesResponse.Unmarshal(m, b)
}
func (m *PullDevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullDevicesResponse.Marshal(b, m, deterministic)
}
func (m *PullDevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDevicesResponse.Merge(m, src)
}
func (m *PullDevicesResponse) XXX_Size() int {
	return xxx_messageInfo_PullDevicesResponse.Size(m)
}
func (m *PullDevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullDevicesResponse proto.InternalMessageInfo

func (m *PullDevicesResponse) GetChanges() []*PullDevicesResponse_Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

type PullDevicesResponse_Change struct {
	Type                 types.ChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=smartcore.api.types.ChangeType" json:"type,omitempty"`
	NewValue             *Device          `protobuf:"bytes,2,opt,name=new_value,json=newValue,proto3" json:"new_value,omitempty"`
	OldValue             *Device          `protobuf:"bytes,3,opt,name=old_value,json=oldValue,proto3" json:"old_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PullDevicesResponse_Change) Reset()         { *m = PullDevicesResponse_Change{} }
func (m *PullDevicesResponse_Change) String() string { return proto.CompactTextString(m) }
func (*PullDevicesResponse_Change) ProtoMessage()    {}
func (*PullDevicesResponse_Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{3, 0}
}

func (m *PullDevicesResponse_Change) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullDevicesResponse_Change.Unmarshal(m, b)
}
func (m *PullDevicesResponse_Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullDevicesResponse_Change.Marshal(b, m, deterministic)
}
func (m *PullDevicesResponse_Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullDevicesResponse_Change.Merge(m, src)
}
func (m *PullDevicesResponse_Change) XXX_Size() int {
	return xxx_messageInfo_PullDevicesResponse_Change.Size(m)
}
func (m *PullDevicesResponse_Change) XXX_DiscardUnknown() {
	xxx_messageInfo_PullDevicesResponse_Change.DiscardUnknown(m)
}

var xxx_messageInfo_PullDevicesResponse_Change proto.InternalMessageInfo

func (m *PullDevicesResponse_Change) GetType() types.ChangeType {
	if m != nil {
		return m.Type
	}
	return types.ChangeType_NONE
}

func (m *PullDevicesResponse_Change) GetNewValue() *Device {
	if m != nil {
		return m.NewValue
	}
	return nil
}

func (m *PullDevicesResponse_Change) GetOldValue() *Device {
	if m != nil {
		return m.OldValue
	}
	return nil
}

// Describes basic information about a device. Device hierarchy is loosely defined via the owner property
type Device struct {
	// the relative resource name for the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of traits the device has.
	Traits []*Trait `protobuf:"bytes,2,rep,name=traits,proto3" json:"traits,omitempty"`
	// Owner of the device. This is the the device, supervisor, or area controller that is directly responsible for
	// communication with the device, i.e. service requests should go through the owner.
	Owner *Device `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// Information use to connect to the device directly via gRPC. This must not be present if we are supposed to connect
	// via the owner device. This may be present if direct communication is possible, even if owner is also set. Prefer
	// Connecting via owner if possible.
	Client *GrpcClientOptions `protobuf:"bytes,4,opt,name=client,proto3" json:"client,omitempty"`
	// Official name for the device
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// Readable name for the device
	DisplayName string `protobuf:"bytes,6,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// One or more paragraphs of text describing the device
	Description string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	// arbitrary flags that can be applied to the device to encode additional information
	Labels               map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{4}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetTraits() []*Trait {
	if m != nil {
		return m.Traits
	}
	return nil
}

func (m *Device) GetOwner() *Device {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *Device) GetClient() *GrpcClientOptions {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Device) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Device) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Device) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Device) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// describes a trait for the api. See the devices/traits apis for details of these.
type Trait struct {
	// name of the trait service that is implements. In the format package.Service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether the device supports querying, i.e. getXxx apis
	Readable bool `protobuf:"varint,2,opt,name=readable,proto3" json:"readable,omitempty"`
	// Whether the device supports writable actions, i.e. setXxx or action apis
	Writable bool `protobuf:"varint,3,opt,name=writable,proto3" json:"writable,omitempty"`
	// Whether the device supports subscriptions, i.e. pull apis
	Observable bool `protobuf:"varint,4,opt,name=observable,proto3" json:"observable,omitempty"`
	// Serialised protobuf message describing any additional attributes for this device. The schema for the protobuf is
	// defined in the traits proto files and will be clearly documented
	Attributes           *any.Any `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trait) Reset()         { *m = Trait{} }
func (m *Trait) String() string { return proto.CompactTextString(m) }
func (*Trait) ProtoMessage()    {}
func (*Trait) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{5}
}

func (m *Trait) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trait.Unmarshal(m, b)
}
func (m *Trait) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trait.Marshal(b, m, deterministic)
}
func (m *Trait) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trait.Merge(m, src)
}
func (m *Trait) XXX_Size() int {
	return xxx_messageInfo_Trait.Size(m)
}
func (m *Trait) XXX_DiscardUnknown() {
	xxx_messageInfo_Trait.DiscardUnknown(m)
}

var xxx_messageInfo_Trait proto.InternalMessageInfo

func (m *Trait) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trait) GetReadable() bool {
	if m != nil {
		return m.Readable
	}
	return false
}

func (m *Trait) GetWritable() bool {
	if m != nil {
		return m.Writable
	}
	return false
}

func (m *Trait) GetObservable() bool {
	if m != nil {
		return m.Observable
	}
	return false
}

func (m *Trait) GetAttributes() *any.Any {
	if m != nil {
		return m.Attributes
	}
	return nil
}

// describes options relating to client connections
type GrpcClientOptions struct {
	// The host:port for the server
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// PEM encoded client certificate for use with gRPC transport security
	ClientCert []byte `protobuf:"bytes,2,opt,name=clientCert,proto3" json:"clientCert,omitempty"`
	// PEM encoded client private key for use with gRPC transport security
	ClientKey []byte `protobuf:"bytes,3,opt,name=clientKey,proto3" json:"clientKey,omitempty"`
	// PEM encoded certificate chan representing the certificate authority for use with gRPC transport security
	ClientCa             []byte   `protobuf:"bytes,4,opt,name=clientCa,proto3" json:"clientCa,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcClientOptions) Reset()         { *m = GrpcClientOptions{} }
func (m *GrpcClientOptions) String() string { return proto.CompactTextString(m) }
func (*GrpcClientOptions) ProtoMessage()    {}
func (*GrpcClientOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb7ac01265c47b, []int{6}
}

func (m *GrpcClientOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcClientOptions.Unmarshal(m, b)
}
func (m *GrpcClientOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcClientOptions.Marshal(b, m, deterministic)
}
func (m *GrpcClientOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcClientOptions.Merge(m, src)
}
func (m *GrpcClientOptions) XXX_Size() int {
	return xxx_messageInfo_GrpcClientOptions.Size(m)
}
func (m *GrpcClientOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcClientOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcClientOptions proto.InternalMessageInfo

func (m *GrpcClientOptions) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *GrpcClientOptions) GetClientCert() []byte {
	if m != nil {
		return m.ClientCert
	}
	return nil
}

func (m *GrpcClientOptions) GetClientKey() []byte {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

func (m *GrpcClientOptions) GetClientCa() []byte {
	if m != nil {
		return m.ClientCa
	}
	return nil
}

func init() {
	proto.RegisterType((*ListDevicesRequest)(nil), "smartcore.api.device.info.ListDevicesRequest")
	proto.RegisterType((*ListDevicesResponse)(nil), "smartcore.api.device.info.ListDevicesResponse")
	proto.RegisterType((*PullDevicesRequest)(nil), "smartcore.api.device.info.PullDevicesRequest")
	proto.RegisterType((*PullDevicesResponse)(nil), "smartcore.api.device.info.PullDevicesResponse")
	proto.RegisterType((*PullDevicesResponse_Change)(nil), "smartcore.api.device.info.PullDevicesResponse.Change")
	proto.RegisterType((*Device)(nil), "smartcore.api.device.info.Device")
	proto.RegisterMapType((map[string]string)(nil), "smartcore.api.device.info.Device.LabelsEntry")
	proto.RegisterType((*Trait)(nil), "smartcore.api.device.info.Trait")
	proto.RegisterType((*GrpcClientOptions)(nil), "smartcore.api.device.info.GrpcClientOptions")
}

func init() { proto.RegisterFile("device/info/info.proto", fileDescriptor_04bb7ac01265c47b) }

var fileDescriptor_04bb7ac01265c47b = []byte{
	// 784 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xd6, 0xfa, 0x2f, 0xde, 0xe3, 0xf0, 0x37, 0xad, 0xd0, 0xc6, 0x34, 0xe0, 0xfa, 0x02, 0xe5,
	0x02, 0xd6, 0x90, 0x82, 0x28, 0x20, 0x55, 0x4a, 0xd3, 0x0a, 0x21, 0x2a, 0x1a, 0x4d, 0xa3, 0x5e,
	0xa0, 0x48, 0xd6, 0xd8, 0x7b, 0xec, 0x8c, 0xba, 0x9d, 0x59, 0x76, 0xc6, 0x36, 0xdb, 0x07, 0xe0,
	0x86, 0x27, 0xe0, 0x05, 0x90, 0xe0, 0x92, 0x7b, 0x5e, 0x80, 0xe7, 0xe0, 0x41, 0xd0, 0x9c, 0xd9,
	0xb5, 0xb7, 0x24, 0x31, 0xbe, 0x89, 0x76, 0xbe, 0xf3, 0x7d, 0x67, 0xce, 0x77, 0xce, 0xe4, 0x18,
	0xde, 0x4d, 0x70, 0x29, 0xa7, 0x38, 0x92, 0x6a, 0xa6, 0xe9, 0x4f, 0x9c, 0xe5, 0xda, 0x6a, 0x76,
	0x60, 0x5e, 0x8a, 0xdc, 0x4e, 0x75, 0x8e, 0xb1, 0xc8, 0x64, 0xec, 0x59, 0xb1, 0x23, 0xf4, 0x0f,
	0xe6, 0x5a, 0xcf, 0x53, 0x1c, 0x11, 0x71, 0xb2, 0x98, 0x8d, 0x84, 0x2a, 0xbc, 0xaa, 0xcf, 0x6c,
	0x91, 0xa1, 0x19, 0x4d, 0x2f, 0x85, 0x9a, 0xa3, 0xc7, 0x86, 0x33, 0x60, 0x4f, 0xa4, 0xb1, 0x8f,
	0x28, 0x83, 0xe1, 0xf8, 0xe3, 0x02, 0x8d, 0x65, 0xb7, 0xa1, 0x9d, 0x60, 0x66, 0x2f, 0xa3, 0x60,
	0x10, 0x1c, 0xb5, 0xb9, 0x3f, 0xb0, 0xf7, 0x20, 0xcc, 0xc4, 0x1c, 0xc7, 0x46, 0xbe, 0xc2, 0xa8,
	0x41, 0x91, 0xae, 0x03, 0x9e, 0xc9, 0x57, 0xc8, 0x0e, 0x01, 0x28, 0x68, 0xf5, 0x0b, 0x54, 0x51,
	0x73, 0x10, 0x1c, 0x85, 0x9c, 0xe8, 0xe7, 0x0e, 0x18, 0xfe, 0x1a, 0xc0, 0xad, 0xd7, 0x2e, 0x32,
	0x99, 0x56, 0x06, 0xd9, 0xd7, 0xb0, 0xe7, 0xab, 0x37, 0x51, 0x30, 0x68, 0x1e, 0xf5, 0x8e, 0xef,
	0xc6, 0x37, 0x7a, 0x8b, 0xbd, 0x98, 0x57, 0x0a, 0xf6, 0x21, 0xbc, 0xa5, 0xf0, 0x27, 0x3b, 0xae,
	0x5d, 0xdc, 0xa0, 0x8b, 0xdf, 0x70, 0xf0, 0x59, 0x75, 0xb9, 0xab, 0xcd, 0x6a, 0x2b, 0x52, 0x5f,
	0x79, 0x93, 0x2a, 0x0f, 0x09, 0x71, 0xa5, 0x0f, 0x1f, 0x00, 0x3b, 0x5b, 0xa4, 0xe9, 0x4e, 0x3d,
	0x60, 0xd0, 0x32, 0x85, 0x9a, 0xd2, 0x3d, 0x5d, 0x4e, 0xdf, 0xc3, 0xdf, 0x1a, 0x70, 0xeb, 0xb5,
	0x04, 0xa5, 0xb7, 0xa7, 0xb0, 0xe7, 0x7b, 0x5d, 0x79, 0xfb, 0x7c, 0x8b, 0xb7, 0x6b, 0x12, 0xc4,
	0xa7, 0xa4, 0xe6, 0x55, 0x96, 0xfe, 0x5f, 0x01, 0x74, 0x3c, 0xc6, 0xee, 0x41, 0xcb, 0x4d, 0x93,
	0x8a, 0x7b, 0xf3, 0xf8, 0x83, 0xff, 0x24, 0xa6, 0x41, 0x97, 0xf2, 0xf3, 0x22, 0x43, 0x4e, 0x64,
	0xf6, 0x00, 0x42, 0x85, 0xab, 0xf1, 0x52, 0xa4, 0x0b, 0x3f, 0xc0, 0x9d, 0xda, 0xdd, 0x55, 0xb8,
	0x7a, 0xee, 0x24, 0x4e, 0xaf, 0xd3, 0xa4, 0xd4, 0x37, 0x77, 0xd6, 0xeb, 0x34, 0x21, 0xfd, 0xf0,
	0xcf, 0x26, 0x74, 0x3c, 0xe8, 0xfa, 0xa8, 0xc4, 0x4b, 0x5f, 0x7f, 0xc8, 0xe9, 0x9b, 0xdd, 0x87,
	0x8e, 0xcd, 0x85, 0xb4, 0x26, 0x6a, 0x50, 0xbb, 0x06, 0x5b, 0x72, 0x9f, 0x3b, 0x22, 0x2f, 0xf9,
	0xec, 0x0b, 0x68, 0xeb, 0x95, 0xc2, 0x7c, 0xf7, 0xa2, 0x3c, 0x9f, 0x3d, 0x82, 0xce, 0x34, 0x95,
	0xa8, 0x6c, 0xd4, 0x22, 0xe5, 0x47, 0x5b, 0x94, 0xdf, 0xe4, 0xd9, 0xf4, 0x94, 0xc8, 0x4f, 0x33,
	0x2b, 0xb5, 0x32, 0xbc, 0xd4, 0xba, 0xa7, 0x62, 0xa5, 0x4d, 0x31, 0x6a, 0x93, 0x1b, 0x7f, 0x60,
	0x77, 0x61, 0x3f, 0x91, 0x26, 0x4b, 0x45, 0x31, 0x26, 0xab, 0x1d, 0x0a, 0xf6, 0x4a, 0xec, 0x7b,
	0xe7, 0x78, 0x00, 0xbd, 0x04, 0xcd, 0x34, 0x97, 0x94, 0x30, 0xda, 0x2b, 0x19, 0x1b, 0x88, 0x3d,
	0x86, 0x4e, 0x2a, 0x26, 0x98, 0x9a, 0xa8, 0x4b, 0x3d, 0xf9, 0xf8, 0x7f, 0xad, 0xc5, 0x4f, 0x88,
	0xff, 0x58, 0xd9, 0xbc, 0xe0, 0xa5, 0xb8, 0xff, 0x25, 0xf4, 0x6a, 0x30, 0x7b, 0x1b, 0x9a, 0x2f,
	0xb0, 0x28, 0x9b, 0xef, 0x3e, 0x9d, 0x85, 0xcd, 0xb3, 0x08, 0xb9, 0x3f, 0x7c, 0xd5, 0xb8, 0x1f,
	0x0c, 0x7f, 0x0f, 0xa0, 0x4d, 0xdd, 0xbe, 0x76, 0x66, 0x7d, 0xe8, 0xe6, 0x28, 0x12, 0x31, 0x49,
	0xb1, 0xfc, 0x9f, 0x58, 0x9f, 0x5d, 0x6c, 0x95, 0x4b, 0x4b, 0xb1, 0xa6, 0x8f, 0x55, 0x67, 0xf6,
	0x3e, 0x80, 0x9e, 0x18, 0xcc, 0x97, 0x14, 0x6d, 0x51, 0xb4, 0x86, 0xb0, 0xcf, 0x00, 0x84, 0xb5,
	0xb9, 0x9c, 0x2c, 0x2c, 0x1a, 0xea, 0x6b, 0xef, 0xf8, 0x76, 0xec, 0x77, 0x5b, 0x5c, 0xed, 0xb6,
	0xf8, 0x44, 0x15, 0xbc, 0xc6, 0x1b, 0xfe, 0x12, 0xc0, 0x3b, 0x57, 0xc6, 0xc4, 0xee, 0x40, 0x28,
	0x16, 0xf6, 0x52, 0xe7, 0xd2, 0x56, 0x9e, 0x37, 0x80, 0xab, 0xc4, 0x8f, 0xf1, 0x14, 0x73, 0x4b,
	0x1e, 0xf6, 0x79, 0x0d, 0x71, 0x6a, 0x7f, 0xfa, 0x0e, 0x0b, 0xb2, 0xb1, 0xcf, 0x37, 0x80, 0xf3,
	0x58, 0x72, 0x05, 0xb9, 0xd8, 0xe7, 0xeb, 0xf3, 0xf1, 0x3f, 0x01, 0xb4, 0xbe, 0x55, 0x33, 0xcd,
	0x52, 0xe8, 0xd5, 0x76, 0x1f, 0xdb, 0x36, 0xc3, 0xab, 0xcb, 0xb8, 0x1f, 0xef, 0x4a, 0x2f, 0xd7,
	0x8e, 0x82, 0x5e, 0x6d, 0x99, 0x6c, 0xbd, 0xed, 0xea, 0xda, 0xdb, 0x7a, 0xdb, 0x35, 0x3b, 0xea,
	0x93, 0xe0, 0xe1, 0xcf, 0x01, 0x1c, 0x26, 0xb8, 0xbc, 0x59, 0xf7, 0x30, 0x74, 0x5d, 0x38, 0x73,
	0x43, 0x3b, 0x0b, 0x7e, 0x38, 0xdc, 0xf0, 0x12, 0x5c, 0x8e, 0x44, 0x26, 0x47, 0xb5, 0x5f, 0xb9,
	0x3f, 0x1a, 0x77, 0x9e, 0xad, 0xe3, 0x27, 0x99, 0xac, 0x1e, 0xb5, 0xcb, 0x10, 0x3f, 0xff, 0xf4,
	0xef, 0xc6, 0xc1, 0x3a, 0x7c, 0x71, 0x92, 0xc9, 0x0b, 0x1f, 0xbe, 0x70, 0xe1, 0x49, 0x87, 0xde,
	0xc5, 0xbd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x9c, 0x59, 0x81, 0x36, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoClient interface {
	// Get devices that this service knows about
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Open a server stream that responds with changes to the set of devices described in the request
	PullDevices(ctx context.Context, in *PullDevicesRequest, opts ...grpc.CallOption) (Info_PullDevicesClient, error)
}

type infoClient struct {
	cc *grpc.ClientConn
}

func NewInfoClient(cc *grpc.ClientConn) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.info.Info/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) PullDevices(ctx context.Context, in *PullDevicesRequest, opts ...grpc.CallOption) (Info_PullDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Info_serviceDesc.Streams[0], "/smartcore.api.device.info.Info/PullDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &infoPullDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Info_PullDevicesClient interface {
	Recv() (*PullDevicesResponse, error)
	grpc.ClientStream
}

type infoPullDevicesClient struct {
	grpc.ClientStream
}

func (x *infoPullDevicesClient) Recv() (*PullDevicesResponse, error) {
	m := new(PullDevicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InfoServer is the server API for Info service.
type InfoServer interface {
	// Get devices that this service knows about
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Open a server stream that responds with changes to the set of devices described in the request
	PullDevices(*PullDevicesRequest, Info_PullDevicesServer) error
}

// UnimplementedInfoServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (*UnimplementedInfoServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedInfoServer) PullDevices(req *PullDevicesRequest, srv Info_PullDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullDevices not implemented")
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.info.Info/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_PullDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InfoServer).PullDevices(m, &infoPullDevicesServer{stream})
}

type Info_PullDevicesServer interface {
	Send(*PullDevicesResponse) error
	grpc.ServerStream
}

type infoPullDevicesServer struct {
	grpc.ServerStream
}

func (x *infoPullDevicesServer) Send(m *PullDevicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.info.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDevices",
			Handler:    _Info_ListDevices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDevices",
			Handler:       _Info_PullDevices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/info/info.proto",
}
