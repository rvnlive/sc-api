// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthProviderClient is the client API for AuthProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthProviderClient interface {
	GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error)
}

type authProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthProviderClient(cc grpc.ClientConnInterface) AuthProviderClient {
	return &authProviderClient{cc}
}

func (c *authProviderClient) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...grpc.CallOption) (*GenerateTokenResponse, error) {
	out := new(GenerateTokenResponse)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.info.AuthProvider/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthProviderServer is the server API for AuthProvider service.
// All implementations must embed UnimplementedAuthProviderServer
// for forward compatibility
type AuthProviderServer interface {
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	mustEmbedUnimplementedAuthProviderServer()
}

// UnimplementedAuthProviderServer must be embedded to have forward compatible implementations.
type UnimplementedAuthProviderServer struct {
}

func (*UnimplementedAuthProviderServer) GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (*UnimplementedAuthProviderServer) mustEmbedUnimplementedAuthProviderServer() {}

func RegisterAuthProviderServer(s *grpc.Server, srv AuthProviderServer) {
	s.RegisterService(&_AuthProvider_serviceDesc, srv)
}

func _AuthProvider_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthProviderServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.info.AuthProvider/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthProviderServer).GenerateToken(ctx, req.(*GenerateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.info.AuthProvider",
	HandlerType: (*AuthProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateToken",
			Handler:    _AuthProvider_GenerateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/info/auth.proto",
}
