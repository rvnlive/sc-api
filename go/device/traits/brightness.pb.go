// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: device/traits/brightness.proto

package traits

import (
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Trait.attribute for brightness capabilities
type BrightnessAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// control how the brightness can be controlled. The range of these attributes is fixed at 0-100 as a percentage
	BrightnessAttributes *types.Int32Attributes `protobuf:"bytes,1,opt,name=brightness_attributes,json=brightnessAttributes,proto3" json:"brightness_attributes,omitempty"`
	// A description of the supported presets, none means no presets
	Presets []*BrightnessPreset `protobuf:"bytes,2,rep,name=presets,proto3" json:"presets,omitempty"`
}

func (x *BrightnessAttributes) Reset() {
	*x = BrightnessAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrightnessAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrightnessAttributes) ProtoMessage() {}

func (x *BrightnessAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrightnessAttributes.ProtoReflect.Descriptor instead.
func (*BrightnessAttributes) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{0}
}

func (x *BrightnessAttributes) GetBrightnessAttributes() *types.Int32Attributes {
	if x != nil {
		return x.BrightnessAttributes
	}
	return nil
}

func (x *BrightnessAttributes) GetPresets() []*BrightnessPreset {
	if x != nil {
		return x.Presets
	}
	return nil
}

type Brightness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A level that the device is set to.
	Level *types.Int32Var `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// A preset that the device is using
	Preset *BrightnessPreset `protobuf:"bytes,2,opt,name=preset,proto3" json:"preset,omitempty"`
}

func (x *Brightness) Reset() {
	*x = Brightness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brightness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brightness) ProtoMessage() {}

func (x *Brightness) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brightness.ProtoReflect.Descriptor instead.
func (*Brightness) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{1}
}

func (x *Brightness) GetLevel() *types.Int32Var {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *Brightness) GetPreset() *BrightnessPreset {
	if x != nil {
		return x.Preset
	}
	return nil
}

type BrightnessPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *BrightnessPreset) Reset() {
	*x = BrightnessPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrightnessPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrightnessPreset) ProtoMessage() {}

func (x *BrightnessPreset) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrightnessPreset.ProtoReflect.Descriptor instead.
func (*BrightnessPreset) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{2}
}

func (x *BrightnessPreset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrightnessPreset) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// A request to update the value of a brightness
type UpdateBrightnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to update
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new value for the brightness. Supply ramp to transition
	Brightness *Brightness `protobuf:"bytes,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
	// if true, then the values in the brightness represent deltas from the current value and not absolute values
	Delta bool `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *UpdateBrightnessRequest) Reset() {
	*x = UpdateBrightnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBrightnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBrightnessRequest) ProtoMessage() {}

func (x *UpdateBrightnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBrightnessRequest.ProtoReflect.Descriptor instead.
func (*UpdateBrightnessRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateBrightnessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateBrightnessRequest) GetBrightness() *Brightness {
	if x != nil {
		return x.Brightness
	}
	return nil
}

func (x *UpdateBrightnessRequest) GetDelta() bool {
	if x != nil {
		return x.Delta
	}
	return false
}

// A request to get the current value of a brightness
type GetBrightnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to get the value for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBrightnessRequest) Reset() {
	*x = GetBrightnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBrightnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBrightnessRequest) ProtoMessage() {}

func (x *GetBrightnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBrightnessRequest.ProtoReflect.Descriptor instead.
func (*GetBrightnessRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{4}
}

func (x *GetBrightnessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request to begin a subscription for brightness values
type PullBrightnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device we want events from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicate whether we want to be notified of values while ramping or not. The device may ignore this depending on
	// capabilities
	ExcludeRamping bool `protobuf:"varint,2,opt,name=exclude_ramping,json=excludeRamping,proto3" json:"exclude_ramping,omitempty"`
}

func (x *PullBrightnessRequest) Reset() {
	*x = PullBrightnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBrightnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBrightnessRequest) ProtoMessage() {}

func (x *PullBrightnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBrightnessRequest.ProtoReflect.Descriptor instead.
func (*PullBrightnessRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{5}
}

func (x *PullBrightnessRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullBrightnessRequest) GetExcludeRamping() bool {
	if x != nil {
		return x.ExcludeRamping
	}
	return false
}

// A response as part of the stream of changes to the brightness value
type PullBrightnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of changes
	Changes []*BrightnessChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullBrightnessResponse) Reset() {
	*x = PullBrightnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBrightnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBrightnessResponse) ProtoMessage() {}

func (x *PullBrightnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBrightnessResponse.ProtoReflect.Descriptor instead.
func (*PullBrightnessResponse) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{6}
}

func (x *PullBrightnessResponse) GetChanges() []*BrightnessChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

// A change to a single devices brightness value
type BrightnessChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The new value for the brightness
	Brightness *Brightness `protobuf:"bytes,3,opt,name=brightness,proto3" json:"brightness,omitempty"`
}

func (x *BrightnessChange) Reset() {
	*x = BrightnessChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_brightness_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrightnessChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrightnessChange) ProtoMessage() {}

func (x *BrightnessChange) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_brightness_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrightnessChange.ProtoReflect.Descriptor instead.
func (*BrightnessChange) Descriptor() ([]byte, []int) {
	return file_device_traits_brightness_proto_rawDescGZIP(), []int{7}
}

func (x *BrightnessChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BrightnessChange) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BrightnessChange) GetBrightness() *Brightness {
	if x != nil {
		return x.Brightness
	}
	return nil
}

var File_device_traits_brightness_proto protoreflect.FileDescriptor

var file_device_traits_brightness_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x14, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x33,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x72, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x22, 0x3c, 0x0a, 0x10, 0x42, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x15, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6d, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x61, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x16, 0x50, 0x75, 0x6c,
	0x6c, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a,
	0x10, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x0a, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x32, 0xec, 0x02, 0x0a, 0x0d,
	0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x70, 0x69, 0x12, 0x71, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x6b, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x7b, 0x0a,
	0x0e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0xa3, 0x01, 0x0a, 0x1f, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x0f,
	0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x2e, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2e, 0x63, 0x6f, 0x2e,
	0x75, 0x6b, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x1b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x73, 0xca, 0x02, 0x1b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x41,
	0x70, 0x69, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_traits_brightness_proto_rawDescOnce sync.Once
	file_device_traits_brightness_proto_rawDescData = file_device_traits_brightness_proto_rawDesc
)

func file_device_traits_brightness_proto_rawDescGZIP() []byte {
	file_device_traits_brightness_proto_rawDescOnce.Do(func() {
		file_device_traits_brightness_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_traits_brightness_proto_rawDescData)
	})
	return file_device_traits_brightness_proto_rawDescData
}

var file_device_traits_brightness_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_device_traits_brightness_proto_goTypes = []interface{}{
	(*BrightnessAttributes)(nil),    // 0: smartcore.api.device.traits.BrightnessAttributes
	(*Brightness)(nil),              // 1: smartcore.api.device.traits.Brightness
	(*BrightnessPreset)(nil),        // 2: smartcore.api.device.traits.BrightnessPreset
	(*UpdateBrightnessRequest)(nil), // 3: smartcore.api.device.traits.UpdateBrightnessRequest
	(*GetBrightnessRequest)(nil),    // 4: smartcore.api.device.traits.GetBrightnessRequest
	(*PullBrightnessRequest)(nil),   // 5: smartcore.api.device.traits.PullBrightnessRequest
	(*PullBrightnessResponse)(nil),  // 6: smartcore.api.device.traits.PullBrightnessResponse
	(*BrightnessChange)(nil),        // 7: smartcore.api.device.traits.BrightnessChange
	(*types.Int32Attributes)(nil),   // 8: smartcore.api.types.Int32Attributes
	(*types.Int32Var)(nil),          // 9: smartcore.api.types.Int32Var
	(*timestamp.Timestamp)(nil),     // 10: google.protobuf.Timestamp
}
var file_device_traits_brightness_proto_depIdxs = []int32{
	8,  // 0: smartcore.api.device.traits.BrightnessAttributes.brightness_attributes:type_name -> smartcore.api.types.Int32Attributes
	2,  // 1: smartcore.api.device.traits.BrightnessAttributes.presets:type_name -> smartcore.api.device.traits.BrightnessPreset
	9,  // 2: smartcore.api.device.traits.Brightness.level:type_name -> smartcore.api.types.Int32Var
	2,  // 3: smartcore.api.device.traits.Brightness.preset:type_name -> smartcore.api.device.traits.BrightnessPreset
	1,  // 4: smartcore.api.device.traits.UpdateBrightnessRequest.brightness:type_name -> smartcore.api.device.traits.Brightness
	7,  // 5: smartcore.api.device.traits.PullBrightnessResponse.changes:type_name -> smartcore.api.device.traits.BrightnessChange
	10, // 6: smartcore.api.device.traits.BrightnessChange.create_time:type_name -> google.protobuf.Timestamp
	1,  // 7: smartcore.api.device.traits.BrightnessChange.brightness:type_name -> smartcore.api.device.traits.Brightness
	3,  // 8: smartcore.api.device.traits.BrightnessApi.UpdateRangeValue:input_type -> smartcore.api.device.traits.UpdateBrightnessRequest
	4,  // 9: smartcore.api.device.traits.BrightnessApi.GetBrightness:input_type -> smartcore.api.device.traits.GetBrightnessRequest
	5,  // 10: smartcore.api.device.traits.BrightnessApi.PullBrightness:input_type -> smartcore.api.device.traits.PullBrightnessRequest
	1,  // 11: smartcore.api.device.traits.BrightnessApi.UpdateRangeValue:output_type -> smartcore.api.device.traits.Brightness
	1,  // 12: smartcore.api.device.traits.BrightnessApi.GetBrightness:output_type -> smartcore.api.device.traits.Brightness
	6,  // 13: smartcore.api.device.traits.BrightnessApi.PullBrightness:output_type -> smartcore.api.device.traits.PullBrightnessResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_device_traits_brightness_proto_init() }
func file_device_traits_brightness_proto_init() {
	if File_device_traits_brightness_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_traits_brightness_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrightnessAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brightness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrightnessPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBrightnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBrightnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBrightnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBrightnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_brightness_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrightnessChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_traits_brightness_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_traits_brightness_proto_goTypes,
		DependencyIndexes: file_device_traits_brightness_proto_depIdxs,
		MessageInfos:      file_device_traits_brightness_proto_msgTypes,
	}.Build()
	File_device_traits_brightness_proto = out.File
	file_device_traits_brightness_proto_rawDesc = nil
	file_device_traits_brightness_proto_goTypes = nil
	file_device_traits_brightness_proto_depIdxs = nil
}
