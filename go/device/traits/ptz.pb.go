// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/traits/ptz.proto

package traits

import (
	context "context"
	fmt "fmt"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Trait.attribute for defining the capabilities of this device
type PtzAttributes struct {
	// Can we ask the device to move to a specific position
	SupportsPosition bool `protobuf:"varint,1,opt,name=supports_position,json=supportsPosition,proto3" json:"supports_position,omitempty"`
	// Can we move the device without a target position in mind
	SupportsMovement bool `protobuf:"varint,2,opt,name=supports_movement,json=supportsMovement,proto3" json:"supports_movement,omitempty"`
	// A list of presets that the device has configured. If the list is empty and supports_custom_presets is false then
	// the device doesn't support presets
	Presets []*PtzPreset `protobuf:"bytes,3,rep,name=presets,proto3" json:"presets,omitempty"`
	// If true, custom preset names can be used to store ptz positions. If false only writable presets can be updated.
	SupportsCustomPresets bool     `protobuf:"varint,4,opt,name=supports_custom_presets,json=supportsCustomPresets,proto3" json:"supports_custom_presets,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *PtzAttributes) Reset()         { *m = PtzAttributes{} }
func (m *PtzAttributes) String() string { return proto.CompactTextString(m) }
func (*PtzAttributes) ProtoMessage()    {}
func (*PtzAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{0}
}

func (m *PtzAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzAttributes.Unmarshal(m, b)
}
func (m *PtzAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzAttributes.Marshal(b, m, deterministic)
}
func (m *PtzAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzAttributes.Merge(m, src)
}
func (m *PtzAttributes) XXX_Size() int {
	return xxx_messageInfo_PtzAttributes.Size(m)
}
func (m *PtzAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_PtzAttributes proto.InternalMessageInfo

func (m *PtzAttributes) GetSupportsPosition() bool {
	if m != nil {
		return m.SupportsPosition
	}
	return false
}

func (m *PtzAttributes) GetSupportsMovement() bool {
	if m != nil {
		return m.SupportsMovement
	}
	return false
}

func (m *PtzAttributes) GetPresets() []*PtzPreset {
	if m != nil {
		return m.Presets
	}
	return nil
}

func (m *PtzAttributes) GetSupportsCustomPresets() bool {
	if m != nil {
		return m.SupportsCustomPresets
	}
	return false
}

// The current or intended state for the device
type PtzState struct {
	// The current position of the PTZ device (if known)
	Position *PtzPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// The current motion of the PTZ device (if known)
	Movement *PtzMovement `protobuf:"bytes,2,opt,name=movement,proto3" json:"movement,omitempty"`
	// The current preset selected for the device (if known)
	Preset string `protobuf:"bytes,3,opt,name=preset,proto3" json:"preset,omitempty"`
	// The speed the preset should be applied. 0 for 'use device default'
	PresetSpeed          int32    `protobuf:"varint,4,opt,name=preset_speed,json=presetSpeed,proto3" json:"preset_speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtzState) Reset()         { *m = PtzState{} }
func (m *PtzState) String() string { return proto.CompactTextString(m) }
func (*PtzState) ProtoMessage()    {}
func (*PtzState) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{1}
}

func (m *PtzState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzState.Unmarshal(m, b)
}
func (m *PtzState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzState.Marshal(b, m, deterministic)
}
func (m *PtzState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzState.Merge(m, src)
}
func (m *PtzState) XXX_Size() int {
	return xxx_messageInfo_PtzState.Size(m)
}
func (m *PtzState) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzState.DiscardUnknown(m)
}

var xxx_messageInfo_PtzState proto.InternalMessageInfo

func (m *PtzState) GetPosition() *PtzPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *PtzState) GetMovement() *PtzMovement {
	if m != nil {
		return m.Movement
	}
	return nil
}

func (m *PtzState) GetPreset() string {
	if m != nil {
		return m.Preset
	}
	return ""
}

func (m *PtzState) GetPresetSpeed() int32 {
	if m != nil {
		return m.PresetSpeed
	}
	return 0
}

// Defines a value for the pan, tilt, and zoom of the device. This vector can represent a movement in a particular
// direction or a final position to aim for. If used for movement then the values should be positive or negative to
// represent the direction of movement. For absolute values the bounds attribute of the device are used as a guide.
//
// All values are relative to the focus of the vector in the real world. For example for a camera, to move right means
// that the image captured by the camera show more on the right and less on the left of the image.
type PtzVector struct {
	// left/right direction for movement or position. Positive values mean right, negative mean left when moving
	Pan float32 `protobuf:"fixed32,1,opt,name=pan,proto3" json:"pan,omitempty"`
	// up/down direction for movement or position. Positive values mean up, negative mean down when moving
	Tilt float32 `protobuf:"fixed32,2,opt,name=tilt,proto3" json:"tilt,omitempty"`
	// in/out direction for movement or zoom level. Positive values mean in, negative mean out when moving
	Zoom                 float32  `protobuf:"fixed32,3,opt,name=zoom,proto3" json:"zoom,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtzVector) Reset()         { *m = PtzVector{} }
func (m *PtzVector) String() string { return proto.CompactTextString(m) }
func (*PtzVector) ProtoMessage()    {}
func (*PtzVector) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{2}
}

func (m *PtzVector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzVector.Unmarshal(m, b)
}
func (m *PtzVector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzVector.Marshal(b, m, deterministic)
}
func (m *PtzVector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzVector.Merge(m, src)
}
func (m *PtzVector) XXX_Size() int {
	return xxx_messageInfo_PtzVector.Size(m)
}
func (m *PtzVector) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzVector.DiscardUnknown(m)
}

var xxx_messageInfo_PtzVector proto.InternalMessageInfo

func (m *PtzVector) GetPan() float32 {
	if m != nil {
		return m.Pan
	}
	return 0
}

func (m *PtzVector) GetTilt() float32 {
	if m != nil {
		return m.Tilt
	}
	return 0
}

func (m *PtzVector) GetZoom() float32 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

// The minimum and maximum values each of the PTZ vector axes can take.
type PtzBounds struct {
	Min                  *PtzVector `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  *PtzVector `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PtzBounds) Reset()         { *m = PtzBounds{} }
func (m *PtzBounds) String() string { return proto.CompactTextString(m) }
func (*PtzBounds) ProtoMessage()    {}
func (*PtzBounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{3}
}

func (m *PtzBounds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzBounds.Unmarshal(m, b)
}
func (m *PtzBounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzBounds.Marshal(b, m, deterministic)
}
func (m *PtzBounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzBounds.Merge(m, src)
}
func (m *PtzBounds) XXX_Size() int {
	return xxx_messageInfo_PtzBounds.Size(m)
}
func (m *PtzBounds) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzBounds.DiscardUnknown(m)
}

var xxx_messageInfo_PtzBounds proto.InternalMessageInfo

func (m *PtzBounds) GetMin() *PtzVector {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *PtzBounds) GetMax() *PtzVector {
	if m != nil {
		return m.Max
	}
	return nil
}

// A description of the movement for the PTZ device
type PtzMovement struct {
	// Which direction are we moving. Only the sign of the dimensions of the vector are used to denote direction of
	// movement
	Direction *PtzVector `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	// The speed at which the PTZ device should move. Defined as a Var so that the speed can change over time. For example
	// increasing the speed as the movement continues. If not specified the device may ramp speed on its own
	Speed                *types.Int32Var `protobuf:"bytes,2,opt,name=speed,proto3" json:"speed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PtzMovement) Reset()         { *m = PtzMovement{} }
func (m *PtzMovement) String() string { return proto.CompactTextString(m) }
func (*PtzMovement) ProtoMessage()    {}
func (*PtzMovement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{4}
}

func (m *PtzMovement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzMovement.Unmarshal(m, b)
}
func (m *PtzMovement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzMovement.Marshal(b, m, deterministic)
}
func (m *PtzMovement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzMovement.Merge(m, src)
}
func (m *PtzMovement) XXX_Size() int {
	return xxx_messageInfo_PtzMovement.Size(m)
}
func (m *PtzMovement) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzMovement.DiscardUnknown(m)
}

var xxx_messageInfo_PtzMovement proto.InternalMessageInfo

func (m *PtzMovement) GetDirection() *PtzVector {
	if m != nil {
		return m.Direction
	}
	return nil
}

func (m *PtzMovement) GetSpeed() *types.Int32Var {
	if m != nil {
		return m.Speed
	}
	return nil
}

// A description of the current position of the PTZ device.
type PtzPosition struct {
	// The current position.
	Position *PtzVector `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// How long the should the device take to get to the target position.
	Tween *types.Tween `protobuf:"bytes,2,opt,name=tween,proto3" json:"tween,omitempty"`
	// The target position that will be reached after the tween duration.
	TargetPosition       *PtzVector `protobuf:"bytes,3,opt,name=target_position,json=targetPosition,proto3" json:"target_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PtzPosition) Reset()         { *m = PtzPosition{} }
func (m *PtzPosition) String() string { return proto.CompactTextString(m) }
func (*PtzPosition) ProtoMessage()    {}
func (*PtzPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{5}
}

func (m *PtzPosition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzPosition.Unmarshal(m, b)
}
func (m *PtzPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzPosition.Marshal(b, m, deterministic)
}
func (m *PtzPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzPosition.Merge(m, src)
}
func (m *PtzPosition) XXX_Size() int {
	return xxx_messageInfo_PtzPosition.Size(m)
}
func (m *PtzPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzPosition.DiscardUnknown(m)
}

var xxx_messageInfo_PtzPosition proto.InternalMessageInfo

func (m *PtzPosition) GetPosition() *PtzVector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *PtzPosition) GetTween() *types.Tween {
	if m != nil {
		return m.Tween
	}
	return nil
}

func (m *PtzPosition) GetTargetPosition() *PtzVector {
	if m != nil {
		return m.TargetPosition
	}
	return nil
}

// Describes a preset that may be configured on the device
type PtzPreset struct {
	// Required. The name of the preset, to be used for recall.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Official human readable name for the preset
	Title       string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Optional position of the preset
	Position *PtzVector `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// Can this preset be stored via the api
	Writable             bool     `protobuf:"varint,5,opt,name=writable,proto3" json:"writable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PtzPreset) Reset()         { *m = PtzPreset{} }
func (m *PtzPreset) String() string { return proto.CompactTextString(m) }
func (*PtzPreset) ProtoMessage()    {}
func (*PtzPreset) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{6}
}

func (m *PtzPreset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzPreset.Unmarshal(m, b)
}
func (m *PtzPreset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzPreset.Marshal(b, m, deterministic)
}
func (m *PtzPreset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzPreset.Merge(m, src)
}
func (m *PtzPreset) XXX_Size() int {
	return xxx_messageInfo_PtzPreset.Size(m)
}
func (m *PtzPreset) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzPreset.DiscardUnknown(m)
}

var xxx_messageInfo_PtzPreset proto.InternalMessageInfo

func (m *PtzPreset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PtzPreset) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PtzPreset) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PtzPreset) GetPosition() *PtzVector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *PtzPreset) GetWritable() bool {
	if m != nil {
		return m.Writable
	}
	return false
}

type GetPtzStateRequest struct {
	// The name of the device to request state from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// which fields do we want to fetch
	Fields               *field_mask.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetPtzStateRequest) Reset()         { *m = GetPtzStateRequest{} }
func (m *GetPtzStateRequest) String() string { return proto.CompactTextString(m) }
func (*GetPtzStateRequest) ProtoMessage()    {}
func (*GetPtzStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{7}
}

func (m *GetPtzStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPtzStateRequest.Unmarshal(m, b)
}
func (m *GetPtzStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPtzStateRequest.Marshal(b, m, deterministic)
}
func (m *GetPtzStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPtzStateRequest.Merge(m, src)
}
func (m *GetPtzStateRequest) XXX_Size() int {
	return xxx_messageInfo_GetPtzStateRequest.Size(m)
}
func (m *GetPtzStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPtzStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPtzStateRequest proto.InternalMessageInfo

func (m *GetPtzStateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPtzStateRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdatePtzStateRequest struct {
	// the name of the device to update the state of
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new state
	State *PtzState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// The fields we are intending to update relative to the PtzState
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdatePtzStateRequest) Reset()         { *m = UpdatePtzStateRequest{} }
func (m *UpdatePtzStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePtzStateRequest) ProtoMessage()    {}
func (*UpdatePtzStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{8}
}

func (m *UpdatePtzStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePtzStateRequest.Unmarshal(m, b)
}
func (m *UpdatePtzStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePtzStateRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePtzStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePtzStateRequest.Merge(m, src)
}
func (m *UpdatePtzStateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePtzStateRequest.Size(m)
}
func (m *UpdatePtzStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePtzStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePtzStateRequest proto.InternalMessageInfo

func (m *UpdatePtzStateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdatePtzStateRequest) GetState() *PtzState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *UpdatePtzStateRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type StopPtzRequest struct {
	// the name of the device to stop
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StopPtzRequest) Reset()         { *m = StopPtzRequest{} }
func (m *StopPtzRequest) String() string { return proto.CompactTextString(m) }
func (*StopPtzRequest) ProtoMessage()    {}
func (*StopPtzRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{9}
}

func (m *StopPtzRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StopPtzRequest.Unmarshal(m, b)
}
func (m *StopPtzRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StopPtzRequest.Marshal(b, m, deterministic)
}
func (m *StopPtzRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopPtzRequest.Merge(m, src)
}
func (m *StopPtzRequest) XXX_Size() int {
	return xxx_messageInfo_StopPtzRequest.Size(m)
}
func (m *StopPtzRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StopPtzRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StopPtzRequest proto.InternalMessageInfo

func (m *StopPtzRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreatePtzPresetRequest struct {
	// the name of the device to update the state of
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Details for the preset
	Preset               *PtzPreset `protobuf:"bytes,2,opt,name=preset,proto3" json:"preset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreatePtzPresetRequest) Reset()         { *m = CreatePtzPresetRequest{} }
func (m *CreatePtzPresetRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePtzPresetRequest) ProtoMessage()    {}
func (*CreatePtzPresetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{10}
}

func (m *CreatePtzPresetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePtzPresetRequest.Unmarshal(m, b)
}
func (m *CreatePtzPresetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePtzPresetRequest.Marshal(b, m, deterministic)
}
func (m *CreatePtzPresetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePtzPresetRequest.Merge(m, src)
}
func (m *CreatePtzPresetRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePtzPresetRequest.Size(m)
}
func (m *CreatePtzPresetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePtzPresetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePtzPresetRequest proto.InternalMessageInfo

func (m *CreatePtzPresetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePtzPresetRequest) GetPreset() *PtzPreset {
	if m != nil {
		return m.Preset
	}
	return nil
}

type PullPtzStatesRequest struct {
	// The device we want to subscribe to
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullPtzStatesRequest) Reset()         { *m = PullPtzStatesRequest{} }
func (m *PullPtzStatesRequest) String() string { return proto.CompactTextString(m) }
func (*PullPtzStatesRequest) ProtoMessage()    {}
func (*PullPtzStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{11}
}

func (m *PullPtzStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullPtzStatesRequest.Unmarshal(m, b)
}
func (m *PullPtzStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullPtzStatesRequest.Marshal(b, m, deterministic)
}
func (m *PullPtzStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullPtzStatesRequest.Merge(m, src)
}
func (m *PullPtzStatesRequest) XXX_Size() int {
	return xxx_messageInfo_PullPtzStatesRequest.Size(m)
}
func (m *PullPtzStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullPtzStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullPtzStatesRequest proto.InternalMessageInfo

func (m *PullPtzStatesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PullPtzStatesResponse struct {
	Changes              []*PtzStateChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PullPtzStatesResponse) Reset()         { *m = PullPtzStatesResponse{} }
func (m *PullPtzStatesResponse) String() string { return proto.CompactTextString(m) }
func (*PullPtzStatesResponse) ProtoMessage()    {}
func (*PullPtzStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{12}
}

func (m *PullPtzStatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullPtzStatesResponse.Unmarshal(m, b)
}
func (m *PullPtzStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullPtzStatesResponse.Marshal(b, m, deterministic)
}
func (m *PullPtzStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullPtzStatesResponse.Merge(m, src)
}
func (m *PullPtzStatesResponse) XXX_Size() int {
	return xxx_messageInfo_PullPtzStatesResponse.Size(m)
}
func (m *PullPtzStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullPtzStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullPtzStatesResponse proto.InternalMessageInfo

func (m *PullPtzStatesResponse) GetChanges() []*PtzStateChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type PtzStateChange struct {
	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The updated state, should be merged with any known state
	State                *PtzState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PtzStateChange) Reset()         { *m = PtzStateChange{} }
func (m *PtzStateChange) String() string { return proto.CompactTextString(m) }
func (*PtzStateChange) ProtoMessage()    {}
func (*PtzStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_ddab581f2cfd94dd, []int{13}
}

func (m *PtzStateChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PtzStateChange.Unmarshal(m, b)
}
func (m *PtzStateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PtzStateChange.Marshal(b, m, deterministic)
}
func (m *PtzStateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PtzStateChange.Merge(m, src)
}
func (m *PtzStateChange) XXX_Size() int {
	return xxx_messageInfo_PtzStateChange.Size(m)
}
func (m *PtzStateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_PtzStateChange.DiscardUnknown(m)
}

var xxx_messageInfo_PtzStateChange proto.InternalMessageInfo

func (m *PtzStateChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PtzStateChange) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *PtzStateChange) GetState() *PtzState {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterType((*PtzAttributes)(nil), "smartcore.api.device.traits.PtzAttributes")
	proto.RegisterType((*PtzState)(nil), "smartcore.api.device.traits.PtzState")
	proto.RegisterType((*PtzVector)(nil), "smartcore.api.device.traits.PtzVector")
	proto.RegisterType((*PtzBounds)(nil), "smartcore.api.device.traits.PtzBounds")
	proto.RegisterType((*PtzMovement)(nil), "smartcore.api.device.traits.PtzMovement")
	proto.RegisterType((*PtzPosition)(nil), "smartcore.api.device.traits.PtzPosition")
	proto.RegisterType((*PtzPreset)(nil), "smartcore.api.device.traits.PtzPreset")
	proto.RegisterType((*GetPtzStateRequest)(nil), "smartcore.api.device.traits.GetPtzStateRequest")
	proto.RegisterType((*UpdatePtzStateRequest)(nil), "smartcore.api.device.traits.UpdatePtzStateRequest")
	proto.RegisterType((*StopPtzRequest)(nil), "smartcore.api.device.traits.StopPtzRequest")
	proto.RegisterType((*CreatePtzPresetRequest)(nil), "smartcore.api.device.traits.CreatePtzPresetRequest")
	proto.RegisterType((*PullPtzStatesRequest)(nil), "smartcore.api.device.traits.PullPtzStatesRequest")
	proto.RegisterType((*PullPtzStatesResponse)(nil), "smartcore.api.device.traits.PullPtzStatesResponse")
	proto.RegisterType((*PtzStateChange)(nil), "smartcore.api.device.traits.PtzStateChange")
}

func init() { proto.RegisterFile("device/traits/ptz.proto", fileDescriptor_ddab581f2cfd94dd) }

var fileDescriptor_ddab581f2cfd94dd = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x96, 0x37, 0xc9, 0x36, 0x39, 0x69, 0x97, 0x76, 0xd4, 0x6d, 0xa3, 0x54, 0xa8, 0xc1, 0x02,
	0xb4, 0xa2, 0xc2, 0x6e, 0xb3, 0x12, 0x42, 0xaa, 0x84, 0xd8, 0x9f, 0x82, 0xb8, 0xa8, 0xb0, 0x66,
	0x97, 0x5e, 0x54, 0x2b, 0xa2, 0x89, 0x33, 0x0d, 0xa3, 0x8d, 0x3d, 0x83, 0xe7, 0x78, 0xbb, 0xe4,
	0x86, 0x5b, 0x1e, 0xa2, 0xe2, 0x8e, 0x1b, 0x5e, 0x80, 0x77, 0xe0, 0x0e, 0x89, 0x37, 0xe0, 0x45,
	0x90, 0x67, 0x6c, 0x6f, 0xbc, 0x4d, 0xbd, 0xde, 0xde, 0x4d, 0xce, 0xf9, 0xbe, 0xf3, 0x37, 0xdf,
	0x19, 0x07, 0xee, 0xcf, 0xf8, 0x99, 0x08, 0xb9, 0x8f, 0x09, 0x13, 0xa8, 0x7d, 0x85, 0x4b, 0x4f,
	0x25, 0x12, 0x25, 0x79, 0xa0, 0x23, 0x96, 0x60, 0x28, 0x13, 0xee, 0x31, 0x25, 0x3c, 0x0b, 0xf3,
	0x2c, 0x6c, 0x38, 0x9a, 0x4b, 0x39, 0x5f, 0x70, 0xdf, 0x40, 0xa7, 0xe9, 0x2b, 0xff, 0x95, 0xe0,
	0x8b, 0xd9, 0x24, 0x62, 0xfa, 0xd4, 0xd2, 0x87, 0x0f, 0x2f, 0x23, 0x50, 0x44, 0x5c, 0x23, 0x8b,
	0x54, 0x0e, 0x20, 0xf8, 0x8b, 0xe2, 0xda, 0x8f, 0xd3, 0x68, 0xca, 0x93, 0xdc, 0x76, 0xc7, 0xda,
	0xf0, 0x35, 0xe7, 0xb1, 0x35, 0xb9, 0xff, 0x39, 0x70, 0x2b, 0xc0, 0xe5, 0x1e, 0x62, 0x22, 0xa6,
	0x29, 0x72, 0x4d, 0x1e, 0xc1, 0x1d, 0x9d, 0x2a, 0x25, 0x13, 0xd4, 0x13, 0x25, 0xb5, 0x40, 0x21,
	0xe3, 0x81, 0x33, 0x72, 0x76, 0xba, 0xf4, 0x76, 0xe1, 0x08, 0x72, 0x7b, 0x05, 0x1c, 0xc9, 0x33,
	0x1e, 0xf1, 0x18, 0x07, 0x1b, 0x55, 0xf0, 0xf3, 0xdc, 0x4e, 0xbe, 0x86, 0x1b, 0x2a, 0xe1, 0x9a,
	0xa3, 0x1e, 0xb4, 0x46, 0xad, 0x9d, 0xfe, 0xf8, 0x53, 0xaf, 0x66, 0x08, 0x5e, 0x80, 0xcb, 0xc0,
	0xc0, 0x69, 0x41, 0x23, 0x5f, 0xc0, 0xfd, 0x32, 0x5d, 0x98, 0x6a, 0x94, 0xd1, 0xa4, 0x88, 0xd8,
	0x36, 0x49, 0xb7, 0x0b, 0xf7, 0x81, 0xf1, 0x5a, 0xbe, 0x76, 0xff, 0x71, 0xa0, 0x1b, 0xe0, 0xf2,
	0x08, 0x19, 0x72, 0x72, 0x08, 0xdd, 0x4a, 0x5f, 0xfd, 0xf1, 0xce, 0x95, 0x75, 0xe4, 0x78, 0x5a,
	0x32, 0xb3, 0x28, 0x95, 0x86, 0x1b, 0x44, 0x29, 0x06, 0x41, 0x4b, 0x26, 0xb9, 0x07, 0x9b, 0xb6,
	0x81, 0x41, 0x6b, 0xe4, 0xec, 0xf4, 0x68, 0xfe, 0x8b, 0x7c, 0x04, 0x37, 0xed, 0x69, 0xa2, 0x15,
	0xe7, 0x33, 0xd3, 0x5d, 0x87, 0xf6, 0xad, 0xed, 0x28, 0x33, 0xb9, 0xcf, 0xa0, 0x17, 0xe0, 0xf2,
	0x05, 0x0f, 0x51, 0x26, 0xe4, 0x36, 0xb4, 0x14, 0xb3, 0xed, 0x6c, 0xd0, 0xec, 0x48, 0x08, 0xb4,
	0x51, 0x2c, 0x6c, 0x6d, 0x1b, 0xd4, 0x9c, 0x33, 0xdb, 0x52, 0xca, 0xc8, 0xe4, 0xda, 0xa0, 0xe6,
	0xec, 0xfe, 0x6a, 0xc2, 0xec, 0xcb, 0x34, 0x9e, 0x69, 0xf2, 0x25, 0xb4, 0x22, 0x51, 0x4c, 0xe5,
	0xca, 0xdb, 0xb1, 0xb9, 0x69, 0x46, 0x31, 0x4c, 0x76, 0x9e, 0x4f, 0xa2, 0x39, 0x93, 0x9d, 0xbb,
	0xbf, 0x39, 0xd0, 0x5f, 0x19, 0x0e, 0x39, 0x84, 0xde, 0x4c, 0x24, 0x3c, 0x5c, 0xb9, 0x9f, 0xa6,
	0xf1, 0x2e, 0x88, 0x64, 0x17, 0x3a, 0x76, 0x72, 0xb6, 0xa2, 0x0f, 0x2f, 0x45, 0x30, 0x8b, 0xe0,
	0x7d, 0x17, 0xe3, 0xee, 0xf8, 0x05, 0x4b, 0xa8, 0xc5, 0xba, 0xff, 0xda, 0x52, 0x4a, 0x75, 0xef,
	0xbf, 0xa5, 0x94, 0xa6, 0x95, 0x5c, 0xe8, 0xe4, 0x31, 0x74, 0xcc, 0xbe, 0xe5, 0x85, 0x0c, 0xd7,
	0x16, 0x72, 0x9c, 0x21, 0xa8, 0x05, 0x92, 0xef, 0xe1, 0x03, 0x64, 0xc9, 0x9c, 0xe3, 0xc5, 0xfa,
	0xb5, 0xae, 0x95, 0x7c, 0xcb, 0xd2, 0x8b, 0x36, 0xdc, 0xbf, 0x1c, 0x73, 0xc7, 0x76, 0x19, 0x32,
	0x11, 0xc4, 0x2c, 0xe2, 0xa6, 0xa1, 0x1e, 0x35, 0x67, 0x72, 0x17, 0x3a, 0x28, 0x70, 0xc1, 0x4d,
	0x91, 0x3d, 0x6a, 0x7f, 0x90, 0x11, 0xf4, 0x67, 0x5c, 0x87, 0x89, 0x50, 0x65, 0x11, 0x3d, 0xba,
	0x6a, 0xaa, 0x0c, 0xa8, 0xfd, 0x9e, 0x03, 0x1a, 0x42, 0xf7, 0x75, 0x22, 0x90, 0x4d, 0x17, 0x7c,
	0xd0, 0x31, 0x4b, 0x5c, 0xfe, 0x76, 0x4f, 0x80, 0x7c, 0xcb, 0xb1, 0xd8, 0x5c, 0xca, 0x7f, 0x4e,
	0xb9, 0x5e, 0xdf, 0xc1, 0x18, 0x36, 0xcd, 0x1b, 0xa9, 0xcb, 0x39, 0xdb, 0x07, 0xd2, 0x2b, 0x1e,
	0x48, 0xef, 0x9b, 0xcc, 0xfd, 0x9c, 0xe9, 0x53, 0x9a, 0x23, 0xdd, 0x3f, 0x1c, 0xd8, 0xfe, 0x41,
	0xcd, 0x18, 0xf2, 0x26, 0x19, 0x9e, 0x42, 0x47, 0x67, 0x98, 0x3c, 0xc1, 0x27, 0x57, 0x35, 0x6a,
	0x03, 0x5a, 0x0e, 0x79, 0x0a, 0xfd, 0xd4, 0x64, 0x32, 0x6f, 0x78, 0x7e, 0x9f, 0x75, 0x35, 0x82,
	0x85, 0x67, 0x67, 0xf7, 0x63, 0xd8, 0x3a, 0x42, 0xa9, 0x02, 0x5c, 0xd6, 0xd4, 0xe7, 0x2e, 0xe0,
	0xde, 0x41, 0xc2, 0x6d, 0x33, 0xf9, 0xbb, 0x59, 0xd3, 0xcd, 0x57, 0xe5, 0xc3, 0xd3, 0x70, 0x65,
	0xf3, 0x90, 0x39, 0xcb, 0xfd, 0x0c, 0xee, 0x06, 0xe9, 0x62, 0x51, 0xf4, 0xa9, 0xeb, 0x2a, 0xfb,
	0x11, 0xb6, 0x2f, 0x61, 0xb5, 0x92, 0xb1, 0xe6, 0xe4, 0x19, 0xdc, 0x08, 0x7f, 0x62, 0xf1, 0x9c,
	0xeb, 0x81, 0x63, 0x3e, 0x08, 0x8f, 0x1a, 0x0d, 0xf5, 0xc0, 0x70, 0x68, 0xc1, 0x75, 0x7f, 0x77,
	0x60, 0xab, 0xea, 0x7b, 0xc7, 0x05, 0xf6, 0x43, 0x33, 0xa0, 0x49, 0xf6, 0xad, 0x7c, 0xa7, 0x4e,
	0x8e, 0x8b, 0x0f, 0x29, 0x05, 0x0b, 0xcf, 0x0c, 0x17, 0xb7, 0xdf, 0xba, 0xfe, 0xed, 0x8f, 0xdf,
	0xb4, 0xa1, 0x15, 0xe0, 0x92, 0x70, 0xe8, 0xaf, 0xc8, 0x99, 0xf8, 0xb5, 0x41, 0xde, 0x16, 0xfe,
	0xb0, 0x59, 0x56, 0x72, 0x0a, 0x5b, 0x55, 0x59, 0x93, 0x71, 0x2d, 0x71, 0xed, 0x0e, 0x34, 0x4d,
	0xf6, 0x12, 0xda, 0x99, 0x38, 0x49, 0xfd, 0xd5, 0x55, 0xf5, 0xdb, 0xbc, 0x91, 0x9b, 0xb9, 0xa4,
	0xed, 0xd3, 0xb5, 0x5b, 0x4b, 0x5b, 0xaf, 0xfe, 0x61, 0x43, 0x65, 0x93, 0x73, 0xb8, 0x55, 0x51,
	0x29, 0x79, 0x52, 0x4f, 0x5c, 0xa3, 0xfe, 0xe1, 0xf8, 0x3a, 0x14, 0xbb, 0x04, 0x8f, 0x9d, 0xfd,
	0x37, 0x0e, 0x3c, 0x9c, 0xf1, 0xb3, 0x3a, 0xee, 0x7e, 0xd7, 0x14, 0x2a, 0x51, 0x06, 0xce, 0xcb,
	0x27, 0x73, 0x81, 0xde, 0x19, 0x8b, 0x51, 0x78, 0xa1, 0xf4, 0xd2, 0x53, 0xbf, 0x24, 0xfa, 0x3a,
	0xfc, 0x9c, 0x29, 0xe1, 0xcf, 0xa5, 0x5f, 0xf9, 0xdf, 0xf9, 0xe7, 0xc6, 0x83, 0xa3, 0x32, 0xf8,
	0x9e, 0x12, 0xde, 0xa1, 0x0d, 0x7e, 0x6c, 0xbc, 0x7f, 0xaf, 0x78, 0x4f, 0xf6, 0x94, 0x38, 0xb1,
	0xde, 0x13, 0xeb, 0x9d, 0x6e, 0x9a, 0xd5, 0xd8, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x1d,
	0x79, 0xa9, 0xcb, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PtzClient is the client API for Ptz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PtzClient interface {
	// Set the target state for the device
	GetPtzState(ctx context.Context, in *GetPtzStateRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Set the target state for the device
	UpdatePtzState(ctx context.Context, in *UpdatePtzStateRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(ctx context.Context, in *StopPtzRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Create a preset for the ptz position. If no preset ptz position is specified then use the current position
	CreatePreset(ctx context.Context, in *CreatePtzPresetRequest, opts ...grpc.CallOption) (*PtzPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullPtzStates(ctx context.Context, in *PullPtzStatesRequest, opts ...grpc.CallOption) (Ptz_PullPtzStatesClient, error)
}

type ptzClient struct {
	cc *grpc.ClientConn
}

func NewPtzClient(cc *grpc.ClientConn) PtzClient {
	return &ptzClient{cc}
}

func (c *ptzClient) GetPtzState(ctx context.Context, in *GetPtzStateRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/GetPtzState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) UpdatePtzState(ctx context.Context, in *UpdatePtzStateRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/UpdatePtzState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) Stop(ctx context.Context, in *StopPtzRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) CreatePreset(ctx context.Context, in *CreatePtzPresetRequest, opts ...grpc.CallOption) (*PtzPreset, error) {
	out := new(PtzPreset)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/CreatePreset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) PullPtzStates(ctx context.Context, in *PullPtzStatesRequest, opts ...grpc.CallOption) (Ptz_PullPtzStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ptz_serviceDesc.Streams[0], "/smartcore.api.device.traits.Ptz/PullPtzStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &ptzPullPtzStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ptz_PullPtzStatesClient interface {
	Recv() (*PullPtzStatesResponse, error)
	grpc.ClientStream
}

type ptzPullPtzStatesClient struct {
	grpc.ClientStream
}

func (x *ptzPullPtzStatesClient) Recv() (*PullPtzStatesResponse, error) {
	m := new(PullPtzStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PtzServer is the server API for Ptz service.
type PtzServer interface {
	// Set the target state for the device
	GetPtzState(context.Context, *GetPtzStateRequest) (*PtzState, error)
	// Set the target state for the device
	UpdatePtzState(context.Context, *UpdatePtzStateRequest) (*PtzState, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(context.Context, *StopPtzRequest) (*PtzState, error)
	// Create a preset for the ptz position. If no preset ptz position is specified then use the current position
	CreatePreset(context.Context, *CreatePtzPresetRequest) (*PtzPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullPtzStates(*PullPtzStatesRequest, Ptz_PullPtzStatesServer) error
}

// UnimplementedPtzServer can be embedded to have forward compatible implementations.
type UnimplementedPtzServer struct {
}

func (*UnimplementedPtzServer) GetPtzState(ctx context.Context, req *GetPtzStateRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPtzState not implemented")
}
func (*UnimplementedPtzServer) UpdatePtzState(ctx context.Context, req *UpdatePtzStateRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePtzState not implemented")
}
func (*UnimplementedPtzServer) Stop(ctx context.Context, req *StopPtzRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedPtzServer) CreatePreset(ctx context.Context, req *CreatePtzPresetRequest) (*PtzPreset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreset not implemented")
}
func (*UnimplementedPtzServer) PullPtzStates(req *PullPtzStatesRequest, srv Ptz_PullPtzStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullPtzStates not implemented")
}

func RegisterPtzServer(s *grpc.Server, srv PtzServer) {
	s.RegisterService(&_Ptz_serviceDesc, srv)
}

func _Ptz_GetPtzState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPtzStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).GetPtzState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/GetPtzState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).GetPtzState(ctx, req.(*GetPtzStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_UpdatePtzState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePtzStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).UpdatePtzState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/UpdatePtzState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).UpdatePtzState(ctx, req.(*UpdatePtzStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPtzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).Stop(ctx, req.(*StopPtzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_CreatePreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePtzPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).CreatePreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/CreatePreset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).CreatePreset(ctx, req.(*CreatePtzPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_PullPtzStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPtzStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PtzServer).PullPtzStates(m, &ptzPullPtzStatesServer{stream})
}

type Ptz_PullPtzStatesServer interface {
	Send(*PullPtzStatesResponse) error
	grpc.ServerStream
}

type ptzPullPtzStatesServer struct {
	grpc.ServerStream
}

func (x *ptzPullPtzStatesServer) Send(m *PullPtzStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Ptz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.Ptz",
	HandlerType: (*PtzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPtzState",
			Handler:    _Ptz_GetPtzState_Handler,
		},
		{
			MethodName: "UpdatePtzState",
			Handler:    _Ptz_UpdatePtzState_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Ptz_Stop_Handler,
		},
		{
			MethodName: "CreatePreset",
			Handler:    _Ptz_CreatePreset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPtzStates",
			Handler:       _Ptz_PullPtzStates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/ptz.proto",
}
