// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: device/traits/channel.proto

package traits

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Trait.attributes relating to the channel api
type ChannelApiAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The max number of channels away from the current that are supported when adjusting channels. Defaults to 1.
	AdjustMax int32 `protobuf:"varint,1,opt,name=adjust_max,json=adjustMax,proto3" json:"adjust_max,omitempty"` // todo: support for [choose,adjust,return], not sure what the defaults should be
}

func (x *ChannelApiAttributes) Reset() {
	*x = ChannelApiAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelApiAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelApiAttributes) ProtoMessage() {}

func (x *ChannelApiAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelApiAttributes.ProtoReflect.Descriptor instead.
func (*ChannelApiAttributes) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelApiAttributes) GetAdjustMax() int32 {
	if x != nil {
		return x.AdjustMax
	}
	return 0
}

// Channel describes a single channel that can be chosen on the device.
//
// During read all known properties will be populated, id and title will always be present. On write either id or
// number must be present.
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id uniquely identifies the channel and can be used to select it explicitly.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A numeric identifier for the channel, such as 17 or 712.11-14. Not always parsable as a number.
	ChannelNumber string `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	// A human readable name for the channel.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{1}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetChannelNumber() string {
	if x != nil {
		return x.ChannelNumber
	}
	return ""
}

func (x *Channel) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type GetChosenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetChosenChannelRequest) Reset() {
	*x = GetChosenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChosenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChosenChannelRequest) ProtoMessage() {}

func (x *GetChosenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChosenChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChosenChannelRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{2}
}

func (x *GetChosenChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ChooseChannelRequest describes which channel to select.
type ChooseChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The channel to select. Must contain either id or number.
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChooseChannelRequest) Reset() {
	*x = ChooseChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChooseChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChooseChannelRequest) ProtoMessage() {}

func (x *ChooseChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChooseChannelRequest.ProtoReflect.Descriptor instead.
func (*ChooseChannelRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{3}
}

func (x *ChooseChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChooseChannelRequest) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

// AdjustChannelRequest describes how to change the channel relative to the current channel.
type AdjustChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// How many channels to skip, use negative numbers to select previous channels. See ChannelApiAttributes.adjust_max.
	Amount int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *AdjustChannelRequest) Reset() {
	*x = AdjustChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustChannelRequest) ProtoMessage() {}

func (x *AdjustChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustChannelRequest.ProtoReflect.Descriptor instead.
func (*AdjustChannelRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{4}
}

func (x *AdjustChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdjustChannelRequest) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// Select the last channel to be selected before the current one.
type ReturnChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReturnChannelRequest) Reset() {
	*x = ReturnChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnChannelRequest) ProtoMessage() {}

func (x *ReturnChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnChannelRequest.ProtoReflect.Descriptor instead.
func (*ReturnChannelRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ReturnChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullChosenChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PullChosenChannelRequest) Reset() {
	*x = PullChosenChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullChosenChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullChosenChannelRequest) ProtoMessage() {}

func (x *PullChosenChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullChosenChannelRequest.ProtoReflect.Descriptor instead.
func (*PullChosenChannelRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{6}
}

func (x *PullChosenChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PullChosenChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change []*ChosenChannelChange `protobuf:"bytes,1,rep,name=change,proto3" json:"change,omitempty"`
}

func (x *PullChosenChannelResponse) Reset() {
	*x = PullChosenChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullChosenChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullChosenChannelResponse) ProtoMessage() {}

func (x *PullChosenChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullChosenChannelResponse.ProtoReflect.Descriptor instead.
func (*PullChosenChannelResponse) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{7}
}

func (x *PullChosenChannelResponse) GetChange() []*ChosenChannelChange {
	if x != nil {
		return x.Change
	}
	return nil
}

type ChosenChannelChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The new chosen channel
	Channel *Channel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *ChosenChannelChange) Reset() {
	*x = ChosenChannelChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_channel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChosenChannelChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChosenChannelChange) ProtoMessage() {}

func (x *ChosenChannelChange) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_channel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChosenChannelChange.ProtoReflect.Descriptor instead.
func (*ChosenChannelChange) Descriptor() ([]byte, []int) {
	return file_device_traits_channel_proto_rawDescGZIP(), []int{8}
}

func (x *ChosenChannelChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChosenChannelChange) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ChosenChannelChange) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

var File_device_traits_channel_proto protoreflect.FileDescriptor

var file_device_traits_channel_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x69, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4d,
	0x61, 0x78, 0x22, 0x56, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x14, 0x43, 0x68, 0x6f,
	0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x14, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x6f,
	0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x13, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0xc1, 0x04, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x70, 0x69, 0x12, 0x6e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x0d, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x68,
	0x0a, 0x0d, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x68, 0x0a, 0x0d, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x35, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x6f, 0x73, 0x65,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0xa0, 0x01, 0x0a, 0x1f, 0x64, 0x65,
	0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x0c, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67,
	0x69, 0x74, 0x2e, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2e, 0x63, 0x6f, 0x2e, 0x75, 0x6b, 0x2f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x6f, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0xaa, 0x02, 0x1b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02,
	0x1b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_traits_channel_proto_rawDescOnce sync.Once
	file_device_traits_channel_proto_rawDescData = file_device_traits_channel_proto_rawDesc
)

func file_device_traits_channel_proto_rawDescGZIP() []byte {
	file_device_traits_channel_proto_rawDescOnce.Do(func() {
		file_device_traits_channel_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_traits_channel_proto_rawDescData)
	})
	return file_device_traits_channel_proto_rawDescData
}

var file_device_traits_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_device_traits_channel_proto_goTypes = []interface{}{
	(*ChannelApiAttributes)(nil),      // 0: smartcore.api.device.traits.ChannelApiAttributes
	(*Channel)(nil),                   // 1: smartcore.api.device.traits.Channel
	(*GetChosenChannelRequest)(nil),   // 2: smartcore.api.device.traits.GetChosenChannelRequest
	(*ChooseChannelRequest)(nil),      // 3: smartcore.api.device.traits.ChooseChannelRequest
	(*AdjustChannelRequest)(nil),      // 4: smartcore.api.device.traits.AdjustChannelRequest
	(*ReturnChannelRequest)(nil),      // 5: smartcore.api.device.traits.ReturnChannelRequest
	(*PullChosenChannelRequest)(nil),  // 6: smartcore.api.device.traits.PullChosenChannelRequest
	(*PullChosenChannelResponse)(nil), // 7: smartcore.api.device.traits.PullChosenChannelResponse
	(*ChosenChannelChange)(nil),       // 8: smartcore.api.device.traits.ChosenChannelChange
	(*timestamp.Timestamp)(nil),       // 9: google.protobuf.Timestamp
}
var file_device_traits_channel_proto_depIdxs = []int32{
	1, // 0: smartcore.api.device.traits.ChooseChannelRequest.channel:type_name -> smartcore.api.device.traits.Channel
	8, // 1: smartcore.api.device.traits.PullChosenChannelResponse.change:type_name -> smartcore.api.device.traits.ChosenChannelChange
	9, // 2: smartcore.api.device.traits.ChosenChannelChange.create_time:type_name -> google.protobuf.Timestamp
	1, // 3: smartcore.api.device.traits.ChosenChannelChange.channel:type_name -> smartcore.api.device.traits.Channel
	2, // 4: smartcore.api.device.traits.ChannelApi.GetChosenChannel:input_type -> smartcore.api.device.traits.GetChosenChannelRequest
	3, // 5: smartcore.api.device.traits.ChannelApi.ChooseChannel:input_type -> smartcore.api.device.traits.ChooseChannelRequest
	4, // 6: smartcore.api.device.traits.ChannelApi.AdjustChannel:input_type -> smartcore.api.device.traits.AdjustChannelRequest
	5, // 7: smartcore.api.device.traits.ChannelApi.ReturnChannel:input_type -> smartcore.api.device.traits.ReturnChannelRequest
	6, // 8: smartcore.api.device.traits.ChannelApi.PullChosenChannel:input_type -> smartcore.api.device.traits.PullChosenChannelRequest
	1, // 9: smartcore.api.device.traits.ChannelApi.GetChosenChannel:output_type -> smartcore.api.device.traits.Channel
	1, // 10: smartcore.api.device.traits.ChannelApi.ChooseChannel:output_type -> smartcore.api.device.traits.Channel
	1, // 11: smartcore.api.device.traits.ChannelApi.AdjustChannel:output_type -> smartcore.api.device.traits.Channel
	1, // 12: smartcore.api.device.traits.ChannelApi.ReturnChannel:output_type -> smartcore.api.device.traits.Channel
	7, // 13: smartcore.api.device.traits.ChannelApi.PullChosenChannel:output_type -> smartcore.api.device.traits.PullChosenChannelResponse
	9, // [9:14] is the sub-list for method output_type
	4, // [4:9] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_device_traits_channel_proto_init() }
func file_device_traits_channel_proto_init() {
	if File_device_traits_channel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_traits_channel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelApiAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChosenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChooseChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullChosenChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullChosenChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_channel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChosenChannelChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_traits_channel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_traits_channel_proto_goTypes,
		DependencyIndexes: file_device_traits_channel_proto_depIdxs,
		MessageInfos:      file_device_traits_channel_proto_msgTypes,
	}.Build()
	File_device_traits_channel_proto = out.File
	file_device_traits_channel_proto_rawDesc = nil
	file_device_traits_channel_proto_goTypes = nil
	file_device_traits_channel_proto_depIdxs = nil
}
