// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OnOffClient is the client API for OnOff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OnOffClient interface {
	// Turn on the device associated with this service or the name specified by the request.
	On(ctx context.Context, in *OnRequest, opts ...grpc.CallOption) (*OnReply, error)
	// Turn off the device associated with this service or the name specified by the request.
	Off(ctx context.Context, in *OffRequest, opts ...grpc.CallOption) (*OffReply, error)
	// get the current state of the device
	GetOnOffState(ctx context.Context, in *GetOnOffStateRequest, opts ...grpc.CallOption) (*GetOnOffStateResponse, error)
	// Get notified of changes to the OnOffState of a device
	Pull(ctx context.Context, in *OnOffPullRequest, opts ...grpc.CallOption) (OnOff_PullClient, error)
}

type onOffClient struct {
	cc grpc.ClientConnInterface
}

func NewOnOffClient(cc grpc.ClientConnInterface) OnOffClient {
	return &onOffClient{cc}
}

func (c *onOffClient) On(ctx context.Context, in *OnRequest, opts ...grpc.CallOption) (*OnReply, error) {
	out := new(OnReply)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.OnOff/On", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onOffClient) Off(ctx context.Context, in *OffRequest, opts ...grpc.CallOption) (*OffReply, error) {
	out := new(OffReply)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.OnOff/Off", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onOffClient) GetOnOffState(ctx context.Context, in *GetOnOffStateRequest, opts ...grpc.CallOption) (*GetOnOffStateResponse, error) {
	out := new(GetOnOffStateResponse)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.OnOff/GetOnOffState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onOffClient) Pull(ctx context.Context, in *OnOffPullRequest, opts ...grpc.CallOption) (OnOff_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OnOff_serviceDesc.Streams[0], "/smartcore.api.device.traits.OnOff/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &onOffPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OnOff_PullClient interface {
	Recv() (*OnOffPullResponse, error)
	grpc.ClientStream
}

type onOffPullClient struct {
	grpc.ClientStream
}

func (x *onOffPullClient) Recv() (*OnOffPullResponse, error) {
	m := new(OnOffPullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OnOffServer is the server API for OnOff service.
// All implementations must embed UnimplementedOnOffServer
// for forward compatibility
type OnOffServer interface {
	// Turn on the device associated with this service or the name specified by the request.
	On(context.Context, *OnRequest) (*OnReply, error)
	// Turn off the device associated with this service or the name specified by the request.
	Off(context.Context, *OffRequest) (*OffReply, error)
	// get the current state of the device
	GetOnOffState(context.Context, *GetOnOffStateRequest) (*GetOnOffStateResponse, error)
	// Get notified of changes to the OnOffState of a device
	Pull(*OnOffPullRequest, OnOff_PullServer) error
	mustEmbedUnimplementedOnOffServer()
}

// UnimplementedOnOffServer must be embedded to have forward compatible implementations.
type UnimplementedOnOffServer struct {
}

func (*UnimplementedOnOffServer) On(context.Context, *OnRequest) (*OnReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method On not implemented")
}
func (*UnimplementedOnOffServer) Off(context.Context, *OffRequest) (*OffReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Off not implemented")
}
func (*UnimplementedOnOffServer) GetOnOffState(context.Context, *GetOnOffStateRequest) (*GetOnOffStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnOffState not implemented")
}
func (*UnimplementedOnOffServer) Pull(*OnOffPullRequest, OnOff_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedOnOffServer) mustEmbedUnimplementedOnOffServer() {}

func RegisterOnOffServer(s *grpc.Server, srv OnOffServer) {
	s.RegisterService(&_OnOff_serviceDesc, srv)
}

func _OnOff_On_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnOffServer).On(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.OnOff/On",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnOffServer).On(ctx, req.(*OnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnOff_Off_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnOffServer).Off(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.OnOff/Off",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnOffServer).Off(ctx, req.(*OffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnOff_GetOnOffState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnOffStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnOffServer).GetOnOffState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.OnOff/GetOnOffState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnOffServer).GetOnOffState(ctx, req.(*GetOnOffStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnOff_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OnOffPullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OnOffServer).Pull(m, &onOffPullServer{stream})
}

type OnOff_PullServer interface {
	Send(*OnOffPullResponse) error
	grpc.ServerStream
}

type onOffPullServer struct {
	grpc.ServerStream
}

func (x *onOffPullServer) Send(m *OnOffPullResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OnOff_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.OnOff",
	HandlerType: (*OnOffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "On",
			Handler:    _OnOff_On_Handler,
		},
		{
			MethodName: "Off",
			Handler:    _OnOff_Off_Handler,
		},
		{
			MethodName: "GetOnOffState",
			Handler:    _OnOff_GetOnOffState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _OnOff_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/on_off.proto",
}
