// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/traits/temperature_sensor.proto

package traits

import (
	context "context"
	fmt "fmt"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Trait.attribute for temperature sensors
type TemperatureSensorAttributes struct {
	// How the device thinks, all communications will be in celsius but the device's native unit is this.
	NativeUnit           types.TemperatureUnit `protobuf:"varint,1,opt,name=native_unit,json=nativeUnit,proto3,enum=smartcore.api.types.TemperatureUnit" json:"native_unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TemperatureSensorAttributes) Reset()         { *m = TemperatureSensorAttributes{} }
func (m *TemperatureSensorAttributes) String() string { return proto.CompactTextString(m) }
func (*TemperatureSensorAttributes) ProtoMessage()    {}
func (*TemperatureSensorAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff84ab008db99c, []int{0}
}

func (m *TemperatureSensorAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureSensorAttributes.Unmarshal(m, b)
}
func (m *TemperatureSensorAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureSensorAttributes.Marshal(b, m, deterministic)
}
func (m *TemperatureSensorAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureSensorAttributes.Merge(m, src)
}
func (m *TemperatureSensorAttributes) XXX_Size() int {
	return xxx_messageInfo_TemperatureSensorAttributes.Size(m)
}
func (m *TemperatureSensorAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureSensorAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureSensorAttributes proto.InternalMessageInfo

func (m *TemperatureSensorAttributes) GetNativeUnit() types.TemperatureUnit {
	if m != nil {
		return m.NativeUnit
	}
	return types.TemperatureUnit_CELSIUS
}

type GetTemperatureRequest struct {
	// the name of the device to get the state for
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTemperatureRequest) Reset()         { *m = GetTemperatureRequest{} }
func (m *GetTemperatureRequest) String() string { return proto.CompactTextString(m) }
func (*GetTemperatureRequest) ProtoMessage()    {}
func (*GetTemperatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff84ab008db99c, []int{1}
}

func (m *GetTemperatureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTemperatureRequest.Unmarshal(m, b)
}
func (m *GetTemperatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTemperatureRequest.Marshal(b, m, deterministic)
}
func (m *GetTemperatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTemperatureRequest.Merge(m, src)
}
func (m *GetTemperatureRequest) XXX_Size() int {
	return xxx_messageInfo_GetTemperatureRequest.Size(m)
}
func (m *GetTemperatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTemperatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTemperatureRequest proto.InternalMessageInfo

func (m *GetTemperatureRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PullTemperatureRequest struct {
	// the name of the device to get the state for
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullTemperatureRequest) Reset()         { *m = PullTemperatureRequest{} }
func (m *PullTemperatureRequest) String() string { return proto.CompactTextString(m) }
func (*PullTemperatureRequest) ProtoMessage()    {}
func (*PullTemperatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff84ab008db99c, []int{2}
}

func (m *PullTemperatureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullTemperatureRequest.Unmarshal(m, b)
}
func (m *PullTemperatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullTemperatureRequest.Marshal(b, m, deterministic)
}
func (m *PullTemperatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullTemperatureRequest.Merge(m, src)
}
func (m *PullTemperatureRequest) XXX_Size() int {
	return xxx_messageInfo_PullTemperatureRequest.Size(m)
}
func (m *PullTemperatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullTemperatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullTemperatureRequest proto.InternalMessageInfo

func (m *PullTemperatureRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// response containing temperature changes
type PullTemperatureResponse struct {
	// the list of changes that have occurred since the last event
	Changes              []*TemperatureChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PullTemperatureResponse) Reset()         { *m = PullTemperatureResponse{} }
func (m *PullTemperatureResponse) String() string { return proto.CompactTextString(m) }
func (*PullTemperatureResponse) ProtoMessage()    {}
func (*PullTemperatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff84ab008db99c, []int{3}
}

func (m *PullTemperatureResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullTemperatureResponse.Unmarshal(m, b)
}
func (m *PullTemperatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullTemperatureResponse.Marshal(b, m, deterministic)
}
func (m *PullTemperatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullTemperatureResponse.Merge(m, src)
}
func (m *PullTemperatureResponse) XXX_Size() int {
	return xxx_messageInfo_PullTemperatureResponse.Size(m)
}
func (m *PullTemperatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullTemperatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullTemperatureResponse proto.InternalMessageInfo

func (m *PullTemperatureResponse) GetChanges() []*TemperatureChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

// A change to the temperature reading of the device
type TemperatureChange struct {
	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// the new state for the device
	Temperature          *types.Temperature `protobuf:"bytes,3,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TemperatureChange) Reset()         { *m = TemperatureChange{} }
func (m *TemperatureChange) String() string { return proto.CompactTextString(m) }
func (*TemperatureChange) ProtoMessage()    {}
func (*TemperatureChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_23ff84ab008db99c, []int{4}
}

func (m *TemperatureChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TemperatureChange.Unmarshal(m, b)
}
func (m *TemperatureChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TemperatureChange.Marshal(b, m, deterministic)
}
func (m *TemperatureChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TemperatureChange.Merge(m, src)
}
func (m *TemperatureChange) XXX_Size() int {
	return xxx_messageInfo_TemperatureChange.Size(m)
}
func (m *TemperatureChange) XXX_DiscardUnknown() {
	xxx_messageInfo_TemperatureChange.DiscardUnknown(m)
}

var xxx_messageInfo_TemperatureChange proto.InternalMessageInfo

func (m *TemperatureChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TemperatureChange) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *TemperatureChange) GetTemperature() *types.Temperature {
	if m != nil {
		return m.Temperature
	}
	return nil
}

func init() {
	proto.RegisterType((*TemperatureSensorAttributes)(nil), "smartcore.api.device.traits.TemperatureSensorAttributes")
	proto.RegisterType((*GetTemperatureRequest)(nil), "smartcore.api.device.traits.GetTemperatureRequest")
	proto.RegisterType((*PullTemperatureRequest)(nil), "smartcore.api.device.traits.PullTemperatureRequest")
	proto.RegisterType((*PullTemperatureResponse)(nil), "smartcore.api.device.traits.PullTemperatureResponse")
	proto.RegisterType((*TemperatureChange)(nil), "smartcore.api.device.traits.TemperatureChange")
}

func init() {
	proto.RegisterFile("device/traits/temperature_sensor.proto", fileDescriptor_23ff84ab008db99c)
}

var fileDescriptor_23ff84ab008db99c = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x51, 0x8b, 0x13, 0x31,
	0x10, 0x80, 0xcd, 0x9d, 0x28, 0x66, 0xe1, 0xd4, 0x80, 0x67, 0xd9, 0x3e, 0x5c, 0x59, 0x44, 0x0a,
	0x6a, 0xa2, 0x7b, 0xbe, 0xf9, 0xd4, 0xaa, 0xe8, 0x63, 0xd9, 0xab, 0x2f, 0x52, 0x28, 0xe9, 0x76,
	0x6e, 0x0d, 0x76, 0x37, 0x31, 0x99, 0x2d, 0xf8, 0xe6, 0xcf, 0x91, 0xfb, 0x29, 0xfe, 0x28, 0x91,
	0x4d, 0xe8, 0xb9, 0xb5, 0x65, 0xeb, 0xbd, 0x85, 0xcc, 0x7c, 0x33, 0xb3, 0xf3, 0x6d, 0xe8, 0xd3,
	0x25, 0xac, 0x55, 0x0e, 0x02, 0xad, 0x54, 0xe8, 0x04, 0x42, 0x69, 0xc0, 0x4a, 0xac, 0x2d, 0xcc,
	0x1d, 0x54, 0x4e, 0x5b, 0x6e, 0xac, 0x46, 0xcd, 0xfa, 0xae, 0x94, 0x16, 0x73, 0x6d, 0x81, 0x4b,
	0xa3, 0x78, 0xa0, 0x78, 0xa0, 0xe2, 0xb3, 0x42, 0xeb, 0x62, 0x05, 0xc2, 0xa7, 0x2e, 0xea, 0x4b,
	0x81, 0xaa, 0x04, 0x87, 0xb2, 0x34, 0x81, 0x8e, 0x1f, 0xe0, 0x77, 0x03, 0x4e, 0xd4, 0x95, 0xc2,
	0x70, 0x93, 0x2c, 0x69, 0x7f, 0xfa, 0xb7, 0xd7, 0x85, 0x6f, 0x35, 0x42, 0xb4, 0x6a, 0x51, 0x23,
	0x38, 0xf6, 0x9e, 0x46, 0x95, 0x44, 0xb5, 0x86, 0x79, 0xc3, 0xf4, 0xc8, 0x80, 0x0c, 0x4f, 0xd2,
	0x27, 0x7c, 0x7b, 0x08, 0x5f, 0x94, 0xb7, 0xca, 0x7c, 0xaa, 0x14, 0x66, 0x34, 0x80, 0xcd, 0x39,
	0x79, 0x46, 0x1f, 0x7d, 0x00, 0x6c, 0x65, 0x64, 0xf0, 0xad, 0x06, 0x87, 0x8c, 0xd1, 0xdb, 0x95,
	0x2c, 0xc1, 0x17, 0xbe, 0x97, 0xf9, 0x73, 0xf2, 0x9c, 0x9e, 0x4e, 0xea, 0xd5, 0xea, 0x3f, 0xb3,
	0x73, 0xfa, 0x78, 0x27, 0xdb, 0x19, 0x5d, 0x39, 0x60, 0x1f, 0xe9, 0xdd, 0xfc, 0x8b, 0xac, 0x0a,
	0x70, 0x3d, 0x32, 0x38, 0x1e, 0x46, 0x29, 0xe7, 0x1d, 0xdb, 0x6b, 0x7f, 0xc0, 0x5b, 0x8f, 0x65,
	0x1b, 0x3c, 0xf9, 0x49, 0xe8, 0xc3, 0x9d, 0xf0, 0xbe, 0x71, 0xd8, 0x1b, 0x1a, 0xe5, 0x16, 0x24,
	0xc2, 0xbc, 0xd9, 0x7d, 0xef, 0x68, 0x40, 0x86, 0x51, 0x1a, 0xf3, 0x20, 0x86, 0x6f, 0xc4, 0xf0,
	0xe9, 0x46, 0x4c, 0x46, 0x43, 0x7a, 0x73, 0xc1, 0xc6, 0x34, 0x6a, 0x89, 0xef, 0x1d, 0x7b, 0x78,
	0x70, 0x68, 0xdb, 0x59, 0x1b, 0x4a, 0x7f, 0x6f, 0x8f, 0x1a, 0x8c, 0xb2, 0x4b, 0x7a, 0xb2, 0x2d,
	0x80, 0xa5, 0x9d, 0xbb, 0xd8, 0x6b, 0x2b, 0x3e, 0x38, 0x0a, 0xfb, 0x41, 0xe8, 0xfd, 0x7f, 0x74,
	0xb0, 0xf3, 0xce, 0x4e, 0xfb, 0x55, 0xc7, 0xaf, 0x6f, 0x06, 0x05, 0xe3, 0xc9, 0xad, 0x97, 0x64,
	0x7c, 0x45, 0xe8, 0xd9, 0x12, 0xd6, 0x5d, 0xfc, 0xf8, 0x74, 0x67, 0x43, 0x93, 0xc6, 0xcc, 0x84,
	0x7c, 0x7e, 0x55, 0x28, 0xe4, 0x6b, 0x59, 0xa1, 0xe2, 0xb9, 0xe6, 0xf5, 0x57, 0x71, 0x5d, 0x46,
	0xb8, 0xfc, 0x85, 0x34, 0x4a, 0x14, 0x5a, 0x6c, 0xbd, 0xd5, 0xab, 0xa3, 0xfe, 0xc5, 0x75, 0xab,
	0x91, 0x51, 0xfc, 0x5d, 0x68, 0x35, 0xf5, 0xd1, 0x5f, 0xad, 0xe8, 0x6c, 0x64, 0xd4, 0x2c, 0x44,
	0x67, 0x21, 0xba, 0xb8, 0xe3, 0xff, 0x88, 0xf3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x48,
	0x3c, 0x57, 0xff, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemperatureSensorClient is the client API for TemperatureSensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemperatureSensorClient interface {
	// Get the current temperature state for the device.
	GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*types.Temperature, error)
	// subscribe to changes in the temperature state for the device.
	PullTemperature(ctx context.Context, in *PullTemperatureRequest, opts ...grpc.CallOption) (TemperatureSensor_PullTemperatureClient, error)
}

type temperatureSensorClient struct {
	cc *grpc.ClientConn
}

func NewTemperatureSensorClient(cc *grpc.ClientConn) TemperatureSensorClient {
	return &temperatureSensorClient{cc}
}

func (c *temperatureSensorClient) GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*types.Temperature, error) {
	out := new(types.Temperature)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.TemperatureSensor/GetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureSensorClient) PullTemperature(ctx context.Context, in *PullTemperatureRequest, opts ...grpc.CallOption) (TemperatureSensor_PullTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TemperatureSensor_serviceDesc.Streams[0], "/smartcore.api.device.traits.TemperatureSensor/PullTemperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &temperatureSensorPullTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemperatureSensor_PullTemperatureClient interface {
	Recv() (*PullTemperatureResponse, error)
	grpc.ClientStream
}

type temperatureSensorPullTemperatureClient struct {
	grpc.ClientStream
}

func (x *temperatureSensorPullTemperatureClient) Recv() (*PullTemperatureResponse, error) {
	m := new(PullTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemperatureSensorServer is the server API for TemperatureSensor service.
type TemperatureSensorServer interface {
	// Get the current temperature state for the device.
	GetTemperature(context.Context, *GetTemperatureRequest) (*types.Temperature, error)
	// subscribe to changes in the temperature state for the device.
	PullTemperature(*PullTemperatureRequest, TemperatureSensor_PullTemperatureServer) error
}

// UnimplementedTemperatureSensorServer can be embedded to have forward compatible implementations.
type UnimplementedTemperatureSensorServer struct {
}

func (*UnimplementedTemperatureSensorServer) GetTemperature(ctx context.Context, req *GetTemperatureRequest) (*types.Temperature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (*UnimplementedTemperatureSensorServer) PullTemperature(req *PullTemperatureRequest, srv TemperatureSensor_PullTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method PullTemperature not implemented")
}

func RegisterTemperatureSensorServer(s *grpc.Server, srv TemperatureSensorServer) {
	s.RegisterService(&_TemperatureSensor_serviceDesc, srv)
}

func _TemperatureSensor_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureSensorServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.TemperatureSensor/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureSensorServer).GetTemperature(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureSensor_PullTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemperatureSensorServer).PullTemperature(m, &temperatureSensorPullTemperatureServer{stream})
}

type TemperatureSensor_PullTemperatureServer interface {
	Send(*PullTemperatureResponse) error
	grpc.ServerStream
}

type temperatureSensorPullTemperatureServer struct {
	grpc.ServerStream
}

func (x *temperatureSensorPullTemperatureServer) Send(m *PullTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TemperatureSensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.TemperatureSensor",
	HandlerType: (*TemperatureSensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _TemperatureSensor_GetTemperature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullTemperature",
			Handler:       _TemperatureSensor_PullTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/temperature_sensor.proto",
}
