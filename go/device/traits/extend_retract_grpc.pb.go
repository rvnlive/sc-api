// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExtendRetractClient is the client API for ExtendRetract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtendRetractClient interface {
	// Set the target state for the device
	GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*Extension, error)
	// Set the target state for the device
	UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*Extension, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(ctx context.Context, in *ExtendRetractStopRequest, opts ...grpc.CallOption) (*Extension, error)
	// Create a preset for the extension. If no preset extension value is specified then use the current position
	CreateExtensionPreset(ctx context.Context, in *CreateExtensionPresetRequest, opts ...grpc.CallOption) (*ExtensionPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullExtensions(ctx context.Context, in *PullExtensionsRequest, opts ...grpc.CallOption) (ExtendRetract_PullExtensionsClient, error)
}

type extendRetractClient struct {
	cc grpc.ClientConnInterface
}

func NewExtendRetractClient(cc grpc.ClientConnInterface) ExtendRetractClient {
	return &extendRetractClient{cc}
}

func (c *extendRetractClient) GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.ExtendRetract/GetExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractClient) UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.ExtendRetract/UpdateExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractClient) Stop(ctx context.Context, in *ExtendRetractStopRequest, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.ExtendRetract/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractClient) CreateExtensionPreset(ctx context.Context, in *CreateExtensionPresetRequest, opts ...grpc.CallOption) (*ExtensionPreset, error) {
	out := new(ExtensionPreset)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.ExtendRetract/CreateExtensionPreset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractClient) PullExtensions(ctx context.Context, in *PullExtensionsRequest, opts ...grpc.CallOption) (ExtendRetract_PullExtensionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtendRetract_serviceDesc.Streams[0], "/smartcore.api.device.traits.ExtendRetract/PullExtensions", opts...)
	if err != nil {
		return nil, err
	}
	x := &extendRetractPullExtensionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExtendRetract_PullExtensionsClient interface {
	Recv() (*PullExtensionsResponse, error)
	grpc.ClientStream
}

type extendRetractPullExtensionsClient struct {
	grpc.ClientStream
}

func (x *extendRetractPullExtensionsClient) Recv() (*PullExtensionsResponse, error) {
	m := new(PullExtensionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExtendRetractServer is the server API for ExtendRetract service.
// All implementations must embed UnimplementedExtendRetractServer
// for forward compatibility
type ExtendRetractServer interface {
	// Set the target state for the device
	GetExtension(context.Context, *GetExtensionRequest) (*Extension, error)
	// Set the target state for the device
	UpdateExtension(context.Context, *UpdateExtensionRequest) (*Extension, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(context.Context, *ExtendRetractStopRequest) (*Extension, error)
	// Create a preset for the extension. If no preset extension value is specified then use the current position
	CreateExtensionPreset(context.Context, *CreateExtensionPresetRequest) (*ExtensionPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullExtensions(*PullExtensionsRequest, ExtendRetract_PullExtensionsServer) error
	mustEmbedUnimplementedExtendRetractServer()
}

// UnimplementedExtendRetractServer must be embedded to have forward compatible implementations.
type UnimplementedExtendRetractServer struct {
}

func (*UnimplementedExtendRetractServer) GetExtension(context.Context, *GetExtensionRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtension not implemented")
}
func (*UnimplementedExtendRetractServer) UpdateExtension(context.Context, *UpdateExtensionRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (*UnimplementedExtendRetractServer) Stop(context.Context, *ExtendRetractStopRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedExtendRetractServer) CreateExtensionPreset(context.Context, *CreateExtensionPresetRequest) (*ExtensionPreset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtensionPreset not implemented")
}
func (*UnimplementedExtendRetractServer) PullExtensions(*PullExtensionsRequest, ExtendRetract_PullExtensionsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullExtensions not implemented")
}
func (*UnimplementedExtendRetractServer) mustEmbedUnimplementedExtendRetractServer() {}

func RegisterExtendRetractServer(s *grpc.Server, srv ExtendRetractServer) {
	s.RegisterService(&_ExtendRetract_serviceDesc, srv)
}

func _ExtendRetract_GetExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractServer).GetExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.ExtendRetract/GetExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractServer).GetExtension(ctx, req.(*GetExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetract_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.ExtendRetract/UpdateExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractServer).UpdateExtension(ctx, req.(*UpdateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetract_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendRetractStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.ExtendRetract/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractServer).Stop(ctx, req.(*ExtendRetractStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetract_CreateExtensionPreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractServer).CreateExtensionPreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.ExtendRetract/CreateExtensionPreset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractServer).CreateExtensionPreset(ctx, req.(*CreateExtensionPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetract_PullExtensions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullExtensionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExtendRetractServer).PullExtensions(m, &extendRetractPullExtensionsServer{stream})
}

type ExtendRetract_PullExtensionsServer interface {
	Send(*PullExtensionsResponse) error
	grpc.ServerStream
}

type extendRetractPullExtensionsServer struct {
	grpc.ServerStream
}

func (x *extendRetractPullExtensionsServer) Send(m *PullExtensionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ExtendRetract_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.ExtendRetract",
	HandlerType: (*ExtendRetractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExtension",
			Handler:    _ExtendRetract_GetExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _ExtendRetract_UpdateExtension_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ExtendRetract_Stop_Handler,
		},
		{
			MethodName: "CreateExtensionPreset",
			Handler:    _ExtendRetract_CreateExtensionPreset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullExtensions",
			Handler:       _ExtendRetract_PullExtensions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/extend_retract.proto",
}
