// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/traits/open_close.proto

package traits

import (
	context "context"
	fmt "fmt"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Possible directions the device can open/close
type OpenCloseDirection int32

const (
	OpenCloseDirection_UNSPECIFIED OpenCloseDirection = 0
	OpenCloseDirection_UP          OpenCloseDirection = 1
	OpenCloseDirection_DOWN        OpenCloseDirection = 2
	OpenCloseDirection_LEFT        OpenCloseDirection = 3
	OpenCloseDirection_RIGHT       OpenCloseDirection = 4
	OpenCloseDirection_IN          OpenCloseDirection = 5
	OpenCloseDirection_OUT         OpenCloseDirection = 6
)

var OpenCloseDirection_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "UP",
	2: "DOWN",
	3: "LEFT",
	4: "RIGHT",
	5: "IN",
	6: "OUT",
}

var OpenCloseDirection_value = map[string]int32{
	"UNSPECIFIED": 0,
	"UP":          1,
	"DOWN":        2,
	"LEFT":        3,
	"RIGHT":       4,
	"IN":          5,
	"OUT":         6,
}

func (x OpenCloseDirection) String() string {
	return proto.EnumName(OpenCloseDirection_name, int32(x))
}

func (OpenCloseDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{0}
}

// Trait.attribute for OpenClose devices
type OpenCloseAttributes struct {
	// Define how the value for positions behave. The bounds for these attributes will be absent and always in the range
	// 0-100 to represent a percentage
	PositionAttributes *types.FloatAttributes `protobuf:"bytes,1,opt,name=position_attributes,json=positionAttributes,proto3" json:"position_attributes,omitempty"`
	// The supported directions for the device. If none then assume only a single direction is supported
	Directions           []OpenCloseDirection `protobuf:"varint,2,rep,packed,name=directions,proto3,enum=smartcore.api.device.traits.OpenCloseDirection" json:"directions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OpenCloseAttributes) Reset()         { *m = OpenCloseAttributes{} }
func (m *OpenCloseAttributes) String() string { return proto.CompactTextString(m) }
func (*OpenCloseAttributes) ProtoMessage()    {}
func (*OpenCloseAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{0}
}

func (m *OpenCloseAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenCloseAttributes.Unmarshal(m, b)
}
func (m *OpenCloseAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenCloseAttributes.Marshal(b, m, deterministic)
}
func (m *OpenCloseAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCloseAttributes.Merge(m, src)
}
func (m *OpenCloseAttributes) XXX_Size() int {
	return xxx_messageInfo_OpenCloseAttributes.Size(m)
}
func (m *OpenCloseAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCloseAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCloseAttributes proto.InternalMessageInfo

func (m *OpenCloseAttributes) GetPositionAttributes() *types.FloatAttributes {
	if m != nil {
		return m.PositionAttributes
	}
	return nil
}

func (m *OpenCloseAttributes) GetDirections() []OpenCloseDirection {
	if m != nil {
		return m.Directions
	}
	return nil
}

// All open/closable elements for the device
type OpenCloseStates struct {
	// The state of each of the devices open-able elements. Most devices will only have a single value here as they can
	// only be opened from a single direction.
	States               []*OpenClosePosition `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *OpenCloseStates) Reset()         { *m = OpenCloseStates{} }
func (m *OpenCloseStates) String() string { return proto.CompactTextString(m) }
func (*OpenCloseStates) ProtoMessage()    {}
func (*OpenCloseStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{1}
}

func (m *OpenCloseStates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenCloseStates.Unmarshal(m, b)
}
func (m *OpenCloseStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenCloseStates.Marshal(b, m, deterministic)
}
func (m *OpenCloseStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCloseStates.Merge(m, src)
}
func (m *OpenCloseStates) XXX_Size() int {
	return xxx_messageInfo_OpenCloseStates.Size(m)
}
func (m *OpenCloseStates) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCloseStates.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCloseStates proto.InternalMessageInfo

func (m *OpenCloseStates) GetStates() []*OpenClosePosition {
	if m != nil {
		return m.States
	}
	return nil
}

// Defines the position of one open close element for the device
type OpenClosePosition struct {
	// 0-100, the current value for the open close position of the device in this direction
	PositionPercent *types.FloatVar `protobuf:"bytes,1,opt,name=position_percent,json=positionPercent,proto3" json:"position_percent,omitempty"`
	// Optional direction for devices that support multiple open/close directions
	Direction            OpenCloseDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=smartcore.api.device.traits.OpenCloseDirection" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *OpenClosePosition) Reset()         { *m = OpenClosePosition{} }
func (m *OpenClosePosition) String() string { return proto.CompactTextString(m) }
func (*OpenClosePosition) ProtoMessage()    {}
func (*OpenClosePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{2}
}

func (m *OpenClosePosition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenClosePosition.Unmarshal(m, b)
}
func (m *OpenClosePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenClosePosition.Marshal(b, m, deterministic)
}
func (m *OpenClosePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenClosePosition.Merge(m, src)
}
func (m *OpenClosePosition) XXX_Size() int {
	return xxx_messageInfo_OpenClosePosition.Size(m)
}
func (m *OpenClosePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenClosePosition.DiscardUnknown(m)
}

var xxx_messageInfo_OpenClosePosition proto.InternalMessageInfo

func (m *OpenClosePosition) GetPositionPercent() *types.FloatVar {
	if m != nil {
		return m.PositionPercent
	}
	return nil
}

func (m *OpenClosePosition) GetDirection() OpenCloseDirection {
	if m != nil {
		return m.Direction
	}
	return OpenCloseDirection_UNSPECIFIED
}

type GetOpenCloseStatesRequest struct {
	// Name of the device to get the state for
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOpenCloseStatesRequest) Reset()         { *m = GetOpenCloseStatesRequest{} }
func (m *GetOpenCloseStatesRequest) String() string { return proto.CompactTextString(m) }
func (*GetOpenCloseStatesRequest) ProtoMessage()    {}
func (*GetOpenCloseStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{3}
}

func (m *GetOpenCloseStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOpenCloseStatesRequest.Unmarshal(m, b)
}
func (m *GetOpenCloseStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOpenCloseStatesRequest.Marshal(b, m, deterministic)
}
func (m *GetOpenCloseStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenCloseStatesRequest.Merge(m, src)
}
func (m *GetOpenCloseStatesRequest) XXX_Size() int {
	return xxx_messageInfo_GetOpenCloseStatesRequest.Size(m)
}
func (m *GetOpenCloseStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenCloseStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenCloseStatesRequest proto.InternalMessageInfo

func (m *GetOpenCloseStatesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpdateOpenCloseStatesRequest struct {
	// the name of the device to update the states for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// target states for each directional element of the device. If you don't want to change an open direction don't
	// include it in the states list.
	States *OpenCloseStates `protobuf:"bytes,2,opt,name=states,proto3" json:"states,omitempty"`
	// indicate whether the state change is a delta or absolute value
	Delta                bool     `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateOpenCloseStatesRequest) Reset()         { *m = UpdateOpenCloseStatesRequest{} }
func (m *UpdateOpenCloseStatesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateOpenCloseStatesRequest) ProtoMessage()    {}
func (*UpdateOpenCloseStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{4}
}

func (m *UpdateOpenCloseStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateOpenCloseStatesRequest.Unmarshal(m, b)
}
func (m *UpdateOpenCloseStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateOpenCloseStatesRequest.Marshal(b, m, deterministic)
}
func (m *UpdateOpenCloseStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOpenCloseStatesRequest.Merge(m, src)
}
func (m *UpdateOpenCloseStatesRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateOpenCloseStatesRequest.Size(m)
}
func (m *UpdateOpenCloseStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOpenCloseStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOpenCloseStatesRequest proto.InternalMessageInfo

func (m *UpdateOpenCloseStatesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateOpenCloseStatesRequest) GetStates() *OpenCloseStates {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *UpdateOpenCloseStatesRequest) GetDelta() bool {
	if m != nil {
		return m.Delta
	}
	return false
}

// Request to begin a subscription for open close state changes
type PullOpenCloseStatesRequest struct {
	// The name of the device we want events from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Indicate whether we want to be notified of values while tweening or not. The device may ignore this depending on
	// capabilities
	ExcludeTweening      bool     `protobuf:"varint,2,opt,name=exclude_tweening,json=excludeTweening,proto3" json:"exclude_tweening,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullOpenCloseStatesRequest) Reset()         { *m = PullOpenCloseStatesRequest{} }
func (m *PullOpenCloseStatesRequest) String() string { return proto.CompactTextString(m) }
func (*PullOpenCloseStatesRequest) ProtoMessage()    {}
func (*PullOpenCloseStatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{5}
}

func (m *PullOpenCloseStatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullOpenCloseStatesRequest.Unmarshal(m, b)
}
func (m *PullOpenCloseStatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullOpenCloseStatesRequest.Marshal(b, m, deterministic)
}
func (m *PullOpenCloseStatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullOpenCloseStatesRequest.Merge(m, src)
}
func (m *PullOpenCloseStatesRequest) XXX_Size() int {
	return xxx_messageInfo_PullOpenCloseStatesRequest.Size(m)
}
func (m *PullOpenCloseStatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullOpenCloseStatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullOpenCloseStatesRequest proto.InternalMessageInfo

func (m *PullOpenCloseStatesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PullOpenCloseStatesRequest) GetExcludeTweening() bool {
	if m != nil {
		return m.ExcludeTweening
	}
	return false
}

// A response as part of the stream of changes to the range value
type PullOpenCloseStatesResponse struct {
	// The list of changes
	Changes              []*OpenCloseStateChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PullOpenCloseStatesResponse) Reset()         { *m = PullOpenCloseStatesResponse{} }
func (m *PullOpenCloseStatesResponse) String() string { return proto.CompactTextString(m) }
func (*PullOpenCloseStatesResponse) ProtoMessage()    {}
func (*PullOpenCloseStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{6}
}

func (m *PullOpenCloseStatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullOpenCloseStatesResponse.Unmarshal(m, b)
}
func (m *PullOpenCloseStatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullOpenCloseStatesResponse.Marshal(b, m, deterministic)
}
func (m *PullOpenCloseStatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullOpenCloseStatesResponse.Merge(m, src)
}
func (m *PullOpenCloseStatesResponse) XXX_Size() int {
	return xxx_messageInfo_PullOpenCloseStatesResponse.Size(m)
}
func (m *PullOpenCloseStatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullOpenCloseStatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullOpenCloseStatesResponse proto.InternalMessageInfo

func (m *PullOpenCloseStatesResponse) GetChanges() []*OpenCloseStateChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

// A change to a single devices open close state value
type OpenCloseStateChange struct {
	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The new value for the state
	State                *OpenCloseStates `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *OpenCloseStateChange) Reset()         { *m = OpenCloseStateChange{} }
func (m *OpenCloseStateChange) String() string { return proto.CompactTextString(m) }
func (*OpenCloseStateChange) ProtoMessage()    {}
func (*OpenCloseStateChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_54ee8782239f7cbe, []int{7}
}

func (m *OpenCloseStateChange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenCloseStateChange.Unmarshal(m, b)
}
func (m *OpenCloseStateChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenCloseStateChange.Marshal(b, m, deterministic)
}
func (m *OpenCloseStateChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCloseStateChange.Merge(m, src)
}
func (m *OpenCloseStateChange) XXX_Size() int {
	return xxx_messageInfo_OpenCloseStateChange.Size(m)
}
func (m *OpenCloseStateChange) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCloseStateChange.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCloseStateChange proto.InternalMessageInfo

func (m *OpenCloseStateChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenCloseStateChange) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *OpenCloseStateChange) GetState() *OpenCloseStates {
	if m != nil {
		return m.State
	}
	return nil
}

func init() {
	proto.RegisterEnum("smartcore.api.device.traits.OpenCloseDirection", OpenCloseDirection_name, OpenCloseDirection_value)
	proto.RegisterType((*OpenCloseAttributes)(nil), "smartcore.api.device.traits.OpenCloseAttributes")
	proto.RegisterType((*OpenCloseStates)(nil), "smartcore.api.device.traits.OpenCloseStates")
	proto.RegisterType((*OpenClosePosition)(nil), "smartcore.api.device.traits.OpenClosePosition")
	proto.RegisterType((*GetOpenCloseStatesRequest)(nil), "smartcore.api.device.traits.GetOpenCloseStatesRequest")
	proto.RegisterType((*UpdateOpenCloseStatesRequest)(nil), "smartcore.api.device.traits.UpdateOpenCloseStatesRequest")
	proto.RegisterType((*PullOpenCloseStatesRequest)(nil), "smartcore.api.device.traits.PullOpenCloseStatesRequest")
	proto.RegisterType((*PullOpenCloseStatesResponse)(nil), "smartcore.api.device.traits.PullOpenCloseStatesResponse")
	proto.RegisterType((*OpenCloseStateChange)(nil), "smartcore.api.device.traits.OpenCloseStateChange")
}

func init() { proto.RegisterFile("device/traits/open_close.proto", fileDescriptor_54ee8782239f7cbe) }

var fileDescriptor_54ee8782239f7cbe = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x52, 0xd3, 0x50,
	0x10, 0x36, 0xe9, 0x0f, 0x74, 0xeb, 0xd0, 0x78, 0xe0, 0xa2, 0x16, 0x95, 0x4e, 0xc6, 0x8b, 0xea,
	0xe8, 0x89, 0xd4, 0x19, 0x7f, 0xc6, 0x2b, 0xa0, 0x14, 0x3a, 0x2a, 0xed, 0x84, 0x56, 0x47, 0xc5,
	0xe9, 0x9c, 0xa6, 0x6b, 0x3d, 0x9a, 0x26, 0x21, 0x39, 0x01, 0x1d, 0xdf, 0xc1, 0x87, 0xf0, 0x52,
	0x7d, 0x05, 0x5f, 0xc0, 0xe7, 0xf1, 0x01, 0x9c, 0xe4, 0xa4, 0x01, 0x04, 0x3a, 0xd4, 0xbb, 0x93,
	0xdd, 0xfd, 0xbe, 0xdd, 0xfd, 0xf8, 0x96, 0xc2, 0x8d, 0x21, 0x1e, 0x70, 0x0b, 0x0d, 0xe1, 0x33,
	0x2e, 0x02, 0xc3, 0xf5, 0xd0, 0xe9, 0x5b, 0xb6, 0x1b, 0x20, 0xf5, 0x7c, 0x57, 0xb8, 0x64, 0x39,
	0x18, 0x33, 0x5f, 0x58, 0xae, 0x8f, 0x94, 0x79, 0x9c, 0xca, 0x6a, 0x2a, 0xab, 0x2b, 0x2b, 0x23,
	0xd7, 0x1d, 0xd9, 0x68, 0xc4, 0xa5, 0x83, 0xf0, 0x9d, 0x21, 0xf8, 0x18, 0x03, 0xc1, 0xc6, 0x9e,
	0x44, 0x57, 0x88, 0xf8, 0xec, 0x61, 0x60, 0x38, 0xe1, 0x78, 0x80, 0xbe, 0x8c, 0xe9, 0xbf, 0x14,
	0x58, 0x6c, 0x7b, 0xe8, 0x6c, 0x44, 0x5d, 0xd6, 0x84, 0xf0, 0xf9, 0x20, 0x14, 0x18, 0x90, 0x1e,
	0x2c, 0x7a, 0x6e, 0xc0, 0x05, 0x77, 0x9d, 0x3e, 0x4b, 0xc3, 0x65, 0xa5, 0xaa, 0xd4, 0x8a, 0xf5,
	0x9b, 0xf4, 0xe4, 0x1c, 0x31, 0x2f, 0x6d, 0xda, 0x2e, 0x13, 0x47, 0x14, 0x26, 0x99, 0x10, 0x1c,
	0xa3, 0x6d, 0x03, 0x0c, 0xb9, 0x8f, 0x56, 0x14, 0x0e, 0xca, 0x6a, 0x35, 0x53, 0x5b, 0xa8, 0x1b,
	0x74, 0xca, 0x56, 0x34, 0x1d, 0xae, 0x31, 0xc1, 0x99, 0xc7, 0x28, 0xf4, 0x57, 0x50, 0x4a, 0x2b,
	0x76, 0x05, 0x8b, 0x7a, 0x34, 0x21, 0x1f, 0xc4, 0xaf, 0xb2, 0x52, 0xcd, 0xd4, 0x8a, 0x75, 0x7a,
	0x31, 0xfe, 0x4e, 0x32, 0xad, 0x99, 0xa0, 0xf5, 0x9f, 0x0a, 0x5c, 0x39, 0x95, 0x25, 0xdb, 0xa0,
	0xa5, 0xc2, 0x78, 0xe8, 0x5b, 0xe8, 0x88, 0x44, 0x95, 0xeb, 0xe7, 0xab, 0xf2, 0x82, 0xf9, 0x66,
	0x69, 0x02, 0xeb, 0x48, 0x14, 0x79, 0x0e, 0x85, 0x74, 0x91, 0xb2, 0x5a, 0x55, 0xfe, 0x47, 0x8a,
	0x23, 0x06, 0xdd, 0x80, 0xab, 0x5b, 0x28, 0xfe, 0x11, 0xc3, 0xc4, 0xfd, 0x10, 0x03, 0x41, 0x08,
	0x64, 0x1d, 0x36, 0xc6, 0x78, 0xd2, 0x82, 0x19, 0xbf, 0xf5, 0xaf, 0x0a, 0x5c, 0xeb, 0x79, 0x43,
	0x26, 0xf0, 0xe2, 0x20, 0xd2, 0x48, 0xc5, 0x55, 0xe3, 0xa5, 0xef, 0x5c, 0x6c, 0xe2, 0x84, 0x38,
	0xc1, 0x92, 0x25, 0xc8, 0x0d, 0xd1, 0x16, 0xac, 0x9c, 0xa9, 0x2a, 0xb5, 0x79, 0x53, 0x7e, 0xe8,
	0x6f, 0xa0, 0xd2, 0x09, 0x6d, 0x7b, 0x86, 0x69, 0x6e, 0x81, 0x86, 0x9f, 0x2c, 0x3b, 0x1c, 0x62,
	0x5f, 0x1c, 0x22, 0x3a, 0xdc, 0x19, 0xc5, 0x73, 0xcd, 0x9b, 0xa5, 0x24, 0xde, 0x4d, 0xc2, 0xfa,
	0x07, 0x58, 0x3e, 0x93, 0x3c, 0xf0, 0x5c, 0x27, 0x40, 0xf2, 0x14, 0xe6, 0xac, 0xf7, 0xcc, 0x19,
	0xa5, 0xae, 0x59, 0x9d, 0x61, 0xb1, 0x8d, 0x18, 0x69, 0x4e, 0x18, 0xf4, 0x1f, 0x0a, 0x2c, 0x9d,
	0x55, 0x71, 0xe6, 0x0e, 0x4f, 0xa0, 0x68, 0xf9, 0xc8, 0x04, 0xf6, 0xa3, 0x7b, 0x4d, 0x64, 0xad,
	0x50, 0x79, 0xcc, 0x74, 0x72, 0xcc, 0xb4, 0x3b, 0x39, 0x66, 0x13, 0x64, 0x79, 0x14, 0x20, 0xeb,
	0x90, 0x8b, 0x25, 0x8d, 0x85, 0x9c, 0xf5, 0xaf, 0x21, 0xa1, 0xb7, 0xdf, 0x02, 0x39, 0xed, 0x2c,
	0x52, 0x82, 0x62, 0x6f, 0x67, 0xb7, 0xb3, 0xb9, 0xd1, 0x6a, 0xb6, 0x36, 0x1b, 0xda, 0x25, 0x92,
	0x07, 0xb5, 0xd7, 0xd1, 0x14, 0x32, 0x0f, 0xd9, 0x46, 0xfb, 0xe5, 0x8e, 0xa6, 0x46, 0xaf, 0x67,
	0x9b, 0xcd, 0xae, 0x96, 0x21, 0x05, 0xc8, 0x99, 0xad, 0xad, 0xed, 0xae, 0x96, 0x8d, 0xca, 0x5a,
	0x3b, 0x5a, 0x8e, 0xcc, 0x41, 0xa6, 0xdd, 0xeb, 0x6a, 0xf9, 0xfa, 0x1f, 0x15, 0x0a, 0x29, 0x3f,
	0xd9, 0x87, 0xc2, 0x16, 0x8a, 0xe4, 0x52, 0x1f, 0x4c, 0x1d, 0xf7, 0x5c, 0x37, 0x57, 0x66, 0x5a,
	0x93, 0x1c, 0xc2, 0x65, 0x69, 0xf3, 0xe4, 0xfb, 0xf1, 0x54, 0xf4, 0xb4, 0x8b, 0x98, 0xb1, 0xf1,
	0x17, 0xc8, 0x46, 0x96, 0x23, 0x0f, 0xa7, 0xa2, 0xce, 0xb7, 0x7c, 0xe5, 0xd1, 0xec, 0x40, 0x69,
	0xe7, 0x7b, 0xca, 0xfa, 0x37, 0x05, 0x56, 0x86, 0x78, 0x30, 0x8d, 0x61, 0x7d, 0xe1, 0xe8, 0xdf,
	0x5b, 0x64, 0xb3, 0x8e, 0xf2, 0x7a, 0x75, 0xc4, 0x05, 0x3d, 0x60, 0x8e, 0xe0, 0xd4, 0x72, 0x69,
	0xf8, 0xd1, 0x48, 0xe1, 0x46, 0x60, 0xdd, 0x65, 0x1e, 0x37, 0x46, 0xae, 0x71, 0xe2, 0x47, 0xea,
	0xbb, 0xba, 0xbc, 0x9b, 0xb6, 0x58, 0xf3, 0x38, 0x6d, 0xc8, 0x16, 0xdd, 0x38, 0xfb, 0xfb, 0x58,
	0x76, 0x6f, 0xcd, 0xe3, 0x7b, 0x32, 0xbb, 0x27, 0xb3, 0x83, 0x7c, 0x6c, 0xef, 0xfb, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x4b, 0x55, 0x8b, 0x65, 0xf8, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OpenCloseClient is the client API for OpenClose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenCloseClient interface {
	GetStates(ctx context.Context, in *GetOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error)
	UpdateStates(ctx context.Context, in *UpdateOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error)
	// Get notified of changes to the OpenCloseState of a device
	Pull(ctx context.Context, in *PullOpenCloseStatesRequest, opts ...grpc.CallOption) (OpenClose_PullClient, error)
}

type openCloseClient struct {
	cc *grpc.ClientConn
}

func NewOpenCloseClient(cc *grpc.ClientConn) OpenCloseClient {
	return &openCloseClient{cc}
}

func (c *openCloseClient) GetStates(ctx context.Context, in *GetOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error) {
	out := new(OpenCloseStates)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.OpenClose/GetStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseClient) UpdateStates(ctx context.Context, in *UpdateOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error) {
	out := new(OpenCloseStates)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.OpenClose/UpdateStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseClient) Pull(ctx context.Context, in *PullOpenCloseStatesRequest, opts ...grpc.CallOption) (OpenClose_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenClose_serviceDesc.Streams[0], "/smartcore.api.device.traits.OpenClose/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &openClosePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenClose_PullClient interface {
	Recv() (*PullOpenCloseStatesResponse, error)
	grpc.ClientStream
}

type openClosePullClient struct {
	grpc.ClientStream
}

func (x *openClosePullClient) Recv() (*PullOpenCloseStatesResponse, error) {
	m := new(PullOpenCloseStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenCloseServer is the server API for OpenClose service.
type OpenCloseServer interface {
	GetStates(context.Context, *GetOpenCloseStatesRequest) (*OpenCloseStates, error)
	UpdateStates(context.Context, *UpdateOpenCloseStatesRequest) (*OpenCloseStates, error)
	// Get notified of changes to the OpenCloseState of a device
	Pull(*PullOpenCloseStatesRequest, OpenClose_PullServer) error
}

// UnimplementedOpenCloseServer can be embedded to have forward compatible implementations.
type UnimplementedOpenCloseServer struct {
}

func (*UnimplementedOpenCloseServer) GetStates(ctx context.Context, req *GetOpenCloseStatesRequest) (*OpenCloseStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (*UnimplementedOpenCloseServer) UpdateStates(ctx context.Context, req *UpdateOpenCloseStatesRequest) (*OpenCloseStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStates not implemented")
}
func (*UnimplementedOpenCloseServer) Pull(req *PullOpenCloseStatesRequest, srv OpenClose_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterOpenCloseServer(s *grpc.Server, srv OpenCloseServer) {
	s.RegisterService(&_OpenClose_serviceDesc, srv)
}

func _OpenClose_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenCloseStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.OpenClose/GetStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseServer).GetStates(ctx, req.(*GetOpenCloseStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenClose_UpdateStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenCloseStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseServer).UpdateStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.OpenClose/UpdateStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseServer).UpdateStates(ctx, req.(*UpdateOpenCloseStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenClose_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullOpenCloseStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenCloseServer).Pull(m, &openClosePullServer{stream})
}

type OpenClose_PullServer interface {
	Send(*PullOpenCloseStatesResponse) error
	grpc.ServerStream
}

type openClosePullServer struct {
	grpc.ServerStream
}

func (x *openClosePullServer) Send(m *PullOpenCloseStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OpenClose_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.OpenClose",
	HandlerType: (*OpenCloseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStates",
			Handler:    _OpenClose_GetStates_Handler,
		},
		{
			MethodName: "UpdateStates",
			Handler:    _OpenClose_UpdateStates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _OpenClose_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/open_close.proto",
}
