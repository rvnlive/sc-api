// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MotionSensorClient is the client API for MotionSensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MotionSensorClient interface {
	// Get the current motion state for the device.
	GetMotionDetection(ctx context.Context, in *GetMotionDetectionRequest, opts ...grpc.CallOption) (*MotionDetection, error)
	// subscribe to changes in the motion state for the device.
	PullMotionDetections(ctx context.Context, in *PullMotionDetectionRequest, opts ...grpc.CallOption) (MotionSensor_PullMotionDetectionsClient, error)
}

type motionSensorClient struct {
	cc grpc.ClientConnInterface
}

func NewMotionSensorClient(cc grpc.ClientConnInterface) MotionSensorClient {
	return &motionSensorClient{cc}
}

func (c *motionSensorClient) GetMotionDetection(ctx context.Context, in *GetMotionDetectionRequest, opts ...grpc.CallOption) (*MotionDetection, error) {
	out := new(MotionDetection)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.MotionSensor/GetMotionDetection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motionSensorClient) PullMotionDetections(ctx context.Context, in *PullMotionDetectionRequest, opts ...grpc.CallOption) (MotionSensor_PullMotionDetectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MotionSensor_serviceDesc.Streams[0], "/smartcore.api.device.traits.MotionSensor/PullMotionDetections", opts...)
	if err != nil {
		return nil, err
	}
	x := &motionSensorPullMotionDetectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MotionSensor_PullMotionDetectionsClient interface {
	Recv() (*PullMotionDetectionResponse, error)
	grpc.ClientStream
}

type motionSensorPullMotionDetectionsClient struct {
	grpc.ClientStream
}

func (x *motionSensorPullMotionDetectionsClient) Recv() (*PullMotionDetectionResponse, error) {
	m := new(PullMotionDetectionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MotionSensorServer is the server API for MotionSensor service.
// All implementations must embed UnimplementedMotionSensorServer
// for forward compatibility
type MotionSensorServer interface {
	// Get the current motion state for the device.
	GetMotionDetection(context.Context, *GetMotionDetectionRequest) (*MotionDetection, error)
	// subscribe to changes in the motion state for the device.
	PullMotionDetections(*PullMotionDetectionRequest, MotionSensor_PullMotionDetectionsServer) error
	mustEmbedUnimplementedMotionSensorServer()
}

// UnimplementedMotionSensorServer must be embedded to have forward compatible implementations.
type UnimplementedMotionSensorServer struct {
}

func (*UnimplementedMotionSensorServer) GetMotionDetection(context.Context, *GetMotionDetectionRequest) (*MotionDetection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMotionDetection not implemented")
}
func (*UnimplementedMotionSensorServer) PullMotionDetections(*PullMotionDetectionRequest, MotionSensor_PullMotionDetectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullMotionDetections not implemented")
}
func (*UnimplementedMotionSensorServer) mustEmbedUnimplementedMotionSensorServer() {}

func RegisterMotionSensorServer(s *grpc.Server, srv MotionSensorServer) {
	s.RegisterService(&_MotionSensor_serviceDesc, srv)
}

func _MotionSensor_GetMotionDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMotionDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotionSensorServer).GetMotionDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.MotionSensor/GetMotionDetection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotionSensorServer).GetMotionDetection(ctx, req.(*GetMotionDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotionSensor_PullMotionDetections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullMotionDetectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MotionSensorServer).PullMotionDetections(m, &motionSensorPullMotionDetectionsServer{stream})
}

type MotionSensor_PullMotionDetectionsServer interface {
	Send(*PullMotionDetectionResponse) error
	grpc.ServerStream
}

type motionSensorPullMotionDetectionsServer struct {
	grpc.ServerStream
}

func (x *motionSensorPullMotionDetectionsServer) Send(m *PullMotionDetectionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MotionSensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.MotionSensor",
	HandlerType: (*MotionSensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMotionDetection",
			Handler:    _MotionSensor_GetMotionDetection_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullMotionDetections",
			Handler:       _MotionSensor_PullMotionDetections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/motion_sensor.proto",
}
