// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device/traits/speaker.proto

package traits

import (
	context "context"
	fmt "fmt"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Trait.attribute describing capabilities of the speaker device
type SpeakerAttributes struct {
	// Attributes associated with the gain property of the speaker. Note that a step value that is the same as the bounds
	// implies that the speaker only supports mute
	VolumeAttributes *types.FloatAttributes `protobuf:"bytes,1,opt,name=volume_attributes,json=volumeAttributes,proto3" json:"volume_attributes,omitempty"`
	// How is mute implemented by the device. Can help to customise behaviour of interfaces to the device, e.g. by
	// disallowing gain change when muted
	MuteSupport          types.MuteSupport `protobuf:"varint,3,opt,name=mute_support,json=muteSupport,proto3,enum=smartcore.api.types.MuteSupport" json:"mute_support,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SpeakerAttributes) Reset()         { *m = SpeakerAttributes{} }
func (m *SpeakerAttributes) String() string { return proto.CompactTextString(m) }
func (*SpeakerAttributes) ProtoMessage()    {}
func (*SpeakerAttributes) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9131b6710ea0a5, []int{0}
}

func (m *SpeakerAttributes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakerAttributes.Unmarshal(m, b)
}
func (m *SpeakerAttributes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakerAttributes.Marshal(b, m, deterministic)
}
func (m *SpeakerAttributes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakerAttributes.Merge(m, src)
}
func (m *SpeakerAttributes) XXX_Size() int {
	return xxx_messageInfo_SpeakerAttributes.Size(m)
}
func (m *SpeakerAttributes) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakerAttributes.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakerAttributes proto.InternalMessageInfo

func (m *SpeakerAttributes) GetVolumeAttributes() *types.FloatAttributes {
	if m != nil {
		return m.VolumeAttributes
	}
	return nil
}

func (m *SpeakerAttributes) GetMuteSupport() types.MuteSupport {
	if m != nil {
		return m.MuteSupport
	}
	return types.MuteSupport_MUTE_NATIVE
}

type GetSpeakerVolumeRequest struct {
	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// fields to fetch relative the the Volume type
	Fields               *field_mask.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GetSpeakerVolumeRequest) Reset()         { *m = GetSpeakerVolumeRequest{} }
func (m *GetSpeakerVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*GetSpeakerVolumeRequest) ProtoMessage()    {}
func (*GetSpeakerVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9131b6710ea0a5, []int{1}
}

func (m *GetSpeakerVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSpeakerVolumeRequest.Unmarshal(m, b)
}
func (m *GetSpeakerVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSpeakerVolumeRequest.Marshal(b, m, deterministic)
}
func (m *GetSpeakerVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSpeakerVolumeRequest.Merge(m, src)
}
func (m *GetSpeakerVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_GetSpeakerVolumeRequest.Size(m)
}
func (m *GetSpeakerVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSpeakerVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSpeakerVolumeRequest proto.InternalMessageInfo

func (m *GetSpeakerVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSpeakerVolumeRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateSpeakerVolumeRequest struct {
	// Name of the device to update the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The updated volume value
	Volume *types.Volume `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	// Only supported for Volume.level. Update the value relative to the current value.
	Delta bool `protobuf:"varint,3,opt,name=delta,proto3" json:"delta,omitempty"`
	// The fields we intend to update relative to the Volume type
	UpdateMask           *field_mask.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateSpeakerVolumeRequest) Reset()         { *m = UpdateSpeakerVolumeRequest{} }
func (m *UpdateSpeakerVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSpeakerVolumeRequest) ProtoMessage()    {}
func (*UpdateSpeakerVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9131b6710ea0a5, []int{2}
}

func (m *UpdateSpeakerVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSpeakerVolumeRequest.Unmarshal(m, b)
}
func (m *UpdateSpeakerVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSpeakerVolumeRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSpeakerVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSpeakerVolumeRequest.Merge(m, src)
}
func (m *UpdateSpeakerVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSpeakerVolumeRequest.Size(m)
}
func (m *UpdateSpeakerVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSpeakerVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSpeakerVolumeRequest proto.InternalMessageInfo

func (m *UpdateSpeakerVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateSpeakerVolumeRequest) GetVolume() *types.Volume {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *UpdateSpeakerVolumeRequest) GetDelta() bool {
	if m != nil {
		return m.Delta
	}
	return false
}

func (m *UpdateSpeakerVolumeRequest) GetUpdateMask() *field_mask.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type PullSpeakerVolumeRequest struct {
	// Name of the device to fetch the state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// fields to fetch relative the the Volume type
	Fields               *field_mask.FieldMask `protobuf:"bytes,2,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PullSpeakerVolumeRequest) Reset()         { *m = PullSpeakerVolumeRequest{} }
func (m *PullSpeakerVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*PullSpeakerVolumeRequest) ProtoMessage()    {}
func (*PullSpeakerVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9131b6710ea0a5, []int{3}
}

func (m *PullSpeakerVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullSpeakerVolumeRequest.Unmarshal(m, b)
}
func (m *PullSpeakerVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullSpeakerVolumeRequest.Marshal(b, m, deterministic)
}
func (m *PullSpeakerVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullSpeakerVolumeRequest.Merge(m, src)
}
func (m *PullSpeakerVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_PullSpeakerVolumeRequest.Size(m)
}
func (m *PullSpeakerVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullSpeakerVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullSpeakerVolumeRequest proto.InternalMessageInfo

func (m *PullSpeakerVolumeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PullSpeakerVolumeRequest) GetFields() *field_mask.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type PullSpeakerVolumeResponse struct {
	// Changes since the last message
	Changes              []*types.VolumeChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PullSpeakerVolumeResponse) Reset()         { *m = PullSpeakerVolumeResponse{} }
func (m *PullSpeakerVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*PullSpeakerVolumeResponse) ProtoMessage()    {}
func (*PullSpeakerVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c9131b6710ea0a5, []int{4}
}

func (m *PullSpeakerVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullSpeakerVolumeResponse.Unmarshal(m, b)
}
func (m *PullSpeakerVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullSpeakerVolumeResponse.Marshal(b, m, deterministic)
}
func (m *PullSpeakerVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullSpeakerVolumeResponse.Merge(m, src)
}
func (m *PullSpeakerVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_PullSpeakerVolumeResponse.Size(m)
}
func (m *PullSpeakerVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullSpeakerVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullSpeakerVolumeResponse proto.InternalMessageInfo

func (m *PullSpeakerVolumeResponse) GetChanges() []*types.VolumeChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

func init() {
	proto.RegisterType((*SpeakerAttributes)(nil), "smartcore.api.device.traits.SpeakerAttributes")
	proto.RegisterType((*GetSpeakerVolumeRequest)(nil), "smartcore.api.device.traits.GetSpeakerVolumeRequest")
	proto.RegisterType((*UpdateSpeakerVolumeRequest)(nil), "smartcore.api.device.traits.UpdateSpeakerVolumeRequest")
	proto.RegisterType((*PullSpeakerVolumeRequest)(nil), "smartcore.api.device.traits.PullSpeakerVolumeRequest")
	proto.RegisterType((*PullSpeakerVolumeResponse)(nil), "smartcore.api.device.traits.PullSpeakerVolumeResponse")
}

func init() { proto.RegisterFile("device/traits/speaker.proto", fileDescriptor_4c9131b6710ea0a5) }

var fileDescriptor_4c9131b6710ea0a5 = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xd3, 0x92, 0xd2, 0x49, 0x84, 0xda, 0x15, 0x12, 0xc1, 0x39, 0x10, 0x22, 0x0e, 0xb9,
	0xb0, 0x86, 0x94, 0x9f, 0x43, 0x4f, 0x69, 0x51, 0x7b, 0xaa, 0x14, 0x1c, 0x40, 0x08, 0x45, 0x44,
	0x1b, 0x7b, 0x6a, 0x56, 0xb1, 0xbd, 0x8b, 0x77, 0x37, 0x12, 0x07, 0xde, 0x85, 0x33, 0xbc, 0x00,
	0xcf, 0xc0, 0x81, 0x67, 0x42, 0xd9, 0x75, 0xd2, 0x46, 0x4a, 0x0c, 0x1c, 0x7a, 0xdb, 0xd9, 0xf9,
	0xe6, 0xfb, 0x66, 0xbf, 0x19, 0x1b, 0xda, 0x31, 0xce, 0x79, 0x84, 0x81, 0x2e, 0x18, 0xd7, 0x2a,
	0x50, 0x12, 0xd9, 0x0c, 0x0b, 0x2a, 0x0b, 0xa1, 0x05, 0x69, 0xab, 0x8c, 0x15, 0x3a, 0x12, 0x05,
	0x52, 0x26, 0x39, 0x75, 0x50, 0xea, 0xa0, 0x7e, 0x27, 0x11, 0x22, 0x49, 0x31, 0xb0, 0xd0, 0xa9,
	0xb9, 0x0c, 0x2e, 0x39, 0xa6, 0xf1, 0x24, 0x63, 0x6a, 0xe6, 0xca, 0x7d, 0xa2, 0xbf, 0x48, 0x54,
	0x41, 0x6e, 0xb2, 0xe9, 0x92, 0xd2, 0x3f, 0x70, 0x77, 0x26, 0xe7, 0x7a, 0x1d, 0x35, 0x17, 0xa9,
	0xc9, 0xd0, 0xdd, 0x75, 0x7f, 0x78, 0x70, 0x38, 0x72, 0xad, 0x0c, 0xb4, 0x2e, 0xf8, 0xd4, 0x68,
	0x54, 0xe4, 0x35, 0x1c, 0x3a, 0xd4, 0x84, 0xad, 0x2e, 0x5b, 0x5e, 0xc7, 0xeb, 0x35, 0xfa, 0x8f,
	0xe8, 0x7a, 0xab, 0x96, 0x93, 0x9e, 0xa5, 0x82, 0xe9, 0x2b, 0x82, 0xf0, 0xc0, 0x95, 0x5f, 0xa3,
	0x3c, 0x85, 0x66, 0x66, 0x34, 0x4e, 0x94, 0x91, 0x52, 0x14, 0xba, 0xb5, 0xd3, 0xf1, 0x7a, 0x77,
	0xfa, 0x9d, 0x8d, 0x6c, 0x17, 0x46, 0xe3, 0xc8, 0xe1, 0xc2, 0x46, 0x76, 0x15, 0x74, 0x19, 0xdc,
	0x3b, 0x47, 0x5d, 0xf6, 0xfb, 0xce, 0x4a, 0x84, 0xf8, 0xd9, 0xa0, 0xd2, 0x84, 0xc0, 0x6e, 0xce,
	0x32, 0xb4, 0x5d, 0xee, 0x87, 0xf6, 0x4c, 0xfa, 0x50, 0xb7, 0x56, 0xa9, 0x56, 0xcd, 0xf6, 0xee,
	0x53, 0xe7, 0x24, 0x5d, 0x3a, 0x49, 0xcf, 0x16, 0xe9, 0x0b, 0xa6, 0x66, 0x61, 0x89, 0xec, 0xfe,
	0xf4, 0xc0, 0x7f, 0x2b, 0x63, 0xa6, 0xf1, 0x9f, 0x65, 0x8e, 0xa0, 0xee, 0x9e, 0x5b, 0xca, 0xb4,
	0x37, 0x3e, 0xaa, 0xe4, 0x29, 0xa1, 0xe4, 0x2e, 0xdc, 0x8a, 0x31, 0xd5, 0xcc, 0x1a, 0x71, 0x3b,
	0x74, 0x01, 0x39, 0x86, 0x86, 0xb1, 0xe2, 0x76, 0xba, 0xad, 0xdd, 0xbf, 0xb6, 0x0d, 0x0e, 0xbe,
	0x38, 0x77, 0xa7, 0xd0, 0x1a, 0x9a, 0x34, 0xbd, 0x51, 0x7b, 0xde, 0xc3, 0xfd, 0x0d, 0x1a, 0x4a,
	0x8a, 0x5c, 0x21, 0x39, 0x86, 0xbd, 0xe8, 0x13, 0xcb, 0x13, 0xbb, 0x2c, 0x3b, 0xbd, 0x46, 0xff,
	0x61, 0x85, 0x13, 0xa7, 0x16, 0x19, 0x2e, 0x2b, 0xfa, 0xbf, 0x6b, 0xb0, 0x57, 0xd2, 0x92, 0x8f,
	0xb0, 0x7f, 0x8e, 0xda, 0xe1, 0xc8, 0x33, 0x5a, 0xf1, 0x71, 0xd0, 0x2d, 0xfb, 0xe0, 0x57, 0x0d,
	0x81, 0xc4, 0xd0, 0x74, 0x33, 0x2e, 0xe3, 0x97, 0x95, 0x12, 0xdb, 0xd7, 0xa1, 0x5a, 0xe5, 0x2b,
	0xc0, 0xc2, 0xab, 0x32, 0x7a, 0x5e, 0xa9, 0xb1, 0x6d, 0x70, 0xfe, 0x8b, 0xff, 0x2d, 0x73, 0xb3,
	0x78, 0xe2, 0x9d, 0x7c, 0xf3, 0xe0, 0x41, 0x8c, 0xf3, 0xaa, 0xfa, 0x93, 0x66, 0x59, 0x3c, 0x5c,
	0x4c, 0x7c, 0xe8, 0x7d, 0x78, 0x9a, 0x70, 0x4d, 0xe7, 0x2c, 0xd7, 0x9c, 0x46, 0x82, 0x9a, 0x59,
	0xb0, 0x2a, 0x0e, 0x54, 0xf4, 0x98, 0x49, 0x1e, 0x24, 0x22, 0x58, 0xfb, 0x91, 0x7d, 0xaf, 0xb5,
	0x47, 0x2b, 0x81, 0x81, 0xe4, 0xf4, 0x95, 0x13, 0x78, 0x63, 0xb3, 0xbf, 0xae, 0x65, 0xc7, 0x03,
	0xc9, 0xc7, 0x2e, 0x3b, 0x76, 0xd9, 0x69, 0xdd, 0x6e, 0xda, 0xd1, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb8, 0x14, 0x73, 0x20, 0x1c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpeakerClient is the client API for Speaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpeakerClient interface {
	// Get the current state of the volume for the device
	GetVolume(ctx context.Context, in *GetSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error)
	// update the volume state for the device
	UpdateVolume(ctx context.Context, in *UpdateSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error)
	PullVolume(ctx context.Context, in *PullSpeakerVolumeRequest, opts ...grpc.CallOption) (Speaker_PullVolumeClient, error)
}

type speakerClient struct {
	cc *grpc.ClientConn
}

func NewSpeakerClient(cc *grpc.ClientConn) SpeakerClient {
	return &speakerClient{cc}
}

func (c *speakerClient) GetVolume(ctx context.Context, in *GetSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error) {
	out := new(types.Volume)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Speaker/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerClient) UpdateVolume(ctx context.Context, in *UpdateSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error) {
	out := new(types.Volume)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Speaker/UpdateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerClient) PullVolume(ctx context.Context, in *PullSpeakerVolumeRequest, opts ...grpc.CallOption) (Speaker_PullVolumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Speaker_serviceDesc.Streams[0], "/smartcore.api.device.traits.Speaker/PullVolume", opts...)
	if err != nil {
		return nil, err
	}
	x := &speakerPullVolumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Speaker_PullVolumeClient interface {
	Recv() (*PullSpeakerVolumeResponse, error)
	grpc.ClientStream
}

type speakerPullVolumeClient struct {
	grpc.ClientStream
}

func (x *speakerPullVolumeClient) Recv() (*PullSpeakerVolumeResponse, error) {
	m := new(PullSpeakerVolumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeakerServer is the server API for Speaker service.
type SpeakerServer interface {
	// Get the current state of the volume for the device
	GetVolume(context.Context, *GetSpeakerVolumeRequest) (*types.Volume, error)
	// update the volume state for the device
	UpdateVolume(context.Context, *UpdateSpeakerVolumeRequest) (*types.Volume, error)
	PullVolume(*PullSpeakerVolumeRequest, Speaker_PullVolumeServer) error
}

// UnimplementedSpeakerServer can be embedded to have forward compatible implementations.
type UnimplementedSpeakerServer struct {
}

func (*UnimplementedSpeakerServer) GetVolume(ctx context.Context, req *GetSpeakerVolumeRequest) (*types.Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (*UnimplementedSpeakerServer) UpdateVolume(ctx context.Context, req *UpdateSpeakerVolumeRequest) (*types.Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (*UnimplementedSpeakerServer) PullVolume(req *PullSpeakerVolumeRequest, srv Speaker_PullVolumeServer) error {
	return status.Errorf(codes.Unimplemented, "method PullVolume not implemented")
}

func RegisterSpeakerServer(s *grpc.Server, srv SpeakerServer) {
	s.RegisterService(&_Speaker_serviceDesc, srv)
}

func _Speaker_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeakerVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Speaker/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).GetVolume(ctx, req.(*GetSpeakerVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpeakerVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Speaker/UpdateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).UpdateVolume(ctx, req.(*UpdateSpeakerVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_PullVolume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullSpeakerVolumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeakerServer).PullVolume(m, &speakerPullVolumeServer{stream})
}

type Speaker_PullVolumeServer interface {
	Send(*PullSpeakerVolumeResponse) error
	grpc.ServerStream
}

type speakerPullVolumeServer struct {
	grpc.ServerStream
}

func (x *speakerPullVolumeServer) Send(m *PullSpeakerVolumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Speaker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.Speaker",
	HandlerType: (*SpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVolume",
			Handler:    _Speaker_GetVolume_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _Speaker_UpdateVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullVolume",
			Handler:       _Speaker_PullVolume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/speaker.proto",
}
