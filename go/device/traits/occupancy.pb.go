// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: device/traits/occupancy.proto

package traits

import (
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Possible states for occupancy
type OccupancyState int32

const (
	// There are no signals to suggest either an occupied or unoccupied space
	OccupancyState_NO_SIGNALS OccupancyState = 0
	// The space is occupied
	OccupancyState_OCCUPIED OccupancyState = 1
	// The space is unoccupied
	OccupancyState_UNOCCUPIED OccupancyState = 2
	// The space is likely occupied but some signals suggest that no activity is occurring (i.e. people are asleep or not
	// moving for other reasons)
	OccupancyState_IDLE OccupancyState = 3
)

// Enum value maps for OccupancyState.
var (
	OccupancyState_name = map[int32]string{
		0: "NO_SIGNALS",
		1: "OCCUPIED",
		2: "UNOCCUPIED",
		3: "IDLE",
	}
	OccupancyState_value = map[string]int32{
		"NO_SIGNALS": 0,
		"OCCUPIED":   1,
		"UNOCCUPIED": 2,
		"IDLE":       3,
	}
)

func (x OccupancyState) Enum() *OccupancyState {
	p := new(OccupancyState)
	*p = x
	return p
}

func (x OccupancyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OccupancyState) Descriptor() protoreflect.EnumDescriptor {
	return file_device_traits_occupancy_proto_enumTypes[0].Descriptor()
}

func (OccupancyState) Type() protoreflect.EnumType {
	return &file_device_traits_occupancy_proto_enumTypes[0]
}

func (x OccupancyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OccupancyState.Descriptor instead.
func (OccupancyState) EnumDescriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{0}
}

// Trait.attribute for the configuration of the device
type OccupancyAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// how many people can the occupancy service report. 0 means it won't report people counts. Note: this is _not_ the
	// total capacity for the space, it's the capacity of the sensor
	MaxPeople int32 `protobuf:"varint,1,opt,name=max_people,json=maxPeople,proto3" json:"max_people,omitempty"`
	// does the device support reporting a manual occupancy override, typically used for testing
	SupportsOverride bool `protobuf:"varint,2,opt,name=supports_override,json=supportsOverride,proto3" json:"supports_override,omitempty"`
}

func (x *OccupancyAttributes) Reset() {
	*x = OccupancyAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OccupancyAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyAttributes) ProtoMessage() {}

func (x *OccupancyAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OccupancyAttributes.ProtoReflect.Descriptor instead.
func (*OccupancyAttributes) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{0}
}

func (x *OccupancyAttributes) GetMaxPeople() int32 {
	if x != nil {
		return x.MaxPeople
	}
	return 0
}

func (x *OccupancyAttributes) GetSupportsOverride() bool {
	if x != nil {
		return x.SupportsOverride
	}
	return false
}

// The occupancy state the device is reporting and updating
type Occupancy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current occupancy state
	State OccupancyState `protobuf:"varint,1,opt,name=state,proto3,enum=smartcore.api.device.traits.OccupancyState" json:"state,omitempty"`
	// The total number of people the occupancy sensor has detected. Do NOT use this value as an indication of occupancy
	// state, a value of 0 could be reported for a space that is occupied if the device either doesn't support people
	// counts or there is some other undefined issue with the counting part of the sensor suite.
	PeopleCount int32 `protobuf:"varint,2,opt,name=people_count,json=peopleCount,proto3" json:"people_count,omitempty"`
	// When the occupancy state last changed. Does not update when people_count changes unlike the timestamp in
	// OccupancyChange events
	StateChangeTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=state_change_time,json=stateChangeTime,proto3" json:"state_change_time,omitempty"`
	// Optional. List of human readable strings explaining why the device thinks the space is in the current state. For
	// example could say OCCUPIED:["Detected people in space"] or IDLE:["No motion detected for 10 minutes"]. Typically
	// used for debugging or troubleshooting purposes.
	Reasons []string `protobuf:"bytes,4,rep,name=reasons,proto3" json:"reasons,omitempty"`
	// Optional. How confident is the sensor that the current occupancy state is accurate. A value of 0 means that the
	// confidence is unknown
	Confidence float64 `protobuf:"fixed64,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *Occupancy) Reset() {
	*x = Occupancy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occupancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occupancy) ProtoMessage() {}

func (x *Occupancy) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occupancy.ProtoReflect.Descriptor instead.
func (*Occupancy) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{1}
}

func (x *Occupancy) GetState() OccupancyState {
	if x != nil {
		return x.State
	}
	return OccupancyState_NO_SIGNALS
}

func (x *Occupancy) GetPeopleCount() int32 {
	if x != nil {
		return x.PeopleCount
	}
	return 0
}

func (x *Occupancy) GetStateChangeTime() *timestamp.Timestamp {
	if x != nil {
		return x.StateChangeTime
	}
	return nil
}

func (x *Occupancy) GetReasons() []string {
	if x != nil {
		return x.Reasons
	}
	return nil
}

func (x *Occupancy) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

// Describes a manual override signal for an occupancy device
type OccupancyOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the override so it can be updated or removed. Present during read, required for update, one will
	// be created if absent for create
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Manually override the state of the occupancy
	State OccupancyState `protobuf:"varint,2,opt,name=state,proto3,enum=smartcore.api.device.traits.OccupancyState" json:"state,omitempty"`
	// Manually override the number of people reported
	PeopleCount int32 `protobuf:"varint,3,opt,name=people_count,json=peopleCount,proto3" json:"people_count,omitempty"`
	// Automatically begin the manual override at this time. If absent then the override begins immediately.
	BeginTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	// Automatically expire the manual override after this time. If absent then the override does not expire and should be
	// removed manually.
	ExpireTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// Optional human readable reason to help diagnose this manual override. If the manual override is active then this
	// should be included in the Occupancy reasons list.
	Reason string `protobuf:"bytes,6,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *OccupancyOverride) Reset() {
	*x = OccupancyOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OccupancyOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyOverride) ProtoMessage() {}

func (x *OccupancyOverride) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OccupancyOverride.ProtoReflect.Descriptor instead.
func (*OccupancyOverride) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{2}
}

func (x *OccupancyOverride) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OccupancyOverride) GetState() OccupancyState {
	if x != nil {
		return x.State
	}
	return OccupancyState_NO_SIGNALS
}

func (x *OccupancyOverride) GetPeopleCount() int32 {
	if x != nil {
		return x.PeopleCount
	}
	return 0
}

func (x *OccupancyOverride) GetBeginTime() *timestamp.Timestamp {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

func (x *OccupancyOverride) GetExpireTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *OccupancyOverride) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// request to fetch the current state of the device
type GetOccupancyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name for the device to get the occupancy state for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOccupancyRequest) Reset() {
	*x = GetOccupancyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOccupancyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOccupancyRequest) ProtoMessage() {}

func (x *GetOccupancyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOccupancyRequest.ProtoReflect.Descriptor instead.
func (*GetOccupancyRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{3}
}

func (x *GetOccupancyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// request to be notified of changes to the state of the device
type PullOccupancyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name for the device to subscribe to
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PullOccupancyRequest) Reset() {
	*x = PullOccupancyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullOccupancyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullOccupancyRequest) ProtoMessage() {}

func (x *PullOccupancyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullOccupancyRequest.ProtoReflect.Descriptor instead.
func (*PullOccupancyRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{4}
}

func (x *PullOccupancyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// response containing occupancy state changes
type PullOccupancyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the list of changes that have occurred since the last event
	Changes []*OccupancyChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullOccupancyResponse) Reset() {
	*x = PullOccupancyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullOccupancyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullOccupancyResponse) ProtoMessage() {}

func (x *PullOccupancyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullOccupancyResponse.ProtoReflect.Descriptor instead.
func (*PullOccupancyResponse) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{5}
}

func (x *PullOccupancyResponse) GetChanges() []*OccupancyChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

// A change to the occupancy state of the device, including people count
type OccupancyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// the new state for the device
	Occupancy *Occupancy `protobuf:"bytes,3,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
}

func (x *OccupancyChange) Reset() {
	*x = OccupancyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OccupancyChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OccupancyChange) ProtoMessage() {}

func (x *OccupancyChange) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OccupancyChange.ProtoReflect.Descriptor instead.
func (*OccupancyChange) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{6}
}

func (x *OccupancyChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OccupancyChange) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OccupancyChange) GetOccupancy() *Occupancy {
	if x != nil {
		return x.Occupancy
	}
	return nil
}

type CreateOccupancyOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the device name
	Name     string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Override *OccupancyOverride `protobuf:"bytes,2,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *CreateOccupancyOverrideRequest) Reset() {
	*x = CreateOccupancyOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOccupancyOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOccupancyOverrideRequest) ProtoMessage() {}

func (x *CreateOccupancyOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOccupancyOverrideRequest.ProtoReflect.Descriptor instead.
func (*CreateOccupancyOverrideRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOccupancyOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateOccupancyOverrideRequest) GetOverride() *OccupancyOverride {
	if x != nil {
		return x.Override
	}
	return nil
}

type UpdateOccupancyOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the device name
	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Override   *OccupancyOverride    `protobuf:"bytes,2,opt,name=override,proto3" json:"override,omitempty"`
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateOccupancyOverrideRequest) Reset() {
	*x = UpdateOccupancyOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOccupancyOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOccupancyOverrideRequest) ProtoMessage() {}

func (x *UpdateOccupancyOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOccupancyOverrideRequest.ProtoReflect.Descriptor instead.
func (*UpdateOccupancyOverrideRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOccupancyOverrideRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOccupancyOverrideRequest) GetOverride() *OccupancyOverride {
	if x != nil {
		return x.Override
	}
	return nil
}

func (x *UpdateOccupancyOverrideRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteOccupancyOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the device name
	DeviceName   string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	OverrideName string `protobuf:"bytes,2,opt,name=override_name,json=overrideName,proto3" json:"override_name,omitempty"`
}

func (x *DeleteOccupancyOverrideRequest) Reset() {
	*x = DeleteOccupancyOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOccupancyOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOccupancyOverrideRequest) ProtoMessage() {}

func (x *DeleteOccupancyOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOccupancyOverrideRequest.ProtoReflect.Descriptor instead.
func (*DeleteOccupancyOverrideRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteOccupancyOverrideRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeleteOccupancyOverrideRequest) GetOverrideName() string {
	if x != nil {
		return x.OverrideName
	}
	return ""
}

type GetOccupancyOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the device name
	DeviceName   string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	OverrideName string `protobuf:"bytes,2,opt,name=override_name,json=overrideName,proto3" json:"override_name,omitempty"`
}

func (x *GetOccupancyOverrideRequest) Reset() {
	*x = GetOccupancyOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOccupancyOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOccupancyOverrideRequest) ProtoMessage() {}

func (x *GetOccupancyOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOccupancyOverrideRequest.ProtoReflect.Descriptor instead.
func (*GetOccupancyOverrideRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{10}
}

func (x *GetOccupancyOverrideRequest) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *GetOccupancyOverrideRequest) GetOverrideName() string {
	if x != nil {
		return x.OverrideName
	}
	return ""
}

type ListOccupancyOverridesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the device name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListOccupancyOverridesRequest) Reset() {
	*x = ListOccupancyOverridesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOccupancyOverridesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOccupancyOverridesRequest) ProtoMessage() {}

func (x *ListOccupancyOverridesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOccupancyOverridesRequest.ProtoReflect.Descriptor instead.
func (*ListOccupancyOverridesRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{11}
}

func (x *ListOccupancyOverridesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListOccupancyOverridesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overrides []*OccupancyOverride `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *ListOccupancyOverridesResponse) Reset() {
	*x = ListOccupancyOverridesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_occupancy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOccupancyOverridesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOccupancyOverridesResponse) ProtoMessage() {}

func (x *ListOccupancyOverridesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_occupancy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOccupancyOverridesResponse.ProtoReflect.Descriptor instead.
func (*ListOccupancyOverridesResponse) Descriptor() ([]byte, []int) {
	return file_device_traits_occupancy_proto_rawDescGZIP(), []int{12}
}

func (x *ListOccupancyOverridesResponse) GetOverrides() []*OccupancyOverride {
	if x != nil {
		return x.Overrides
	}
	return nil
}

var File_device_traits_occupancy_proto protoreflect.FileDescriptor

var file_device_traits_occupancy_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x13,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22,
	0xf3, 0x01, 0x0a, 0x09, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x41, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x11, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x2a, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x15,
	0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xa8, 0x01,
	0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x6f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x66, 0x0a, 0x1e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2a, 0x48, 0x0a,
	0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x53, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x55, 0x4e, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x03, 0x32, 0x8b, 0x07, 0x0a, 0x0c, 0x4f, 0x63, 0x63, 0x75,
	0x70, 0x61, 0x6e, 0x63, 0x79, 0x41, 0x70, 0x69, 0x12, 0x68, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x12, 0x78, 0x0a, 0x0d, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x6e, 0x63, 0x79, 0x12, 0x31, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x3b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4f, 0x63, 0x63,
	0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x6e,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x3b, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x80,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x38, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e,
	0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xa2, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x0e, 0x4f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x2e, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2e, 0x63, 0x6f, 0x2e, 0x75, 0x6b, 0x2f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02,
	0x1b, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x1b, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_device_traits_occupancy_proto_rawDescOnce sync.Once
	file_device_traits_occupancy_proto_rawDescData = file_device_traits_occupancy_proto_rawDesc
)

func file_device_traits_occupancy_proto_rawDescGZIP() []byte {
	file_device_traits_occupancy_proto_rawDescOnce.Do(func() {
		file_device_traits_occupancy_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_traits_occupancy_proto_rawDescData)
	})
	return file_device_traits_occupancy_proto_rawDescData
}

var file_device_traits_occupancy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_device_traits_occupancy_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_device_traits_occupancy_proto_goTypes = []interface{}{
	(OccupancyState)(0),                    // 0: smartcore.api.device.traits.OccupancyState
	(*OccupancyAttributes)(nil),            // 1: smartcore.api.device.traits.OccupancyAttributes
	(*Occupancy)(nil),                      // 2: smartcore.api.device.traits.Occupancy
	(*OccupancyOverride)(nil),              // 3: smartcore.api.device.traits.OccupancyOverride
	(*GetOccupancyRequest)(nil),            // 4: smartcore.api.device.traits.GetOccupancyRequest
	(*PullOccupancyRequest)(nil),           // 5: smartcore.api.device.traits.PullOccupancyRequest
	(*PullOccupancyResponse)(nil),          // 6: smartcore.api.device.traits.PullOccupancyResponse
	(*OccupancyChange)(nil),                // 7: smartcore.api.device.traits.OccupancyChange
	(*CreateOccupancyOverrideRequest)(nil), // 8: smartcore.api.device.traits.CreateOccupancyOverrideRequest
	(*UpdateOccupancyOverrideRequest)(nil), // 9: smartcore.api.device.traits.UpdateOccupancyOverrideRequest
	(*DeleteOccupancyOverrideRequest)(nil), // 10: smartcore.api.device.traits.DeleteOccupancyOverrideRequest
	(*GetOccupancyOverrideRequest)(nil),    // 11: smartcore.api.device.traits.GetOccupancyOverrideRequest
	(*ListOccupancyOverridesRequest)(nil),  // 12: smartcore.api.device.traits.ListOccupancyOverridesRequest
	(*ListOccupancyOverridesResponse)(nil), // 13: smartcore.api.device.traits.ListOccupancyOverridesResponse
	(*timestamp.Timestamp)(nil),            // 14: google.protobuf.Timestamp
	(*field_mask.FieldMask)(nil),           // 15: google.protobuf.FieldMask
	(*empty.Empty)(nil),                    // 16: google.protobuf.Empty
}
var file_device_traits_occupancy_proto_depIdxs = []int32{
	0,  // 0: smartcore.api.device.traits.Occupancy.state:type_name -> smartcore.api.device.traits.OccupancyState
	14, // 1: smartcore.api.device.traits.Occupancy.state_change_time:type_name -> google.protobuf.Timestamp
	0,  // 2: smartcore.api.device.traits.OccupancyOverride.state:type_name -> smartcore.api.device.traits.OccupancyState
	14, // 3: smartcore.api.device.traits.OccupancyOverride.begin_time:type_name -> google.protobuf.Timestamp
	14, // 4: smartcore.api.device.traits.OccupancyOverride.expire_time:type_name -> google.protobuf.Timestamp
	7,  // 5: smartcore.api.device.traits.PullOccupancyResponse.changes:type_name -> smartcore.api.device.traits.OccupancyChange
	14, // 6: smartcore.api.device.traits.OccupancyChange.create_time:type_name -> google.protobuf.Timestamp
	2,  // 7: smartcore.api.device.traits.OccupancyChange.occupancy:type_name -> smartcore.api.device.traits.Occupancy
	3,  // 8: smartcore.api.device.traits.CreateOccupancyOverrideRequest.override:type_name -> smartcore.api.device.traits.OccupancyOverride
	3,  // 9: smartcore.api.device.traits.UpdateOccupancyOverrideRequest.override:type_name -> smartcore.api.device.traits.OccupancyOverride
	15, // 10: smartcore.api.device.traits.UpdateOccupancyOverrideRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 11: smartcore.api.device.traits.ListOccupancyOverridesResponse.overrides:type_name -> smartcore.api.device.traits.OccupancyOverride
	4,  // 12: smartcore.api.device.traits.OccupancyApi.GetOccupancy:input_type -> smartcore.api.device.traits.GetOccupancyRequest
	5,  // 13: smartcore.api.device.traits.OccupancyApi.PullOccupancy:input_type -> smartcore.api.device.traits.PullOccupancyRequest
	8,  // 14: smartcore.api.device.traits.OccupancyApi.CreateOccupancyOverride:input_type -> smartcore.api.device.traits.CreateOccupancyOverrideRequest
	9,  // 15: smartcore.api.device.traits.OccupancyApi.UpdateOccupancyOverride:input_type -> smartcore.api.device.traits.UpdateOccupancyOverrideRequest
	10, // 16: smartcore.api.device.traits.OccupancyApi.DeleteOccupancyOverride:input_type -> smartcore.api.device.traits.DeleteOccupancyOverrideRequest
	11, // 17: smartcore.api.device.traits.OccupancyApi.GetOccupancyOverride:input_type -> smartcore.api.device.traits.GetOccupancyOverrideRequest
	12, // 18: smartcore.api.device.traits.OccupancyApi.ListOccupancyOverrides:input_type -> smartcore.api.device.traits.ListOccupancyOverridesRequest
	2,  // 19: smartcore.api.device.traits.OccupancyApi.GetOccupancy:output_type -> smartcore.api.device.traits.Occupancy
	6,  // 20: smartcore.api.device.traits.OccupancyApi.PullOccupancy:output_type -> smartcore.api.device.traits.PullOccupancyResponse
	3,  // 21: smartcore.api.device.traits.OccupancyApi.CreateOccupancyOverride:output_type -> smartcore.api.device.traits.OccupancyOverride
	3,  // 22: smartcore.api.device.traits.OccupancyApi.UpdateOccupancyOverride:output_type -> smartcore.api.device.traits.OccupancyOverride
	16, // 23: smartcore.api.device.traits.OccupancyApi.DeleteOccupancyOverride:output_type -> google.protobuf.Empty
	3,  // 24: smartcore.api.device.traits.OccupancyApi.GetOccupancyOverride:output_type -> smartcore.api.device.traits.OccupancyOverride
	13, // 25: smartcore.api.device.traits.OccupancyApi.ListOccupancyOverrides:output_type -> smartcore.api.device.traits.ListOccupancyOverridesResponse
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_device_traits_occupancy_proto_init() }
func file_device_traits_occupancy_proto_init() {
	if File_device_traits_occupancy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_traits_occupancy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OccupancyAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Occupancy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OccupancyOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOccupancyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullOccupancyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullOccupancyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OccupancyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOccupancyOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOccupancyOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOccupancyOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOccupancyOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOccupancyOverridesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_occupancy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOccupancyOverridesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_traits_occupancy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_traits_occupancy_proto_goTypes,
		DependencyIndexes: file_device_traits_occupancy_proto_depIdxs,
		EnumInfos:         file_device_traits_occupancy_proto_enumTypes,
		MessageInfos:      file_device_traits_occupancy_proto_msgTypes,
	}.Build()
	File_device_traits_occupancy_proto = out.File
	file_device_traits_occupancy_proto_rawDesc = nil
	file_device_traits_occupancy_proto_goTypes = nil
	file_device_traits_occupancy_proto_depIdxs = nil
}
