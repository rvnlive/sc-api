// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InputSelectClient is the client API for InputSelect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InputSelectClient interface {
	// request that the input be selected
	UpdateInput(ctx context.Context, in *UpdateInputRequest, opts ...grpc.CallOption) (*Input, error)
	// get the current value of the selected input
	GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*Input, error)
	// request updates to changes in the selected input
	PullInput(ctx context.Context, in *PullInputRequest, opts ...grpc.CallOption) (InputSelect_PullInputClient, error)
}

type inputSelectClient struct {
	cc grpc.ClientConnInterface
}

func NewInputSelectClient(cc grpc.ClientConnInterface) InputSelectClient {
	return &inputSelectClient{cc}
}

func (c *inputSelectClient) UpdateInput(ctx context.Context, in *UpdateInputRequest, opts ...grpc.CallOption) (*Input, error) {
	out := new(Input)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.InputSelect/UpdateInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputSelectClient) GetInput(ctx context.Context, in *GetInputRequest, opts ...grpc.CallOption) (*Input, error) {
	out := new(Input)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.InputSelect/GetInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inputSelectClient) PullInput(ctx context.Context, in *PullInputRequest, opts ...grpc.CallOption) (InputSelect_PullInputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InputSelect_serviceDesc.Streams[0], "/smartcore.api.device.traits.InputSelect/PullInput", opts...)
	if err != nil {
		return nil, err
	}
	x := &inputSelectPullInputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InputSelect_PullInputClient interface {
	Recv() (*PullInputResponse, error)
	grpc.ClientStream
}

type inputSelectPullInputClient struct {
	grpc.ClientStream
}

func (x *inputSelectPullInputClient) Recv() (*PullInputResponse, error) {
	m := new(PullInputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InputSelectServer is the server API for InputSelect service.
// All implementations must embed UnimplementedInputSelectServer
// for forward compatibility
type InputSelectServer interface {
	// request that the input be selected
	UpdateInput(context.Context, *UpdateInputRequest) (*Input, error)
	// get the current value of the selected input
	GetInput(context.Context, *GetInputRequest) (*Input, error)
	// request updates to changes in the selected input
	PullInput(*PullInputRequest, InputSelect_PullInputServer) error
	mustEmbedUnimplementedInputSelectServer()
}

// UnimplementedInputSelectServer must be embedded to have forward compatible implementations.
type UnimplementedInputSelectServer struct {
}

func (*UnimplementedInputSelectServer) UpdateInput(context.Context, *UpdateInputRequest) (*Input, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInput not implemented")
}
func (*UnimplementedInputSelectServer) GetInput(context.Context, *GetInputRequest) (*Input, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInput not implemented")
}
func (*UnimplementedInputSelectServer) PullInput(*PullInputRequest, InputSelect_PullInputServer) error {
	return status.Errorf(codes.Unimplemented, "method PullInput not implemented")
}
func (*UnimplementedInputSelectServer) mustEmbedUnimplementedInputSelectServer() {}

func RegisterInputSelectServer(s *grpc.Server, srv InputSelectServer) {
	s.RegisterService(&_InputSelect_serviceDesc, srv)
}

func _InputSelect_UpdateInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputSelectServer).UpdateInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.InputSelect/UpdateInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputSelectServer).UpdateInput(ctx, req.(*UpdateInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InputSelect_GetInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InputSelectServer).GetInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.InputSelect/GetInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InputSelectServer).GetInput(ctx, req.(*GetInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InputSelect_PullInput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullInputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InputSelectServer).PullInput(m, &inputSelectPullInputServer{stream})
}

type InputSelect_PullInputServer interface {
	Send(*PullInputResponse) error
	grpc.ServerStream
}

type inputSelectPullInputServer struct {
	grpc.ServerStream
}

func (x *inputSelectPullInputServer) Send(m *PullInputResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _InputSelect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.InputSelect",
	HandlerType: (*InputSelectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateInput",
			Handler:    _InputSelect_UpdateInput_Handler,
		},
		{
			MethodName: "GetInput",
			Handler:    _InputSelect_GetInput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullInput",
			Handler:       _InputSelect_PullInput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/input_select.proto",
}
