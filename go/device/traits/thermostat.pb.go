// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: device/traits/thermostat.proto

package traits

import (
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Supported modes for a thermostat. Some of these values are used as descriptive attributes, some are used for control
type ThermostatMode int32

const (
	// The thermostat mode is unknown during a query. If used during a write then no change will be made, if part of a
	// read then the mode is unknown. This makes no sense as part of an attribute.
	ThermostatMode_UNKNOWN ThermostatMode = 0
	// Write-only. If the thermostat is OFF restore it to it's previous state
	ThermostatMode_ON ThermostatMode = 1
	// Attr, read, write. The thermostat supports, is, or should be disabled
	ThermostatMode_OFF ThermostatMode = 2
	// Attr, read, write. The device supports, is, or should be heating
	ThermostatMode_HEAT ThermostatMode = 3
	// Attr, read, write. The device supports, is, or should be cooling
	ThermostatMode_COOL ThermostatMode = 4
	// Attr, read, write. The device supports, is, or should be maintaining heating/cooling to target a specific set
	// point (and/or min + max)
	ThermostatMode_HEAT_COOL ThermostatMode = 5
	// Attr. The device supports automatic control of set points and/or schedules based on some other means (AI for
	// example)
	ThermostatMode_AUTO ThermostatMode = 6
	// Attr, read, write. The device supports, is, or should be able to use only the fan without heating/cooling elements.
	ThermostatMode_FAN_ONLY ThermostatMode = 7
	// Attr, read, write. The device supports, is, or should be in an energy saving "eco" mode
	ThermostatMode_ECO ThermostatMode = 8
	// Attr, read, write. The device supports, is, or should be in an air purifying mode
	ThermostatMode_PURIFIER ThermostatMode = 9
	// Attr, read, write. The device supports, is, or should be in an air drying mode
	ThermostatMode_DRY ThermostatMode = 10
	// Attr, read, write. The device supports, is, or should be in locked mode (i.e. not user-editable)
	ThermostatMode_LOCKED ThermostatMode = 11
)

// Enum value maps for ThermostatMode.
var (
	ThermostatMode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ON",
		2:  "OFF",
		3:  "HEAT",
		4:  "COOL",
		5:  "HEAT_COOL",
		6:  "AUTO",
		7:  "FAN_ONLY",
		8:  "ECO",
		9:  "PURIFIER",
		10: "DRY",
		11: "LOCKED",
	}
	ThermostatMode_value = map[string]int32{
		"UNKNOWN":   0,
		"ON":        1,
		"OFF":       2,
		"HEAT":      3,
		"COOL":      4,
		"HEAT_COOL": 5,
		"AUTO":      6,
		"FAN_ONLY":  7,
		"ECO":       8,
		"PURIFIER":  9,
		"DRY":       10,
		"LOCKED":    11,
	}
)

func (x ThermostatMode) Enum() *ThermostatMode {
	p := new(ThermostatMode)
	*p = x
	return p
}

func (x ThermostatMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThermostatMode) Descriptor() protoreflect.EnumDescriptor {
	return file_device_traits_thermostat_proto_enumTypes[0].Descriptor()
}

func (ThermostatMode) Type() protoreflect.EnumType {
	return &file_device_traits_thermostat_proto_enumTypes[0]
}

func (x ThermostatMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThermostatMode.Descriptor instead.
func (ThermostatMode) EnumDescriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{0}
}

// Trait.attributes message for describing this device trait.
type ThermostatAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How the device thinks, all communications will be in celsius but the device's native unit is this.
	NativeUnit     types.TemperatureUnit `protobuf:"varint,1,opt,name=native_unit,json=nativeUnit,proto3,enum=smartcore.api.types.TemperatureUnit" json:"native_unit,omitempty"`
	SupportedModes []ThermostatMode      `protobuf:"varint,2,rep,packed,name=supported_modes,json=supportedModes,proto3,enum=smartcore.api.device.traits.ThermostatMode" json:"supported_modes,omitempty"`
	// The minimum difference between the low and high temperatures when set using a range. 0 means unset, default to 2.
	MinRangeCelsius float64 `protobuf:"fixed64,3,opt,name=min_range_celsius,json=minRangeCelsius,proto3" json:"min_range_celsius,omitempty"`
}

func (x *ThermostatAttributes) Reset() {
	*x = ThermostatAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermostatAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermostatAttributes) ProtoMessage() {}

func (x *ThermostatAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermostatAttributes.ProtoReflect.Descriptor instead.
func (*ThermostatAttributes) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{0}
}

func (x *ThermostatAttributes) GetNativeUnit() types.TemperatureUnit {
	if x != nil {
		return x.NativeUnit
	}
	return types.TemperatureUnit_CELSIUS
}

func (x *ThermostatAttributes) GetSupportedModes() []ThermostatMode {
	if x != nil {
		return x.SupportedModes
	}
	return nil
}

func (x *ThermostatAttributes) GetMinRangeCelsius() float64 {
	if x != nil {
		return x.MinRangeCelsius
	}
	return 0
}

// Request message for fetching thermostat state
type GetThermostatStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetThermostatStateRequest) Reset() {
	*x = GetThermostatStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetThermostatStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThermostatStateRequest) ProtoMessage() {}

func (x *GetThermostatStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThermostatStateRequest.ProtoReflect.Descriptor instead.
func (*GetThermostatStateRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{1}
}

func (x *GetThermostatStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for updating the thermostat state
type UpdateThermostatStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State *ThermostatState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// The fields relative to state we intend to update
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateThermostatStateRequest) Reset() {
	*x = UpdateThermostatStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThermostatStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThermostatStateRequest) ProtoMessage() {}

func (x *UpdateThermostatStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThermostatStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateThermostatStateRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateThermostatStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateThermostatStateRequest) GetState() *ThermostatState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UpdateThermostatStateRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message for subscribing to changes in the thermostats state
type PullThermostatStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PullThermostatStateRequest) Reset() {
	*x = PullThermostatStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullThermostatStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullThermostatStateRequest) ProtoMessage() {}

func (x *PullThermostatStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullThermostatStateRequest.ProtoReflect.Descriptor instead.
func (*PullThermostatStateRequest) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{3}
}

func (x *PullThermostatStateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message enclosing thermostat state changes
type PullThermostatStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*ThermostatStateChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullThermostatStateResponse) Reset() {
	*x = PullThermostatStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullThermostatStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullThermostatStateResponse) ProtoMessage() {}

func (x *PullThermostatStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullThermostatStateResponse.ProtoReflect.Descriptor instead.
func (*PullThermostatStateResponse) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{4}
}

func (x *PullThermostatStateResponse) GetChanges() []*ThermostatStateChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type ThermostatStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	CreateTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The new value for the thermostat state. Only changed fields will be set, should be merged with GetState full
	// response as required.
	State *ThermostatState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ThermostatStateChange) Reset() {
	*x = ThermostatStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermostatStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermostatStateChange) ProtoMessage() {}

func (x *ThermostatStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermostatStateChange.ProtoReflect.Descriptor instead.
func (*ThermostatStateChange) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{5}
}

func (x *ThermostatStateChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThermostatStateChange) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ThermostatStateChange) GetState() *ThermostatState {
	if x != nil {
		return x.State
	}
	return nil
}

// All the properties of the thermostat
type ThermostatState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current mode for the thermostat
	Mode ThermostatMode `protobuf:"varint,1,opt,name=mode,proto3,enum=smartcore.api.device.traits.ThermostatMode" json:"mode,omitempty"`
	// Types that are assignable to TemperatureGoal:
	//	*ThermostatState_TemperatureSetPoint
	//	*ThermostatState_TemperatureSetPointDelta
	//	*ThermostatState_TemperatureRange
	TemperatureGoal isThermostatState_TemperatureGoal `protobuf_oneof:"temperature_goal"`
	// Optional, read-only. The ambient temperature as read by the thermostat
	AmbientTemperature *types.Temperature `protobuf:"bytes,5,opt,name=ambient_temperature,json=ambientTemperature,proto3" json:"ambient_temperature,omitempty"`
	// Optional, read-only. The ambient humidity as read by the thermostat
	AmbientHumidity *wrappers.FloatValue `protobuf:"bytes,6,opt,name=ambient_humidity,json=ambientHumidity,proto3" json:"ambient_humidity,omitempty"`
}

func (x *ThermostatState) Reset() {
	*x = ThermostatState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermostatState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermostatState) ProtoMessage() {}

func (x *ThermostatState) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermostatState.ProtoReflect.Descriptor instead.
func (*ThermostatState) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{6}
}

func (x *ThermostatState) GetMode() ThermostatMode {
	if x != nil {
		return x.Mode
	}
	return ThermostatMode_UNKNOWN
}

func (m *ThermostatState) GetTemperatureGoal() isThermostatState_TemperatureGoal {
	if m != nil {
		return m.TemperatureGoal
	}
	return nil
}

func (x *ThermostatState) GetTemperatureSetPoint() *types.Temperature {
	if x, ok := x.GetTemperatureGoal().(*ThermostatState_TemperatureSetPoint); ok {
		return x.TemperatureSetPoint
	}
	return nil
}

func (x *ThermostatState) GetTemperatureSetPointDelta() *types.Temperature {
	if x, ok := x.GetTemperatureGoal().(*ThermostatState_TemperatureSetPointDelta); ok {
		return x.TemperatureSetPointDelta
	}
	return nil
}

func (x *ThermostatState) GetTemperatureRange() *TemperatureRange {
	if x, ok := x.GetTemperatureGoal().(*ThermostatState_TemperatureRange); ok {
		return x.TemperatureRange
	}
	return nil
}

func (x *ThermostatState) GetAmbientTemperature() *types.Temperature {
	if x != nil {
		return x.AmbientTemperature
	}
	return nil
}

func (x *ThermostatState) GetAmbientHumidity() *wrappers.FloatValue {
	if x != nil {
		return x.AmbientHumidity
	}
	return nil
}

type isThermostatState_TemperatureGoal interface {
	isThermostatState_TemperatureGoal()
}

type ThermostatState_TemperatureSetPoint struct {
	// A target temperature for the thermostat
	TemperatureSetPoint *types.Temperature `protobuf:"bytes,2,opt,name=temperature_set_point,json=temperatureSetPoint,proto3,oneof"`
}

type ThermostatState_TemperatureSetPointDelta struct {
	// Write-only. Set the target temperature to a value relative to the current value.
	TemperatureSetPointDelta *types.Temperature `protobuf:"bytes,3,opt,name=temperature_set_point_delta,json=temperatureSetPointDelta,proto3,oneof"`
}

type ThermostatState_TemperatureRange struct {
	// A target range for the thermostat. Only supported when in HEAT_COOL mode
	TemperatureRange *TemperatureRange `protobuf:"bytes,4,opt,name=temperature_range,json=temperatureRange,proto3,oneof"`
}

func (*ThermostatState_TemperatureSetPoint) isThermostatState_TemperatureGoal() {}

func (*ThermostatState_TemperatureSetPointDelta) isThermostatState_TemperatureGoal() {}

func (*ThermostatState_TemperatureRange) isThermostatState_TemperatureGoal() {}

// A setting for thermostats that target a temperature between a range.
type TemperatureRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The low threshold for the range
	Low *types.Temperature `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	// Required. The high threshold for the range
	High *types.Temperature `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
	// Optional. An ideal value for cases where a thermostat supports three set points
	Ideal *types.Temperature `protobuf:"bytes,3,opt,name=ideal,proto3" json:"ideal,omitempty"`
}

func (x *TemperatureRange) Reset() {
	*x = TemperatureRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_traits_thermostat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRange) ProtoMessage() {}

func (x *TemperatureRange) ProtoReflect() protoreflect.Message {
	mi := &file_device_traits_thermostat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRange.ProtoReflect.Descriptor instead.
func (*TemperatureRange) Descriptor() ([]byte, []int) {
	return file_device_traits_thermostat_proto_rawDescGZIP(), []int{7}
}

func (x *TemperatureRange) GetLow() *types.Temperature {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *TemperatureRange) GetHigh() *types.Temperature {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *TemperatureRange) GetIdeal() *types.Temperature {
	if x != nil {
		return x.Ideal
	}
	return nil
}

var File_device_traits_thermostat_proto protoreflect.FileDescriptor

var file_device_traits_thermostat_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x1a, 0x20, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x30, 0x0a, 0x1a, 0x50,
	0x75, 0x6c, 0x6c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a,
	0x1b, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72,
	0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x04, 0x0a, 0x0f, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x56,
	0x0a, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x1b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x18, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x11, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x6d, 0x62, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x61, 0x6d,
	0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12,
	0x34, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x69, 0x64, 0x65, 0x61, 0x6c, 0x2a, 0x95, 0x01,
	0x0a, 0x0e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x45, 0x41, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4f, 0x4c,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10,
	0x05, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x4f,
	0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x55, 0x52, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x09,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x59, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x0b, 0x32, 0xf9, 0x02, 0x0a, 0x0a, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x12, 0x70, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x36, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x76, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x42, 0xa3, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x0f, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x61,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x2e, 0x76, 0x61,
	0x6e, 0x74, 0x69, 0x2e, 0x63, 0x6f, 0x2e, 0x75, 0x6b, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x1b, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x1b, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_device_traits_thermostat_proto_rawDescOnce sync.Once
	file_device_traits_thermostat_proto_rawDescData = file_device_traits_thermostat_proto_rawDesc
)

func file_device_traits_thermostat_proto_rawDescGZIP() []byte {
	file_device_traits_thermostat_proto_rawDescOnce.Do(func() {
		file_device_traits_thermostat_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_traits_thermostat_proto_rawDescData)
	})
	return file_device_traits_thermostat_proto_rawDescData
}

var file_device_traits_thermostat_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_device_traits_thermostat_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_device_traits_thermostat_proto_goTypes = []interface{}{
	(ThermostatMode)(0),                  // 0: smartcore.api.device.traits.ThermostatMode
	(*ThermostatAttributes)(nil),         // 1: smartcore.api.device.traits.ThermostatAttributes
	(*GetThermostatStateRequest)(nil),    // 2: smartcore.api.device.traits.GetThermostatStateRequest
	(*UpdateThermostatStateRequest)(nil), // 3: smartcore.api.device.traits.UpdateThermostatStateRequest
	(*PullThermostatStateRequest)(nil),   // 4: smartcore.api.device.traits.PullThermostatStateRequest
	(*PullThermostatStateResponse)(nil),  // 5: smartcore.api.device.traits.PullThermostatStateResponse
	(*ThermostatStateChange)(nil),        // 6: smartcore.api.device.traits.ThermostatStateChange
	(*ThermostatState)(nil),              // 7: smartcore.api.device.traits.ThermostatState
	(*TemperatureRange)(nil),             // 8: smartcore.api.device.traits.TemperatureRange
	(types.TemperatureUnit)(0),           // 9: smartcore.api.types.TemperatureUnit
	(*field_mask.FieldMask)(nil),         // 10: google.protobuf.FieldMask
	(*timestamp.Timestamp)(nil),          // 11: google.protobuf.Timestamp
	(*types.Temperature)(nil),            // 12: smartcore.api.types.Temperature
	(*wrappers.FloatValue)(nil),          // 13: google.protobuf.FloatValue
}
var file_device_traits_thermostat_proto_depIdxs = []int32{
	9,  // 0: smartcore.api.device.traits.ThermostatAttributes.native_unit:type_name -> smartcore.api.types.TemperatureUnit
	0,  // 1: smartcore.api.device.traits.ThermostatAttributes.supported_modes:type_name -> smartcore.api.device.traits.ThermostatMode
	7,  // 2: smartcore.api.device.traits.UpdateThermostatStateRequest.state:type_name -> smartcore.api.device.traits.ThermostatState
	10, // 3: smartcore.api.device.traits.UpdateThermostatStateRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 4: smartcore.api.device.traits.PullThermostatStateResponse.changes:type_name -> smartcore.api.device.traits.ThermostatStateChange
	11, // 5: smartcore.api.device.traits.ThermostatStateChange.create_time:type_name -> google.protobuf.Timestamp
	7,  // 6: smartcore.api.device.traits.ThermostatStateChange.state:type_name -> smartcore.api.device.traits.ThermostatState
	0,  // 7: smartcore.api.device.traits.ThermostatState.mode:type_name -> smartcore.api.device.traits.ThermostatMode
	12, // 8: smartcore.api.device.traits.ThermostatState.temperature_set_point:type_name -> smartcore.api.types.Temperature
	12, // 9: smartcore.api.device.traits.ThermostatState.temperature_set_point_delta:type_name -> smartcore.api.types.Temperature
	8,  // 10: smartcore.api.device.traits.ThermostatState.temperature_range:type_name -> smartcore.api.device.traits.TemperatureRange
	12, // 11: smartcore.api.device.traits.ThermostatState.ambient_temperature:type_name -> smartcore.api.types.Temperature
	13, // 12: smartcore.api.device.traits.ThermostatState.ambient_humidity:type_name -> google.protobuf.FloatValue
	12, // 13: smartcore.api.device.traits.TemperatureRange.low:type_name -> smartcore.api.types.Temperature
	12, // 14: smartcore.api.device.traits.TemperatureRange.high:type_name -> smartcore.api.types.Temperature
	12, // 15: smartcore.api.device.traits.TemperatureRange.ideal:type_name -> smartcore.api.types.Temperature
	2,  // 16: smartcore.api.device.traits.Thermostat.GetState:input_type -> smartcore.api.device.traits.GetThermostatStateRequest
	3,  // 17: smartcore.api.device.traits.Thermostat.UpdateState:input_type -> smartcore.api.device.traits.UpdateThermostatStateRequest
	4,  // 18: smartcore.api.device.traits.Thermostat.PullState:input_type -> smartcore.api.device.traits.PullThermostatStateRequest
	7,  // 19: smartcore.api.device.traits.Thermostat.GetState:output_type -> smartcore.api.device.traits.ThermostatState
	7,  // 20: smartcore.api.device.traits.Thermostat.UpdateState:output_type -> smartcore.api.device.traits.ThermostatState
	5,  // 21: smartcore.api.device.traits.Thermostat.PullState:output_type -> smartcore.api.device.traits.PullThermostatStateResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_device_traits_thermostat_proto_init() }
func file_device_traits_thermostat_proto_init() {
	if File_device_traits_thermostat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_traits_thermostat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermostatAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetThermostatStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThermostatStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullThermostatStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullThermostatStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermostatStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermostatState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_device_traits_thermostat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_device_traits_thermostat_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ThermostatState_TemperatureSetPoint)(nil),
		(*ThermostatState_TemperatureSetPointDelta)(nil),
		(*ThermostatState_TemperatureRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_traits_thermostat_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_device_traits_thermostat_proto_goTypes,
		DependencyIndexes: file_device_traits_thermostat_proto_depIdxs,
		EnumInfos:         file_device_traits_thermostat_proto_enumTypes,
		MessageInfos:      file_device_traits_thermostat_proto_msgTypes,
	}.Build()
	File_device_traits_thermostat_proto = out.File
	file_device_traits_thermostat_proto_rawDesc = nil
	file_device_traits_thermostat_proto_goTypes = nil
	file_device_traits_thermostat_proto_depIdxs = nil
}
