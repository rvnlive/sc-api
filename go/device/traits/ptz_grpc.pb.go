// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PtzClient is the client API for Ptz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PtzClient interface {
	// Set the target state for the device
	GetPtzState(ctx context.Context, in *GetPtzStateRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Set the target state for the device
	UpdatePtzState(ctx context.Context, in *UpdatePtzStateRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(ctx context.Context, in *StopPtzRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Create a preset for the ptz position. If no preset ptz position is specified then use the current position
	CreatePreset(ctx context.Context, in *CreatePtzPresetRequest, opts ...grpc.CallOption) (*PtzPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullPtzStates(ctx context.Context, in *PullPtzStatesRequest, opts ...grpc.CallOption) (Ptz_PullPtzStatesClient, error)
}

type ptzClient struct {
	cc grpc.ClientConnInterface
}

func NewPtzClient(cc grpc.ClientConnInterface) PtzClient {
	return &ptzClient{cc}
}

func (c *ptzClient) GetPtzState(ctx context.Context, in *GetPtzStateRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/GetPtzState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) UpdatePtzState(ctx context.Context, in *UpdatePtzStateRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/UpdatePtzState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) Stop(ctx context.Context, in *StopPtzRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) CreatePreset(ctx context.Context, in *CreatePtzPresetRequest, opts ...grpc.CallOption) (*PtzPreset, error) {
	out := new(PtzPreset)
	err := c.cc.Invoke(ctx, "/smartcore.api.device.traits.Ptz/CreatePreset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzClient) PullPtzStates(ctx context.Context, in *PullPtzStatesRequest, opts ...grpc.CallOption) (Ptz_PullPtzStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ptz_serviceDesc.Streams[0], "/smartcore.api.device.traits.Ptz/PullPtzStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &ptzPullPtzStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ptz_PullPtzStatesClient interface {
	Recv() (*PullPtzStatesResponse, error)
	grpc.ClientStream
}

type ptzPullPtzStatesClient struct {
	grpc.ClientStream
}

func (x *ptzPullPtzStatesClient) Recv() (*PullPtzStatesResponse, error) {
	m := new(PullPtzStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PtzServer is the server API for Ptz service.
// All implementations must embed UnimplementedPtzServer
// for forward compatibility
type PtzServer interface {
	// Set the target state for the device
	GetPtzState(context.Context, *GetPtzStateRequest) (*PtzState, error)
	// Set the target state for the device
	UpdatePtzState(context.Context, *UpdatePtzStateRequest) (*PtzState, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(context.Context, *StopPtzRequest) (*PtzState, error)
	// Create a preset for the ptz position. If no preset ptz position is specified then use the current position
	CreatePreset(context.Context, *CreatePtzPresetRequest) (*PtzPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullPtzStates(*PullPtzStatesRequest, Ptz_PullPtzStatesServer) error
	mustEmbedUnimplementedPtzServer()
}

// UnimplementedPtzServer must be embedded to have forward compatible implementations.
type UnimplementedPtzServer struct {
}

func (*UnimplementedPtzServer) GetPtzState(context.Context, *GetPtzStateRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPtzState not implemented")
}
func (*UnimplementedPtzServer) UpdatePtzState(context.Context, *UpdatePtzStateRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePtzState not implemented")
}
func (*UnimplementedPtzServer) Stop(context.Context, *StopPtzRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedPtzServer) CreatePreset(context.Context, *CreatePtzPresetRequest) (*PtzPreset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreset not implemented")
}
func (*UnimplementedPtzServer) PullPtzStates(*PullPtzStatesRequest, Ptz_PullPtzStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullPtzStates not implemented")
}
func (*UnimplementedPtzServer) mustEmbedUnimplementedPtzServer() {}

func RegisterPtzServer(s *grpc.Server, srv PtzServer) {
	s.RegisterService(&_Ptz_serviceDesc, srv)
}

func _Ptz_GetPtzState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPtzStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).GetPtzState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/GetPtzState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).GetPtzState(ctx, req.(*GetPtzStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_UpdatePtzState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePtzStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).UpdatePtzState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/UpdatePtzState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).UpdatePtzState(ctx, req.(*UpdatePtzStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPtzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).Stop(ctx, req.(*StopPtzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_CreatePreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePtzPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzServer).CreatePreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.api.device.traits.Ptz/CreatePreset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzServer).CreatePreset(ctx, req.(*CreatePtzPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ptz_PullPtzStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPtzStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PtzServer).PullPtzStates(m, &ptzPullPtzStatesServer{stream})
}

type Ptz_PullPtzStatesServer interface {
	Send(*PullPtzStatesResponse) error
	grpc.ServerStream
}

type ptzPullPtzStatesServer struct {
	grpc.ServerStream
}

func (x *ptzPullPtzStatesServer) Send(m *PullPtzStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Ptz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.api.device.traits.Ptz",
	HandlerType: (*PtzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPtzState",
			Handler:    _Ptz_GetPtzState_Handler,
		},
		{
			MethodName: "UpdatePtzState",
			Handler:    _Ptz_UpdatePtzState_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Ptz_Stop_Handler,
		},
		{
			MethodName: "CreatePreset",
			Handler:    _Ptz_CreatePreset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPtzStates",
			Handler:       _Ptz_PullPtzStates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "device/traits/ptz.proto",
}
