// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuditClient is the client API for Audit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditClient interface {
	// List the known audit records the device has
	ListAuditRecords(ctx context.Context, in *ListAuditRecordsRequest, opts ...grpc.CallOption) (*ListAuditRecordsResponse, error)
	// Create a new audit record in this devices record list
	CreateAuditRecord(ctx context.Context, in *CreateAuditRecordRequest, opts ...grpc.CallOption) (*AuditRecord, error)
	// subscribe to new audit records
	PullAuditRecords(ctx context.Context, in *PullAuditRecordsRequest, opts ...grpc.CallOption) (Audit_PullAuditRecordsClient, error)
}

type auditClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditClient(cc grpc.ClientConnInterface) AuditClient {
	return &auditClient{cc}
}

func (c *auditClient) ListAuditRecords(ctx context.Context, in *ListAuditRecordsRequest, opts ...grpc.CallOption) (*ListAuditRecordsResponse, error) {
	out := new(ListAuditRecordsResponse)
	err := c.cc.Invoke(ctx, "/smartcore.traits.Audit/ListAuditRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditClient) CreateAuditRecord(ctx context.Context, in *CreateAuditRecordRequest, opts ...grpc.CallOption) (*AuditRecord, error) {
	out := new(AuditRecord)
	err := c.cc.Invoke(ctx, "/smartcore.traits.Audit/CreateAuditRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditClient) PullAuditRecords(ctx context.Context, in *PullAuditRecordsRequest, opts ...grpc.CallOption) (Audit_PullAuditRecordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Audit_serviceDesc.Streams[0], "/smartcore.traits.Audit/PullAuditRecords", opts...)
	if err != nil {
		return nil, err
	}
	x := &auditPullAuditRecordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Audit_PullAuditRecordsClient interface {
	Recv() (*PullAuditRecordsResponse, error)
	grpc.ClientStream
}

type auditPullAuditRecordsClient struct {
	grpc.ClientStream
}

func (x *auditPullAuditRecordsClient) Recv() (*PullAuditRecordsResponse, error) {
	m := new(PullAuditRecordsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuditServer is the server API for Audit service.
// All implementations must embed UnimplementedAuditServer
// for forward compatibility
type AuditServer interface {
	// List the known audit records the device has
	ListAuditRecords(context.Context, *ListAuditRecordsRequest) (*ListAuditRecordsResponse, error)
	// Create a new audit record in this devices record list
	CreateAuditRecord(context.Context, *CreateAuditRecordRequest) (*AuditRecord, error)
	// subscribe to new audit records
	PullAuditRecords(*PullAuditRecordsRequest, Audit_PullAuditRecordsServer) error
	mustEmbedUnimplementedAuditServer()
}

// UnimplementedAuditServer must be embedded to have forward compatible implementations.
type UnimplementedAuditServer struct {
}

func (*UnimplementedAuditServer) ListAuditRecords(context.Context, *ListAuditRecordsRequest) (*ListAuditRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuditRecords not implemented")
}
func (*UnimplementedAuditServer) CreateAuditRecord(context.Context, *CreateAuditRecordRequest) (*AuditRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuditRecord not implemented")
}
func (*UnimplementedAuditServer) PullAuditRecords(*PullAuditRecordsRequest, Audit_PullAuditRecordsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullAuditRecords not implemented")
}
func (*UnimplementedAuditServer) mustEmbedUnimplementedAuditServer() {}

func RegisterAuditServer(s *grpc.Server, srv AuditServer) {
	s.RegisterService(&_Audit_serviceDesc, srv)
}

func _Audit_ListAuditRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServer).ListAuditRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.Audit/ListAuditRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServer).ListAuditRecords(ctx, req.(*ListAuditRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audit_CreateAuditRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuditRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServer).CreateAuditRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.Audit/CreateAuditRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServer).CreateAuditRecord(ctx, req.(*CreateAuditRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Audit_PullAuditRecords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAuditRecordsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuditServer).PullAuditRecords(m, &auditPullAuditRecordsServer{stream})
}

type Audit_PullAuditRecordsServer interface {
	Send(*PullAuditRecordsResponse) error
	grpc.ServerStream
}

type auditPullAuditRecordsServer struct {
	grpc.ServerStream
}

func (x *auditPullAuditRecordsServer) Send(m *PullAuditRecordsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Audit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.Audit",
	HandlerType: (*AuditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAuditRecords",
			Handler:    _Audit_ListAuditRecords_Handler,
		},
		{
			MethodName: "CreateAuditRecord",
			Handler:    _Audit_CreateAuditRecord_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullAuditRecords",
			Handler:       _Audit_PullAuditRecords_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/audit.proto",
}
