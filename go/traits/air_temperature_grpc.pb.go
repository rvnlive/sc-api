// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AirTemperatureClient is the client API for AirTemperature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirTemperatureClient interface {
	// Get the current state of the device
	GetState(ctx context.Context, in *GetAirTemperatureStateRequest, opts ...grpc.CallOption) (*AirTemperatureState, error)
	// Update the target state for the device. the returned state may not be complete but will indicate at least the
	// current values for any set fields as part of the request.
	UpdateState(ctx context.Context, in *UpdateAirTemperatureStateRequest, opts ...grpc.CallOption) (*AirTemperatureState, error)
	// Request notification of change to the device state. The messages in the response stream may not be complete
	// but will indicate the changes as they occur. They should be merged with the full state as fetched by the GetState
	// method.
	PullState(ctx context.Context, in *PullAirTemperatureStateRequest, opts ...grpc.CallOption) (AirTemperature_PullStateClient, error)
}

type airTemperatureClient struct {
	cc grpc.ClientConnInterface
}

func NewAirTemperatureClient(cc grpc.ClientConnInterface) AirTemperatureClient {
	return &airTemperatureClient{cc}
}

func (c *airTemperatureClient) GetState(ctx context.Context, in *GetAirTemperatureStateRequest, opts ...grpc.CallOption) (*AirTemperatureState, error) {
	out := new(AirTemperatureState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.AirTemperature/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTemperatureClient) UpdateState(ctx context.Context, in *UpdateAirTemperatureStateRequest, opts ...grpc.CallOption) (*AirTemperatureState, error) {
	out := new(AirTemperatureState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.AirTemperature/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTemperatureClient) PullState(ctx context.Context, in *PullAirTemperatureStateRequest, opts ...grpc.CallOption) (AirTemperature_PullStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AirTemperature_serviceDesc.Streams[0], "/smartcore.traits.AirTemperature/PullState", opts...)
	if err != nil {
		return nil, err
	}
	x := &airTemperaturePullStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirTemperature_PullStateClient interface {
	Recv() (*PullAirTemperatureStateResponse, error)
	grpc.ClientStream
}

type airTemperaturePullStateClient struct {
	grpc.ClientStream
}

func (x *airTemperaturePullStateClient) Recv() (*PullAirTemperatureStateResponse, error) {
	m := new(PullAirTemperatureStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirTemperatureServer is the server API for AirTemperature service.
// All implementations must embed UnimplementedAirTemperatureServer
// for forward compatibility
type AirTemperatureServer interface {
	// Get the current state of the device
	GetState(context.Context, *GetAirTemperatureStateRequest) (*AirTemperatureState, error)
	// Update the target state for the device. the returned state may not be complete but will indicate at least the
	// current values for any set fields as part of the request.
	UpdateState(context.Context, *UpdateAirTemperatureStateRequest) (*AirTemperatureState, error)
	// Request notification of change to the device state. The messages in the response stream may not be complete
	// but will indicate the changes as they occur. They should be merged with the full state as fetched by the GetState
	// method.
	PullState(*PullAirTemperatureStateRequest, AirTemperature_PullStateServer) error
	mustEmbedUnimplementedAirTemperatureServer()
}

// UnimplementedAirTemperatureServer must be embedded to have forward compatible implementations.
type UnimplementedAirTemperatureServer struct {
}

func (*UnimplementedAirTemperatureServer) GetState(context.Context, *GetAirTemperatureStateRequest) (*AirTemperatureState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedAirTemperatureServer) UpdateState(context.Context, *UpdateAirTemperatureStateRequest) (*AirTemperatureState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (*UnimplementedAirTemperatureServer) PullState(*PullAirTemperatureStateRequest, AirTemperature_PullStateServer) error {
	return status.Errorf(codes.Unimplemented, "method PullState not implemented")
}
func (*UnimplementedAirTemperatureServer) mustEmbedUnimplementedAirTemperatureServer() {}

func RegisterAirTemperatureServer(s *grpc.Server, srv AirTemperatureServer) {
	s.RegisterService(&_AirTemperature_serviceDesc, srv)
}

func _AirTemperature_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirTemperatureStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTemperatureServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.AirTemperature/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTemperatureServer).GetState(ctx, req.(*GetAirTemperatureStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTemperature_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAirTemperatureStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTemperatureServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.AirTemperature/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTemperatureServer).UpdateState(ctx, req.(*UpdateAirTemperatureStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTemperature_PullState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAirTemperatureStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirTemperatureServer).PullState(m, &airTemperaturePullStateServer{stream})
}

type AirTemperature_PullStateServer interface {
	Send(*PullAirTemperatureStateResponse) error
	grpc.ServerStream
}

type airTemperaturePullStateServer struct {
	grpc.ServerStream
}

func (x *airTemperaturePullStateServer) Send(m *PullAirTemperatureStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AirTemperature_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.AirTemperature",
	HandlerType: (*AirTemperatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _AirTemperature_GetState_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _AirTemperature_UpdateState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullState",
			Handler:       _AirTemperature_PullState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/air_temperature.proto",
}
