// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AirTemperatureApiClient is the client API for AirTemperatureApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirTemperatureApiClient interface {
	// Get the current state of the device
	GetState(ctx context.Context, in *GetAirTemperatureRequest, opts ...grpc.CallOption) (*AirTemperature, error)
	// Update the target state for the device. the returned state may not be complete but will indicate at least the
	// current values for any set fields as part of the request.
	UpdateState(ctx context.Context, in *UpdateAirTemperatureRequest, opts ...grpc.CallOption) (*AirTemperature, error)
	// Request notification of change to the device state. The messages in the response stream may not be complete
	// but will indicate the changes as they occur. They should be merged with the full state as fetched by the GetState
	// method.
	PullState(ctx context.Context, in *PullAirTemperatureRequest, opts ...grpc.CallOption) (AirTemperatureApi_PullStateClient, error)
}

type airTemperatureApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAirTemperatureApiClient(cc grpc.ClientConnInterface) AirTemperatureApiClient {
	return &airTemperatureApiClient{cc}
}

func (c *airTemperatureApiClient) GetState(ctx context.Context, in *GetAirTemperatureRequest, opts ...grpc.CallOption) (*AirTemperature, error) {
	out := new(AirTemperature)
	err := c.cc.Invoke(ctx, "/smartcore.traits.AirTemperatureApi/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTemperatureApiClient) UpdateState(ctx context.Context, in *UpdateAirTemperatureRequest, opts ...grpc.CallOption) (*AirTemperature, error) {
	out := new(AirTemperature)
	err := c.cc.Invoke(ctx, "/smartcore.traits.AirTemperatureApi/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airTemperatureApiClient) PullState(ctx context.Context, in *PullAirTemperatureRequest, opts ...grpc.CallOption) (AirTemperatureApi_PullStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AirTemperatureApi_serviceDesc.Streams[0], "/smartcore.traits.AirTemperatureApi/PullState", opts...)
	if err != nil {
		return nil, err
	}
	x := &airTemperatureApiPullStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirTemperatureApi_PullStateClient interface {
	Recv() (*PullAirTemperatureResponse, error)
	grpc.ClientStream
}

type airTemperatureApiPullStateClient struct {
	grpc.ClientStream
}

func (x *airTemperatureApiPullStateClient) Recv() (*PullAirTemperatureResponse, error) {
	m := new(PullAirTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirTemperatureApiServer is the server API for AirTemperatureApi service.
// All implementations must embed UnimplementedAirTemperatureApiServer
// for forward compatibility
type AirTemperatureApiServer interface {
	// Get the current state of the device
	GetState(context.Context, *GetAirTemperatureRequest) (*AirTemperature, error)
	// Update the target state for the device. the returned state may not be complete but will indicate at least the
	// current values for any set fields as part of the request.
	UpdateState(context.Context, *UpdateAirTemperatureRequest) (*AirTemperature, error)
	// Request notification of change to the device state. The messages in the response stream may not be complete
	// but will indicate the changes as they occur. They should be merged with the full state as fetched by the GetState
	// method.
	PullState(*PullAirTemperatureRequest, AirTemperatureApi_PullStateServer) error
	mustEmbedUnimplementedAirTemperatureApiServer()
}

// UnimplementedAirTemperatureApiServer must be embedded to have forward compatible implementations.
type UnimplementedAirTemperatureApiServer struct {
}

func (*UnimplementedAirTemperatureApiServer) GetState(context.Context, *GetAirTemperatureRequest) (*AirTemperature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedAirTemperatureApiServer) UpdateState(context.Context, *UpdateAirTemperatureRequest) (*AirTemperature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (*UnimplementedAirTemperatureApiServer) PullState(*PullAirTemperatureRequest, AirTemperatureApi_PullStateServer) error {
	return status.Errorf(codes.Unimplemented, "method PullState not implemented")
}
func (*UnimplementedAirTemperatureApiServer) mustEmbedUnimplementedAirTemperatureApiServer() {}

func RegisterAirTemperatureApiServer(s *grpc.Server, srv AirTemperatureApiServer) {
	s.RegisterService(&_AirTemperatureApi_serviceDesc, srv)
}

func _AirTemperatureApi_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTemperatureApiServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.AirTemperatureApi/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTemperatureApiServer).GetState(ctx, req.(*GetAirTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTemperatureApi_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAirTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirTemperatureApiServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.AirTemperatureApi/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirTemperatureApiServer).UpdateState(ctx, req.(*UpdateAirTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirTemperatureApi_PullState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAirTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirTemperatureApiServer).PullState(m, &airTemperatureApiPullStateServer{stream})
}

type AirTemperatureApi_PullStateServer interface {
	Send(*PullAirTemperatureResponse) error
	grpc.ServerStream
}

type airTemperatureApiPullStateServer struct {
	grpc.ServerStream
}

func (x *airTemperatureApiPullStateServer) Send(m *PullAirTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AirTemperatureApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.AirTemperatureApi",
	HandlerType: (*AirTemperatureApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _AirTemperatureApi_GetState_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _AirTemperatureApi_UpdateState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullState",
			Handler:       _AirTemperatureApi_PullState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/air_temperature.proto",
}
