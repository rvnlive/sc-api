// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OpenCloseClient is the client API for OpenClose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenCloseClient interface {
	GetStates(ctx context.Context, in *GetOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error)
	UpdateStates(ctx context.Context, in *UpdateOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error)
	// Get notified of changes to the OpenCloseState of a device
	Pull(ctx context.Context, in *PullOpenCloseStatesRequest, opts ...grpc.CallOption) (OpenClose_PullClient, error)
}

type openCloseClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenCloseClient(cc grpc.ClientConnInterface) OpenCloseClient {
	return &openCloseClient{cc}
}

func (c *openCloseClient) GetStates(ctx context.Context, in *GetOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error) {
	out := new(OpenCloseStates)
	err := c.cc.Invoke(ctx, "/smartcore.traits.OpenClose/GetStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseClient) UpdateStates(ctx context.Context, in *UpdateOpenCloseStatesRequest, opts ...grpc.CallOption) (*OpenCloseStates, error) {
	out := new(OpenCloseStates)
	err := c.cc.Invoke(ctx, "/smartcore.traits.OpenClose/UpdateStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCloseClient) Pull(ctx context.Context, in *PullOpenCloseStatesRequest, opts ...grpc.CallOption) (OpenClose_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenClose_serviceDesc.Streams[0], "/smartcore.traits.OpenClose/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &openClosePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenClose_PullClient interface {
	Recv() (*PullOpenCloseStatesResponse, error)
	grpc.ClientStream
}

type openClosePullClient struct {
	grpc.ClientStream
}

func (x *openClosePullClient) Recv() (*PullOpenCloseStatesResponse, error) {
	m := new(PullOpenCloseStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenCloseServer is the server API for OpenClose service.
// All implementations must embed UnimplementedOpenCloseServer
// for forward compatibility
type OpenCloseServer interface {
	GetStates(context.Context, *GetOpenCloseStatesRequest) (*OpenCloseStates, error)
	UpdateStates(context.Context, *UpdateOpenCloseStatesRequest) (*OpenCloseStates, error)
	// Get notified of changes to the OpenCloseState of a device
	Pull(*PullOpenCloseStatesRequest, OpenClose_PullServer) error
	mustEmbedUnimplementedOpenCloseServer()
}

// UnimplementedOpenCloseServer must be embedded to have forward compatible implementations.
type UnimplementedOpenCloseServer struct {
}

func (*UnimplementedOpenCloseServer) GetStates(context.Context, *GetOpenCloseStatesRequest) (*OpenCloseStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (*UnimplementedOpenCloseServer) UpdateStates(context.Context, *UpdateOpenCloseStatesRequest) (*OpenCloseStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStates not implemented")
}
func (*UnimplementedOpenCloseServer) Pull(*PullOpenCloseStatesRequest, OpenClose_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (*UnimplementedOpenCloseServer) mustEmbedUnimplementedOpenCloseServer() {}

func RegisterOpenCloseServer(s *grpc.Server, srv OpenCloseServer) {
	s.RegisterService(&_OpenClose_serviceDesc, srv)
}

func _OpenClose_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenCloseStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.OpenClose/GetStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseServer).GetStates(ctx, req.(*GetOpenCloseStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenClose_UpdateStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpenCloseStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenCloseServer).UpdateStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.OpenClose/UpdateStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenCloseServer).UpdateStates(ctx, req.(*UpdateOpenCloseStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenClose_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullOpenCloseStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenCloseServer).Pull(m, &openClosePullServer{stream})
}

type OpenClose_PullServer interface {
	Send(*PullOpenCloseStatesResponse) error
	grpc.ServerStream
}

type openClosePullServer struct {
	grpc.ServerStream
}

func (x *openClosePullServer) Send(m *PullOpenCloseStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OpenClose_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.OpenClose",
	HandlerType: (*OpenCloseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStates",
			Handler:    _OpenClose_GetStates_Handler,
		},
		{
			MethodName: "UpdateStates",
			Handler:    _OpenClose_UpdateStates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _OpenClose_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/open_close.proto",
}
