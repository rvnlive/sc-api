// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: traits/enter_leave_sensor.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnterLeaveSensorApiClient is the client API for EnterLeaveSensorApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterLeaveSensorApiClient interface {
	// Subscribe to new enter or leave events.
	PullEnterLeaveEvents(ctx context.Context, in *PullEnterLeaveEventsRequest, opts ...grpc.CallOption) (EnterLeaveSensorApi_PullEnterLeaveEventsClient, error)
}

type enterLeaveSensorApiClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterLeaveSensorApiClient(cc grpc.ClientConnInterface) EnterLeaveSensorApiClient {
	return &enterLeaveSensorApiClient{cc}
}

func (c *enterLeaveSensorApiClient) PullEnterLeaveEvents(ctx context.Context, in *PullEnterLeaveEventsRequest, opts ...grpc.CallOption) (EnterLeaveSensorApi_PullEnterLeaveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnterLeaveSensorApi_ServiceDesc.Streams[0], "/smartcore.traits.EnterLeaveSensorApi/PullEnterLeaveEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &enterLeaveSensorApiPullEnterLeaveEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EnterLeaveSensorApi_PullEnterLeaveEventsClient interface {
	Recv() (*PullEnterLeaveEventsResponse, error)
	grpc.ClientStream
}

type enterLeaveSensorApiPullEnterLeaveEventsClient struct {
	grpc.ClientStream
}

func (x *enterLeaveSensorApiPullEnterLeaveEventsClient) Recv() (*PullEnterLeaveEventsResponse, error) {
	m := new(PullEnterLeaveEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnterLeaveSensorApiServer is the server API for EnterLeaveSensorApi service.
// All implementations must embed UnimplementedEnterLeaveSensorApiServer
// for forward compatibility
type EnterLeaveSensorApiServer interface {
	// Subscribe to new enter or leave events.
	PullEnterLeaveEvents(*PullEnterLeaveEventsRequest, EnterLeaveSensorApi_PullEnterLeaveEventsServer) error
	mustEmbedUnimplementedEnterLeaveSensorApiServer()
}

// UnimplementedEnterLeaveSensorApiServer must be embedded to have forward compatible implementations.
type UnimplementedEnterLeaveSensorApiServer struct {
}

func (UnimplementedEnterLeaveSensorApiServer) PullEnterLeaveEvents(*PullEnterLeaveEventsRequest, EnterLeaveSensorApi_PullEnterLeaveEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullEnterLeaveEvents not implemented")
}
func (UnimplementedEnterLeaveSensorApiServer) mustEmbedUnimplementedEnterLeaveSensorApiServer() {}

// UnsafeEnterLeaveSensorApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterLeaveSensorApiServer will
// result in compilation errors.
type UnsafeEnterLeaveSensorApiServer interface {
	mustEmbedUnimplementedEnterLeaveSensorApiServer()
}

func RegisterEnterLeaveSensorApiServer(s grpc.ServiceRegistrar, srv EnterLeaveSensorApiServer) {
	s.RegisterService(&EnterLeaveSensorApi_ServiceDesc, srv)
}

func _EnterLeaveSensorApi_PullEnterLeaveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullEnterLeaveEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnterLeaveSensorApiServer).PullEnterLeaveEvents(m, &enterLeaveSensorApiPullEnterLeaveEventsServer{stream})
}

type EnterLeaveSensorApi_PullEnterLeaveEventsServer interface {
	Send(*PullEnterLeaveEventsResponse) error
	grpc.ServerStream
}

type enterLeaveSensorApiPullEnterLeaveEventsServer struct {
	grpc.ServerStream
}

func (x *enterLeaveSensorApiPullEnterLeaveEventsServer) Send(m *PullEnterLeaveEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// EnterLeaveSensorApi_ServiceDesc is the grpc.ServiceDesc for EnterLeaveSensorApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterLeaveSensorApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.EnterLeaveSensorApi",
	HandlerType: (*EnterLeaveSensorApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullEnterLeaveEvents",
			Handler:       _EnterLeaveSensorApi_PullEnterLeaveEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/enter_leave_sensor.proto",
}

// EnterLeaveSensorInfoClient is the client API for EnterLeaveSensorInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterLeaveSensorInfoClient interface {
}

type enterLeaveSensorInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterLeaveSensorInfoClient(cc grpc.ClientConnInterface) EnterLeaveSensorInfoClient {
	return &enterLeaveSensorInfoClient{cc}
}

// EnterLeaveSensorInfoServer is the server API for EnterLeaveSensorInfo service.
// All implementations must embed UnimplementedEnterLeaveSensorInfoServer
// for forward compatibility
type EnterLeaveSensorInfoServer interface {
	mustEmbedUnimplementedEnterLeaveSensorInfoServer()
}

// UnimplementedEnterLeaveSensorInfoServer must be embedded to have forward compatible implementations.
type UnimplementedEnterLeaveSensorInfoServer struct {
}

func (UnimplementedEnterLeaveSensorInfoServer) mustEmbedUnimplementedEnterLeaveSensorInfoServer() {}

// UnsafeEnterLeaveSensorInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterLeaveSensorInfoServer will
// result in compilation errors.
type UnsafeEnterLeaveSensorInfoServer interface {
	mustEmbedUnimplementedEnterLeaveSensorInfoServer()
}

func RegisterEnterLeaveSensorInfoServer(s grpc.ServiceRegistrar, srv EnterLeaveSensorInfoServer) {
	s.RegisterService(&EnterLeaveSensorInfo_ServiceDesc, srv)
}

// EnterLeaveSensorInfo_ServiceDesc is the grpc.ServiceDesc for EnterLeaveSensorInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterLeaveSensorInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.EnterLeaveSensorInfo",
	HandlerType: (*EnterLeaveSensorInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "traits/enter_leave_sensor.proto",
}
