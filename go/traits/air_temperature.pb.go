// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: traits/air_temperature.proto

package traits

import (
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Supported modes for a device. Some of these values are used as descriptive attributes, some are used for control
type AirTemperatureMode int32

const (
	// The mode is unknown during a query. If used during a write then no change will be made, if part of a
	// read then the mode is unknown. This makes no sense as part of an attribute.
	AirTemperatureMode_UNKNOWN AirTemperatureMode = 0
	// Write-only. If the device is OFF restore it to it's previous state
	AirTemperatureMode_ON AirTemperatureMode = 1
	// Attr, read, write. The device supports, is, or should be disabled
	AirTemperatureMode_OFF AirTemperatureMode = 2
	// Attr, read, write. The device supports, is, or should be heating
	AirTemperatureMode_HEAT AirTemperatureMode = 3
	// Attr, read, write. The device supports, is, or should be cooling
	AirTemperatureMode_COOL AirTemperatureMode = 4
	// Attr, read, write. The device supports, is, or should be maintaining heating/cooling to target a specific set
	// point (and/or min + max)
	AirTemperatureMode_HEAT_COOL AirTemperatureMode = 5
	// Attr. The device supports automatic control of set points and/or schedules based on some other means (AI for
	// example)
	AirTemperatureMode_AUTO AirTemperatureMode = 6
	// Attr, read, write. The device supports, is, or should be able to use only the fan without heating/cooling elements.
	AirTemperatureMode_FAN_ONLY AirTemperatureMode = 7
	// Attr, read, write. The device supports, is, or should be in an energy saving "eco" mode
	AirTemperatureMode_ECO AirTemperatureMode = 8
	// Attr, read, write. The device supports, is, or should be in an air purifying mode
	AirTemperatureMode_PURIFIER AirTemperatureMode = 9
	// Attr, read, write. The device supports, is, or should be in an air drying mode
	AirTemperatureMode_DRY AirTemperatureMode = 10
	// Attr, read, write. The device supports, is, or should be in locked mode (i.e. not user-editable)
	AirTemperatureMode_LOCKED AirTemperatureMode = 11
)

// Enum value maps for AirTemperatureMode.
var (
	AirTemperatureMode_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ON",
		2:  "OFF",
		3:  "HEAT",
		4:  "COOL",
		5:  "HEAT_COOL",
		6:  "AUTO",
		7:  "FAN_ONLY",
		8:  "ECO",
		9:  "PURIFIER",
		10: "DRY",
		11: "LOCKED",
	}
	AirTemperatureMode_value = map[string]int32{
		"UNKNOWN":   0,
		"ON":        1,
		"OFF":       2,
		"HEAT":      3,
		"COOL":      4,
		"HEAT_COOL": 5,
		"AUTO":      6,
		"FAN_ONLY":  7,
		"ECO":       8,
		"PURIFIER":  9,
		"DRY":       10,
		"LOCKED":    11,
	}
)

func (x AirTemperatureMode) Enum() *AirTemperatureMode {
	p := new(AirTemperatureMode)
	*p = x
	return p
}

func (x AirTemperatureMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirTemperatureMode) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_air_temperature_proto_enumTypes[0].Descriptor()
}

func (AirTemperatureMode) Type() protoreflect.EnumType {
	return &file_traits_air_temperature_proto_enumTypes[0]
}

func (x AirTemperatureMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirTemperatureMode.Descriptor instead.
func (AirTemperatureMode) EnumDescriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{0}
}

// Trait.attributes message for describing this device trait.
type AirTemperatureAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How the device thinks, all communications will be in celsius but the device's native unit is this.
	NativeUnit     types.TemperatureUnit `protobuf:"varint,1,opt,name=native_unit,json=nativeUnit,proto3,enum=smartcore.api.types.TemperatureUnit" json:"native_unit,omitempty"`
	SupportedModes []AirTemperatureMode  `protobuf:"varint,2,rep,packed,name=supported_modes,json=supportedModes,proto3,enum=smartcore.traits.AirTemperatureMode" json:"supported_modes,omitempty"`
	// The minimum difference between the low and high temperatures when set using a range. 0 means unset, default to 2.
	MinRangeCelsius float64 `protobuf:"fixed64,3,opt,name=min_range_celsius,json=minRangeCelsius,proto3" json:"min_range_celsius,omitempty"`
}

func (x *AirTemperatureAttributes) Reset() {
	*x = AirTemperatureAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirTemperatureAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirTemperatureAttributes) ProtoMessage() {}

func (x *AirTemperatureAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirTemperatureAttributes.ProtoReflect.Descriptor instead.
func (*AirTemperatureAttributes) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{0}
}

func (x *AirTemperatureAttributes) GetNativeUnit() types.TemperatureUnit {
	if x != nil {
		return x.NativeUnit
	}
	return types.TemperatureUnit_CELSIUS
}

func (x *AirTemperatureAttributes) GetSupportedModes() []AirTemperatureMode {
	if x != nil {
		return x.SupportedModes
	}
	return nil
}

func (x *AirTemperatureAttributes) GetMinRangeCelsius() float64 {
	if x != nil {
		return x.MinRangeCelsius
	}
	return 0
}

// Request message for fetching device state
type GetAirTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAirTemperatureRequest) Reset() {
	*x = GetAirTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAirTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAirTemperatureRequest) ProtoMessage() {}

func (x *GetAirTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAirTemperatureRequest.ProtoReflect.Descriptor instead.
func (*GetAirTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{1}
}

func (x *GetAirTemperatureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for updating the device state
type UpdateAirTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State *AirTemperature `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	// The fields relative to state we intend to update
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateAirTemperatureRequest) Reset() {
	*x = UpdateAirTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAirTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAirTemperatureRequest) ProtoMessage() {}

func (x *UpdateAirTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAirTemperatureRequest.ProtoReflect.Descriptor instead.
func (*UpdateAirTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAirTemperatureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateAirTemperatureRequest) GetState() *AirTemperature {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *UpdateAirTemperatureRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request message for subscribing to changes in the devices state
type PullAirTemperatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PullAirTemperatureRequest) Reset() {
	*x = PullAirTemperatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullAirTemperatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullAirTemperatureRequest) ProtoMessage() {}

func (x *PullAirTemperatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullAirTemperatureRequest.ProtoReflect.Descriptor instead.
func (*PullAirTemperatureRequest) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{3}
}

func (x *PullAirTemperatureRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message enclosing device state changes
type PullAirTemperatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PullAirTemperatureResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullAirTemperatureResponse) Reset() {
	*x = PullAirTemperatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullAirTemperatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullAirTemperatureResponse) ProtoMessage() {}

func (x *PullAirTemperatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullAirTemperatureResponse.ProtoReflect.Descriptor instead.
func (*PullAirTemperatureResponse) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{4}
}

func (x *PullAirTemperatureResponse) GetChanges() []*PullAirTemperatureResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

// All the properties of the device
type AirTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current mode for the device
	Mode AirTemperatureMode `protobuf:"varint,1,opt,name=mode,proto3,enum=smartcore.traits.AirTemperatureMode" json:"mode,omitempty"`
	// Types that are assignable to TemperatureGoal:
	//	*AirTemperature_TemperatureSetPoint
	//	*AirTemperature_TemperatureSetPointDelta
	//	*AirTemperature_TemperatureRange
	TemperatureGoal isAirTemperature_TemperatureGoal `protobuf_oneof:"temperature_goal"`
	// Optional, read-only. The ambient temperature as read by the device
	AmbientTemperature *types.Temperature `protobuf:"bytes,5,opt,name=ambient_temperature,json=ambientTemperature,proto3" json:"ambient_temperature,omitempty"`
	// Optional, read-only. The ambient humidity as read by the device
	AmbientHumidity *wrappers.FloatValue `protobuf:"bytes,6,opt,name=ambient_humidity,json=ambientHumidity,proto3" json:"ambient_humidity,omitempty"`
	// Optional, read-only. The dew-point as read by the device
	DewPoint *types.Temperature `protobuf:"bytes,7,opt,name=dew_point,json=dewPoint,proto3" json:"dew_point,omitempty"`
}

func (x *AirTemperature) Reset() {
	*x = AirTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirTemperature) ProtoMessage() {}

func (x *AirTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirTemperature.ProtoReflect.Descriptor instead.
func (*AirTemperature) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{5}
}

func (x *AirTemperature) GetMode() AirTemperatureMode {
	if x != nil {
		return x.Mode
	}
	return AirTemperatureMode_UNKNOWN
}

func (m *AirTemperature) GetTemperatureGoal() isAirTemperature_TemperatureGoal {
	if m != nil {
		return m.TemperatureGoal
	}
	return nil
}

func (x *AirTemperature) GetTemperatureSetPoint() *types.Temperature {
	if x, ok := x.GetTemperatureGoal().(*AirTemperature_TemperatureSetPoint); ok {
		return x.TemperatureSetPoint
	}
	return nil
}

func (x *AirTemperature) GetTemperatureSetPointDelta() *types.Temperature {
	if x, ok := x.GetTemperatureGoal().(*AirTemperature_TemperatureSetPointDelta); ok {
		return x.TemperatureSetPointDelta
	}
	return nil
}

func (x *AirTemperature) GetTemperatureRange() *TemperatureRange {
	if x, ok := x.GetTemperatureGoal().(*AirTemperature_TemperatureRange); ok {
		return x.TemperatureRange
	}
	return nil
}

func (x *AirTemperature) GetAmbientTemperature() *types.Temperature {
	if x != nil {
		return x.AmbientTemperature
	}
	return nil
}

func (x *AirTemperature) GetAmbientHumidity() *wrappers.FloatValue {
	if x != nil {
		return x.AmbientHumidity
	}
	return nil
}

func (x *AirTemperature) GetDewPoint() *types.Temperature {
	if x != nil {
		return x.DewPoint
	}
	return nil
}

type isAirTemperature_TemperatureGoal interface {
	isAirTemperature_TemperatureGoal()
}

type AirTemperature_TemperatureSetPoint struct {
	// A target temperature for the device
	TemperatureSetPoint *types.Temperature `protobuf:"bytes,2,opt,name=temperature_set_point,json=temperatureSetPoint,proto3,oneof"`
}

type AirTemperature_TemperatureSetPointDelta struct {
	// Write-only. Set the target temperature to a value relative to the current value.
	TemperatureSetPointDelta *types.Temperature `protobuf:"bytes,3,opt,name=temperature_set_point_delta,json=temperatureSetPointDelta,proto3,oneof"`
}

type AirTemperature_TemperatureRange struct {
	// A target range for the device. Only supported when in HEAT_COOL mode
	TemperatureRange *TemperatureRange `protobuf:"bytes,4,opt,name=temperature_range,json=temperatureRange,proto3,oneof"`
}

func (*AirTemperature_TemperatureSetPoint) isAirTemperature_TemperatureGoal() {}

func (*AirTemperature_TemperatureSetPointDelta) isAirTemperature_TemperatureGoal() {}

func (*AirTemperature_TemperatureRange) isAirTemperature_TemperatureGoal() {}

// A setting for devices that target a temperature between a range.
type TemperatureRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The low threshold for the range
	Low *types.Temperature `protobuf:"bytes,1,opt,name=low,proto3" json:"low,omitempty"`
	// Required. The high threshold for the range
	High *types.Temperature `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`
	// Optional. An ideal value for cases where a device supports three set points
	Ideal *types.Temperature `protobuf:"bytes,3,opt,name=ideal,proto3" json:"ideal,omitempty"`
}

func (x *TemperatureRange) Reset() {
	*x = TemperatureRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemperatureRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemperatureRange) ProtoMessage() {}

func (x *TemperatureRange) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemperatureRange.ProtoReflect.Descriptor instead.
func (*TemperatureRange) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{6}
}

func (x *TemperatureRange) GetLow() *types.Temperature {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *TemperatureRange) GetHigh() *types.Temperature {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *TemperatureRange) GetIdeal() *types.Temperature {
	if x != nil {
		return x.Ideal
	}
	return nil
}

type PullAirTemperatureResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name for the device that issued the change
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// when the change occurred
	ChangeTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new value for the device state. Only changed fields will be set, should be merged with GetState full
	// response as required.
	State *AirTemperature `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PullAirTemperatureResponse_Change) Reset() {
	*x = PullAirTemperatureResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_temperature_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullAirTemperatureResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullAirTemperatureResponse_Change) ProtoMessage() {}

func (x *PullAirTemperatureResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_temperature_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullAirTemperatureResponse_Change.ProtoReflect.Descriptor instead.
func (*PullAirTemperatureResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_air_temperature_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PullAirTemperatureResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullAirTemperatureResponse_Change) GetChangeTime() *timestamp.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullAirTemperatureResponse_Change) GetState() *AirTemperature {
	if x != nil {
		return x.State
	}
	return nil
}

var File_traits_air_temperature_proto protoreflect.FileDescriptor

var file_traits_air_temperature_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x2f, 0x0a,
	0x19, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xff,
	0x01, 0x0a, 0x1a, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x91, 0x01, 0x0a,
	0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xc6, 0x04, 0x0a, 0x0e, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a,
	0x15, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x1b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x18,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x61,
	0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x61, 0x6d, 0x62, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x75,
	0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x65, 0x77, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x08, 0x64, 0x65, 0x77,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x34, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x64, 0x65, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x69, 0x64, 0x65, 0x61, 0x6c,
	0x2a, 0x99, 0x01, 0x0a, 0x12, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x54, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41,
	0x54, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x07,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x43, 0x4f, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x55, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x52, 0x59, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0b, 0x32, 0xd2, 0x02, 0x0a,
	0x11, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x70, 0x69, 0x12, 0x61, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e,
	0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x71,
	0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x42, 0x7b, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x42, 0x0f, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x6f, 0x73, 0x74, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x2e, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2e, 0x63, 0x6f, 0x2e, 0x75, 0x6b, 0x2f, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_air_temperature_proto_rawDescOnce sync.Once
	file_traits_air_temperature_proto_rawDescData = file_traits_air_temperature_proto_rawDesc
)

func file_traits_air_temperature_proto_rawDescGZIP() []byte {
	file_traits_air_temperature_proto_rawDescOnce.Do(func() {
		file_traits_air_temperature_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_air_temperature_proto_rawDescData)
	})
	return file_traits_air_temperature_proto_rawDescData
}

var file_traits_air_temperature_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_traits_air_temperature_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_traits_air_temperature_proto_goTypes = []interface{}{
	(AirTemperatureMode)(0),                   // 0: smartcore.traits.AirTemperatureMode
	(*AirTemperatureAttributes)(nil),          // 1: smartcore.traits.AirTemperatureAttributes
	(*GetAirTemperatureRequest)(nil),          // 2: smartcore.traits.GetAirTemperatureRequest
	(*UpdateAirTemperatureRequest)(nil),       // 3: smartcore.traits.UpdateAirTemperatureRequest
	(*PullAirTemperatureRequest)(nil),         // 4: smartcore.traits.PullAirTemperatureRequest
	(*PullAirTemperatureResponse)(nil),        // 5: smartcore.traits.PullAirTemperatureResponse
	(*AirTemperature)(nil),                    // 6: smartcore.traits.AirTemperature
	(*TemperatureRange)(nil),                  // 7: smartcore.traits.TemperatureRange
	(*PullAirTemperatureResponse_Change)(nil), // 8: smartcore.traits.PullAirTemperatureResponse.Change
	(types.TemperatureUnit)(0),                // 9: smartcore.api.types.TemperatureUnit
	(*field_mask.FieldMask)(nil),              // 10: google.protobuf.FieldMask
	(*types.Temperature)(nil),                 // 11: smartcore.api.types.Temperature
	(*wrappers.FloatValue)(nil),               // 12: google.protobuf.FloatValue
	(*timestamp.Timestamp)(nil),               // 13: google.protobuf.Timestamp
}
var file_traits_air_temperature_proto_depIdxs = []int32{
	9,  // 0: smartcore.traits.AirTemperatureAttributes.native_unit:type_name -> smartcore.api.types.TemperatureUnit
	0,  // 1: smartcore.traits.AirTemperatureAttributes.supported_modes:type_name -> smartcore.traits.AirTemperatureMode
	6,  // 2: smartcore.traits.UpdateAirTemperatureRequest.state:type_name -> smartcore.traits.AirTemperature
	10, // 3: smartcore.traits.UpdateAirTemperatureRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 4: smartcore.traits.PullAirTemperatureResponse.changes:type_name -> smartcore.traits.PullAirTemperatureResponse.Change
	0,  // 5: smartcore.traits.AirTemperature.mode:type_name -> smartcore.traits.AirTemperatureMode
	11, // 6: smartcore.traits.AirTemperature.temperature_set_point:type_name -> smartcore.api.types.Temperature
	11, // 7: smartcore.traits.AirTemperature.temperature_set_point_delta:type_name -> smartcore.api.types.Temperature
	7,  // 8: smartcore.traits.AirTemperature.temperature_range:type_name -> smartcore.traits.TemperatureRange
	11, // 9: smartcore.traits.AirTemperature.ambient_temperature:type_name -> smartcore.api.types.Temperature
	12, // 10: smartcore.traits.AirTemperature.ambient_humidity:type_name -> google.protobuf.FloatValue
	11, // 11: smartcore.traits.AirTemperature.dew_point:type_name -> smartcore.api.types.Temperature
	11, // 12: smartcore.traits.TemperatureRange.low:type_name -> smartcore.api.types.Temperature
	11, // 13: smartcore.traits.TemperatureRange.high:type_name -> smartcore.api.types.Temperature
	11, // 14: smartcore.traits.TemperatureRange.ideal:type_name -> smartcore.api.types.Temperature
	13, // 15: smartcore.traits.PullAirTemperatureResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	6,  // 16: smartcore.traits.PullAirTemperatureResponse.Change.state:type_name -> smartcore.traits.AirTemperature
	2,  // 17: smartcore.traits.AirTemperatureApi.GetAirTemperature:input_type -> smartcore.traits.GetAirTemperatureRequest
	3,  // 18: smartcore.traits.AirTemperatureApi.UpdateAirTemperature:input_type -> smartcore.traits.UpdateAirTemperatureRequest
	4,  // 19: smartcore.traits.AirTemperatureApi.PullAirTemperature:input_type -> smartcore.traits.PullAirTemperatureRequest
	6,  // 20: smartcore.traits.AirTemperatureApi.GetAirTemperature:output_type -> smartcore.traits.AirTemperature
	6,  // 21: smartcore.traits.AirTemperatureApi.UpdateAirTemperature:output_type -> smartcore.traits.AirTemperature
	5,  // 22: smartcore.traits.AirTemperatureApi.PullAirTemperature:output_type -> smartcore.traits.PullAirTemperatureResponse
	20, // [20:23] is the sub-list for method output_type
	17, // [17:20] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_traits_air_temperature_proto_init() }
func file_traits_air_temperature_proto_init() {
	if File_traits_air_temperature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_air_temperature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirTemperatureAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAirTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAirTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullAirTemperatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullAirTemperatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemperatureRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_temperature_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullAirTemperatureResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_traits_air_temperature_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AirTemperature_TemperatureSetPoint)(nil),
		(*AirTemperature_TemperatureSetPointDelta)(nil),
		(*AirTemperature_TemperatureRange)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_air_temperature_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_traits_air_temperature_proto_goTypes,
		DependencyIndexes: file_traits_air_temperature_proto_depIdxs,
		EnumInfos:         file_traits_air_temperature_proto_enumTypes,
		MessageInfos:      file_traits_air_temperature_proto_msgTypes,
	}.Build()
	File_traits_air_temperature_proto = out.File
	file_traits_air_temperature_proto_rawDesc = nil
	file_traits_air_temperature_proto_goTypes = nil
	file_traits_air_temperature_proto_depIdxs = nil
}
