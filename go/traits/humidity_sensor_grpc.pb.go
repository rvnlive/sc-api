// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HumiditySensorClient is the client API for HumiditySensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HumiditySensorClient interface {
	// Get the current humidity state for the device.
	GetHumidity(ctx context.Context, in *GetHumidityRequest, opts ...grpc.CallOption) (*Humidity, error)
	// subscribe to changes in the humidity state for the device.
	PullHumidity(ctx context.Context, in *PullHumidityRequest, opts ...grpc.CallOption) (HumiditySensor_PullHumidityClient, error)
}

type humiditySensorClient struct {
	cc grpc.ClientConnInterface
}

func NewHumiditySensorClient(cc grpc.ClientConnInterface) HumiditySensorClient {
	return &humiditySensorClient{cc}
}

func (c *humiditySensorClient) GetHumidity(ctx context.Context, in *GetHumidityRequest, opts ...grpc.CallOption) (*Humidity, error) {
	out := new(Humidity)
	err := c.cc.Invoke(ctx, "/smartcore.traits.HumiditySensor/GetHumidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *humiditySensorClient) PullHumidity(ctx context.Context, in *PullHumidityRequest, opts ...grpc.CallOption) (HumiditySensor_PullHumidityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HumiditySensor_serviceDesc.Streams[0], "/smartcore.traits.HumiditySensor/PullHumidity", opts...)
	if err != nil {
		return nil, err
	}
	x := &humiditySensorPullHumidityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HumiditySensor_PullHumidityClient interface {
	Recv() (*PullHumidityResponse, error)
	grpc.ClientStream
}

type humiditySensorPullHumidityClient struct {
	grpc.ClientStream
}

func (x *humiditySensorPullHumidityClient) Recv() (*PullHumidityResponse, error) {
	m := new(PullHumidityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HumiditySensorServer is the server API for HumiditySensor service.
// All implementations must embed UnimplementedHumiditySensorServer
// for forward compatibility
type HumiditySensorServer interface {
	// Get the current humidity state for the device.
	GetHumidity(context.Context, *GetHumidityRequest) (*Humidity, error)
	// subscribe to changes in the humidity state for the device.
	PullHumidity(*PullHumidityRequest, HumiditySensor_PullHumidityServer) error
	mustEmbedUnimplementedHumiditySensorServer()
}

// UnimplementedHumiditySensorServer must be embedded to have forward compatible implementations.
type UnimplementedHumiditySensorServer struct {
}

func (*UnimplementedHumiditySensorServer) GetHumidity(context.Context, *GetHumidityRequest) (*Humidity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHumidity not implemented")
}
func (*UnimplementedHumiditySensorServer) PullHumidity(*PullHumidityRequest, HumiditySensor_PullHumidityServer) error {
	return status.Errorf(codes.Unimplemented, "method PullHumidity not implemented")
}
func (*UnimplementedHumiditySensorServer) mustEmbedUnimplementedHumiditySensorServer() {}

func RegisterHumiditySensorServer(s *grpc.Server, srv HumiditySensorServer) {
	s.RegisterService(&_HumiditySensor_serviceDesc, srv)
}

func _HumiditySensor_GetHumidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHumidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HumiditySensorServer).GetHumidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.HumiditySensor/GetHumidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HumiditySensorServer).GetHumidity(ctx, req.(*GetHumidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HumiditySensor_PullHumidity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullHumidityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HumiditySensorServer).PullHumidity(m, &humiditySensorPullHumidityServer{stream})
}

type HumiditySensor_PullHumidityServer interface {
	Send(*PullHumidityResponse) error
	grpc.ServerStream
}

type humiditySensorPullHumidityServer struct {
	grpc.ServerStream
}

func (x *humiditySensorPullHumidityServer) Send(m *PullHumidityResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _HumiditySensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.HumiditySensor",
	HandlerType: (*HumiditySensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHumidity",
			Handler:    _HumiditySensor_GetHumidity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullHumidity",
			Handler:       _HumiditySensor_PullHumidity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/humidity_sensor.proto",
}
