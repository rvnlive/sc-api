// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AirQualitySensorClient is the client API for AirQualitySensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirQualitySensorClient interface {
	// Get the current state of all reading this device supports
	GetState(ctx context.Context, in *GetAirQualityStateRequest, opts ...grpc.CallOption) (*AirQualityState, error)
	// Be notified of changes to any reading
	PullState(ctx context.Context, in *PullAirQualityStateRequest, opts ...grpc.CallOption) (AirQualitySensor_PullStateClient, error)
}

type airQualitySensorClient struct {
	cc grpc.ClientConnInterface
}

func NewAirQualitySensorClient(cc grpc.ClientConnInterface) AirQualitySensorClient {
	return &airQualitySensorClient{cc}
}

func (c *airQualitySensorClient) GetState(ctx context.Context, in *GetAirQualityStateRequest, opts ...grpc.CallOption) (*AirQualityState, error) {
	out := new(AirQualityState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.AirQualitySensor/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualitySensorClient) PullState(ctx context.Context, in *PullAirQualityStateRequest, opts ...grpc.CallOption) (AirQualitySensor_PullStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AirQualitySensor_serviceDesc.Streams[0], "/smartcore.traits.AirQualitySensor/PullState", opts...)
	if err != nil {
		return nil, err
	}
	x := &airQualitySensorPullStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirQualitySensor_PullStateClient interface {
	Recv() (*PullAirQualityStateResponse, error)
	grpc.ClientStream
}

type airQualitySensorPullStateClient struct {
	grpc.ClientStream
}

func (x *airQualitySensorPullStateClient) Recv() (*PullAirQualityStateResponse, error) {
	m := new(PullAirQualityStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirQualitySensorServer is the server API for AirQualitySensor service.
// All implementations must embed UnimplementedAirQualitySensorServer
// for forward compatibility
type AirQualitySensorServer interface {
	// Get the current state of all reading this device supports
	GetState(context.Context, *GetAirQualityStateRequest) (*AirQualityState, error)
	// Be notified of changes to any reading
	PullState(*PullAirQualityStateRequest, AirQualitySensor_PullStateServer) error
	mustEmbedUnimplementedAirQualitySensorServer()
}

// UnimplementedAirQualitySensorServer must be embedded to have forward compatible implementations.
type UnimplementedAirQualitySensorServer struct {
}

func (*UnimplementedAirQualitySensorServer) GetState(context.Context, *GetAirQualityStateRequest) (*AirQualityState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedAirQualitySensorServer) PullState(*PullAirQualityStateRequest, AirQualitySensor_PullStateServer) error {
	return status.Errorf(codes.Unimplemented, "method PullState not implemented")
}
func (*UnimplementedAirQualitySensorServer) mustEmbedUnimplementedAirQualitySensorServer() {}

func RegisterAirQualitySensorServer(s *grpc.Server, srv AirQualitySensorServer) {
	s.RegisterService(&_AirQualitySensor_serviceDesc, srv)
}

func _AirQualitySensor_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirQualityStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualitySensorServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.AirQualitySensor/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualitySensorServer).GetState(ctx, req.(*GetAirQualityStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualitySensor_PullState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAirQualityStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirQualitySensorServer).PullState(m, &airQualitySensorPullStateServer{stream})
}

type AirQualitySensor_PullStateServer interface {
	Send(*PullAirQualityStateResponse) error
	grpc.ServerStream
}

type airQualitySensorPullStateServer struct {
	grpc.ServerStream
}

func (x *airQualitySensorPullStateServer) Send(m *PullAirQualityStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AirQualitySensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.AirQualitySensor",
	HandlerType: (*AirQualitySensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _AirQualitySensor_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullState",
			Handler:       _AirQualitySensor_PullState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/air_quality_sensor.proto",
}
