// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AirQualitySensorApiClient is the client API for AirQualitySensorApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirQualitySensorApiClient interface {
	// Get the current state of all reading this device supports
	GetAirQuality(ctx context.Context, in *GetAirQualityRequest, opts ...grpc.CallOption) (*AirQuality, error)
	// Be notified of changes to any reading
	PullAirQuality(ctx context.Context, in *PullAirQualityRequest, opts ...grpc.CallOption) (AirQualitySensorApi_PullAirQualityClient, error)
}

type airQualitySensorApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAirQualitySensorApiClient(cc grpc.ClientConnInterface) AirQualitySensorApiClient {
	return &airQualitySensorApiClient{cc}
}

func (c *airQualitySensorApiClient) GetAirQuality(ctx context.Context, in *GetAirQualityRequest, opts ...grpc.CallOption) (*AirQuality, error) {
	out := new(AirQuality)
	err := c.cc.Invoke(ctx, "/smartcore.traits.AirQualitySensorApi/GetAirQuality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airQualitySensorApiClient) PullAirQuality(ctx context.Context, in *PullAirQualityRequest, opts ...grpc.CallOption) (AirQualitySensorApi_PullAirQualityClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AirQualitySensorApi_serviceDesc.Streams[0], "/smartcore.traits.AirQualitySensorApi/PullAirQuality", opts...)
	if err != nil {
		return nil, err
	}
	x := &airQualitySensorApiPullAirQualityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AirQualitySensorApi_PullAirQualityClient interface {
	Recv() (*PullAirQualityResponse, error)
	grpc.ClientStream
}

type airQualitySensorApiPullAirQualityClient struct {
	grpc.ClientStream
}

func (x *airQualitySensorApiPullAirQualityClient) Recv() (*PullAirQualityResponse, error) {
	m := new(PullAirQualityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AirQualitySensorApiServer is the server API for AirQualitySensorApi service.
// All implementations must embed UnimplementedAirQualitySensorApiServer
// for forward compatibility
type AirQualitySensorApiServer interface {
	// Get the current state of all reading this device supports
	GetAirQuality(context.Context, *GetAirQualityRequest) (*AirQuality, error)
	// Be notified of changes to any reading
	PullAirQuality(*PullAirQualityRequest, AirQualitySensorApi_PullAirQualityServer) error
	mustEmbedUnimplementedAirQualitySensorApiServer()
}

// UnimplementedAirQualitySensorApiServer must be embedded to have forward compatible implementations.
type UnimplementedAirQualitySensorApiServer struct {
}

func (*UnimplementedAirQualitySensorApiServer) GetAirQuality(context.Context, *GetAirQualityRequest) (*AirQuality, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirQuality not implemented")
}
func (*UnimplementedAirQualitySensorApiServer) PullAirQuality(*PullAirQualityRequest, AirQualitySensorApi_PullAirQualityServer) error {
	return status.Errorf(codes.Unimplemented, "method PullAirQuality not implemented")
}
func (*UnimplementedAirQualitySensorApiServer) mustEmbedUnimplementedAirQualitySensorApiServer() {}

func RegisterAirQualitySensorApiServer(s *grpc.Server, srv AirQualitySensorApiServer) {
	s.RegisterService(&_AirQualitySensorApi_serviceDesc, srv)
}

func _AirQualitySensorApi_GetAirQuality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirQualityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirQualitySensorApiServer).GetAirQuality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.AirQualitySensorApi/GetAirQuality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirQualitySensorApiServer).GetAirQuality(ctx, req.(*GetAirQualityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirQualitySensorApi_PullAirQuality_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullAirQualityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AirQualitySensorApiServer).PullAirQuality(m, &airQualitySensorApiPullAirQualityServer{stream})
}

type AirQualitySensorApi_PullAirQualityServer interface {
	Send(*PullAirQualityResponse) error
	grpc.ServerStream
}

type airQualitySensorApiPullAirQualityServer struct {
	grpc.ServerStream
}

func (x *airQualitySensorApiPullAirQualityServer) Send(m *PullAirQualityResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _AirQualitySensorApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.AirQualitySensorApi",
	HandlerType: (*AirQualitySensorApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirQuality",
			Handler:    _AirQualitySensorApi_GetAirQuality_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullAirQuality",
			Handler:       _AirQualitySensorApi_PullAirQuality_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/air_quality_sensor.proto",
}
