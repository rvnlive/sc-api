// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: traits/electric.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElectricApiClient is the client API for ElectricApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectricApiClient interface {
	// GetDemand returns the current electricity demand for the device.
	GetDemand(ctx context.Context, in *GetDemandRequest, opts ...grpc.CallOption) (*ElectricDemand, error)
	// PullDemand returns a stream of changes to the current electricity demand for the device.
	PullDemand(ctx context.Context, in *PullDemandRequest, opts ...grpc.CallOption) (ElectricApi_PullDemandClient, error)
	GetActiveMode(ctx context.Context, in *GetActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error)
	// Configure the device to use the given mode.
	// The id of the given mode should match a known mode for the device.
	UpdateActiveMode(ctx context.Context, in *UpdateActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error)
	// ClearActiveMode instructs the device to discard any external mode selection, typically by applying the normal
	// operation mode for the device.
	ClearActiveMode(ctx context.Context, in *ClearActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error)
	PullActiveMode(ctx context.Context, in *PullActiveModeRequest, opts ...grpc.CallOption) (ElectricApi_PullActiveModeClient, error)
	// ListModes lists all electric modes for a device
	ListModes(ctx context.Context, in *ListModesRequest, opts ...grpc.CallOption) (*ListModesResponse, error)
	// PullModes returns a stream of changes to the list of supported modes for the device.
	PullModes(ctx context.Context, in *PullModesRequest, opts ...grpc.CallOption) (ElectricApi_PullModesClient, error)
}

type electricApiClient struct {
	cc grpc.ClientConnInterface
}

func NewElectricApiClient(cc grpc.ClientConnInterface) ElectricApiClient {
	return &electricApiClient{cc}
}

func (c *electricApiClient) GetDemand(ctx context.Context, in *GetDemandRequest, opts ...grpc.CallOption) (*ElectricDemand, error) {
	out := new(ElectricDemand)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ElectricApi/GetDemand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) PullDemand(ctx context.Context, in *PullDemandRequest, opts ...grpc.CallOption) (ElectricApi_PullDemandClient, error) {
	stream, err := c.cc.NewStream(ctx, &ElectricApi_ServiceDesc.Streams[0], "/smartcore.traits.ElectricApi/PullDemand", opts...)
	if err != nil {
		return nil, err
	}
	x := &electricApiPullDemandClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ElectricApi_PullDemandClient interface {
	Recv() (*PullDemandResponse, error)
	grpc.ClientStream
}

type electricApiPullDemandClient struct {
	grpc.ClientStream
}

func (x *electricApiPullDemandClient) Recv() (*PullDemandResponse, error) {
	m := new(PullDemandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *electricApiClient) GetActiveMode(ctx context.Context, in *GetActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error) {
	out := new(ElectricMode)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ElectricApi/GetActiveMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) UpdateActiveMode(ctx context.Context, in *UpdateActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error) {
	out := new(ElectricMode)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ElectricApi/UpdateActiveMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) ClearActiveMode(ctx context.Context, in *ClearActiveModeRequest, opts ...grpc.CallOption) (*ElectricMode, error) {
	out := new(ElectricMode)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ElectricApi/ClearActiveMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) PullActiveMode(ctx context.Context, in *PullActiveModeRequest, opts ...grpc.CallOption) (ElectricApi_PullActiveModeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ElectricApi_ServiceDesc.Streams[1], "/smartcore.traits.ElectricApi/PullActiveMode", opts...)
	if err != nil {
		return nil, err
	}
	x := &electricApiPullActiveModeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ElectricApi_PullActiveModeClient interface {
	Recv() (*PullActiveModeResponse, error)
	grpc.ClientStream
}

type electricApiPullActiveModeClient struct {
	grpc.ClientStream
}

func (x *electricApiPullActiveModeClient) Recv() (*PullActiveModeResponse, error) {
	m := new(PullActiveModeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *electricApiClient) ListModes(ctx context.Context, in *ListModesRequest, opts ...grpc.CallOption) (*ListModesResponse, error) {
	out := new(ListModesResponse)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ElectricApi/ListModes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electricApiClient) PullModes(ctx context.Context, in *PullModesRequest, opts ...grpc.CallOption) (ElectricApi_PullModesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ElectricApi_ServiceDesc.Streams[2], "/smartcore.traits.ElectricApi/PullModes", opts...)
	if err != nil {
		return nil, err
	}
	x := &electricApiPullModesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ElectricApi_PullModesClient interface {
	Recv() (*PullModesResponse, error)
	grpc.ClientStream
}

type electricApiPullModesClient struct {
	grpc.ClientStream
}

func (x *electricApiPullModesClient) Recv() (*PullModesResponse, error) {
	m := new(PullModesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ElectricApiServer is the server API for ElectricApi service.
// All implementations must embed UnimplementedElectricApiServer
// for forward compatibility
type ElectricApiServer interface {
	// GetDemand returns the current electricity demand for the device.
	GetDemand(context.Context, *GetDemandRequest) (*ElectricDemand, error)
	// PullDemand returns a stream of changes to the current electricity demand for the device.
	PullDemand(*PullDemandRequest, ElectricApi_PullDemandServer) error
	GetActiveMode(context.Context, *GetActiveModeRequest) (*ElectricMode, error)
	// Configure the device to use the given mode.
	// The id of the given mode should match a known mode for the device.
	UpdateActiveMode(context.Context, *UpdateActiveModeRequest) (*ElectricMode, error)
	// ClearActiveMode instructs the device to discard any external mode selection, typically by applying the normal
	// operation mode for the device.
	ClearActiveMode(context.Context, *ClearActiveModeRequest) (*ElectricMode, error)
	PullActiveMode(*PullActiveModeRequest, ElectricApi_PullActiveModeServer) error
	// ListModes lists all electric modes for a device
	ListModes(context.Context, *ListModesRequest) (*ListModesResponse, error)
	// PullModes returns a stream of changes to the list of supported modes for the device.
	PullModes(*PullModesRequest, ElectricApi_PullModesServer) error
	mustEmbedUnimplementedElectricApiServer()
}

// UnimplementedElectricApiServer must be embedded to have forward compatible implementations.
type UnimplementedElectricApiServer struct {
}

func (UnimplementedElectricApiServer) GetDemand(context.Context, *GetDemandRequest) (*ElectricDemand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemand not implemented")
}
func (UnimplementedElectricApiServer) PullDemand(*PullDemandRequest, ElectricApi_PullDemandServer) error {
	return status.Errorf(codes.Unimplemented, "method PullDemand not implemented")
}
func (UnimplementedElectricApiServer) GetActiveMode(context.Context, *GetActiveModeRequest) (*ElectricMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveMode not implemented")
}
func (UnimplementedElectricApiServer) UpdateActiveMode(context.Context, *UpdateActiveModeRequest) (*ElectricMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActiveMode not implemented")
}
func (UnimplementedElectricApiServer) ClearActiveMode(context.Context, *ClearActiveModeRequest) (*ElectricMode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearActiveMode not implemented")
}
func (UnimplementedElectricApiServer) PullActiveMode(*PullActiveModeRequest, ElectricApi_PullActiveModeServer) error {
	return status.Errorf(codes.Unimplemented, "method PullActiveMode not implemented")
}
func (UnimplementedElectricApiServer) ListModes(context.Context, *ListModesRequest) (*ListModesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModes not implemented")
}
func (UnimplementedElectricApiServer) PullModes(*PullModesRequest, ElectricApi_PullModesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullModes not implemented")
}
func (UnimplementedElectricApiServer) mustEmbedUnimplementedElectricApiServer() {}

// UnsafeElectricApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectricApiServer will
// result in compilation errors.
type UnsafeElectricApiServer interface {
	mustEmbedUnimplementedElectricApiServer()
}

func RegisterElectricApiServer(s grpc.ServiceRegistrar, srv ElectricApiServer) {
	s.RegisterService(&ElectricApi_ServiceDesc, srv)
}

func _ElectricApi_GetDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).GetDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ElectricApi/GetDemand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).GetDemand(ctx, req.(*GetDemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_PullDemand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDemandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectricApiServer).PullDemand(m, &electricApiPullDemandServer{stream})
}

type ElectricApi_PullDemandServer interface {
	Send(*PullDemandResponse) error
	grpc.ServerStream
}

type electricApiPullDemandServer struct {
	grpc.ServerStream
}

func (x *electricApiPullDemandServer) Send(m *PullDemandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ElectricApi_GetActiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).GetActiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ElectricApi/GetActiveMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).GetActiveMode(ctx, req.(*GetActiveModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_UpdateActiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActiveModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).UpdateActiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ElectricApi/UpdateActiveMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).UpdateActiveMode(ctx, req.(*UpdateActiveModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_ClearActiveMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearActiveModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).ClearActiveMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ElectricApi/ClearActiveMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).ClearActiveMode(ctx, req.(*ClearActiveModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_PullActiveMode_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullActiveModeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectricApiServer).PullActiveMode(m, &electricApiPullActiveModeServer{stream})
}

type ElectricApi_PullActiveModeServer interface {
	Send(*PullActiveModeResponse) error
	grpc.ServerStream
}

type electricApiPullActiveModeServer struct {
	grpc.ServerStream
}

func (x *electricApiPullActiveModeServer) Send(m *PullActiveModeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ElectricApi_ListModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectricApiServer).ListModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ElectricApi/ListModes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectricApiServer).ListModes(ctx, req.(*ListModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElectricApi_PullModes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullModesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElectricApiServer).PullModes(m, &electricApiPullModesServer{stream})
}

type ElectricApi_PullModesServer interface {
	Send(*PullModesResponse) error
	grpc.ServerStream
}

type electricApiPullModesServer struct {
	grpc.ServerStream
}

func (x *electricApiPullModesServer) Send(m *PullModesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ElectricApi_ServiceDesc is the grpc.ServiceDesc for ElectricApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectricApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ElectricApi",
	HandlerType: (*ElectricApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDemand",
			Handler:    _ElectricApi_GetDemand_Handler,
		},
		{
			MethodName: "GetActiveMode",
			Handler:    _ElectricApi_GetActiveMode_Handler,
		},
		{
			MethodName: "UpdateActiveMode",
			Handler:    _ElectricApi_UpdateActiveMode_Handler,
		},
		{
			MethodName: "ClearActiveMode",
			Handler:    _ElectricApi_ClearActiveMode_Handler,
		},
		{
			MethodName: "ListModes",
			Handler:    _ElectricApi_ListModes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullDemand",
			Handler:       _ElectricApi_PullDemand_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullActiveMode",
			Handler:       _ElectricApi_PullActiveMode_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PullModes",
			Handler:       _ElectricApi_PullModes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/electric.proto",
}

// ElectricInfoClient is the client API for ElectricInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectricInfoClient interface {
}

type electricInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewElectricInfoClient(cc grpc.ClientConnInterface) ElectricInfoClient {
	return &electricInfoClient{cc}
}

// ElectricInfoServer is the server API for ElectricInfo service.
// All implementations must embed UnimplementedElectricInfoServer
// for forward compatibility
type ElectricInfoServer interface {
	mustEmbedUnimplementedElectricInfoServer()
}

// UnimplementedElectricInfoServer must be embedded to have forward compatible implementations.
type UnimplementedElectricInfoServer struct {
}

func (UnimplementedElectricInfoServer) mustEmbedUnimplementedElectricInfoServer() {}

// UnsafeElectricInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectricInfoServer will
// result in compilation errors.
type UnsafeElectricInfoServer interface {
	mustEmbedUnimplementedElectricInfoServer()
}

func RegisterElectricInfoServer(s grpc.ServiceRegistrar, srv ElectricInfoServer) {
	s.RegisterService(&ElectricInfo_ServiceDesc, srv)
}

// ElectricInfo_ServiceDesc is the grpc.ServiceDesc for ElectricInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElectricInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ElectricInfo",
	HandlerType: (*ElectricInfoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "traits/electric.proto",
}
