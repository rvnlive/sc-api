// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PtzApiClient is the client API for PtzApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PtzApiClient interface {
	// Set the target state for the device
	GetPtzState(ctx context.Context, in *GetPtzStateRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Set the target state for the device
	UpdatePtzState(ctx context.Context, in *UpdatePtzStateRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(ctx context.Context, in *StopPtzRequest, opts ...grpc.CallOption) (*PtzState, error)
	// Create a preset for the ptz position. If no preset ptz position is specified then use the current position
	CreatePreset(ctx context.Context, in *CreatePtzPresetRequest, opts ...grpc.CallOption) (*PtzPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullPtzStates(ctx context.Context, in *PullPtzStatesRequest, opts ...grpc.CallOption) (PtzApi_PullPtzStatesClient, error)
}

type ptzApiClient struct {
	cc grpc.ClientConnInterface
}

func NewPtzApiClient(cc grpc.ClientConnInterface) PtzApiClient {
	return &ptzApiClient{cc}
}

func (c *ptzApiClient) GetPtzState(ctx context.Context, in *GetPtzStateRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.PtzApi/GetPtzState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzApiClient) UpdatePtzState(ctx context.Context, in *UpdatePtzStateRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.PtzApi/UpdatePtzState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzApiClient) Stop(ctx context.Context, in *StopPtzRequest, opts ...grpc.CallOption) (*PtzState, error) {
	out := new(PtzState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.PtzApi/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzApiClient) CreatePreset(ctx context.Context, in *CreatePtzPresetRequest, opts ...grpc.CallOption) (*PtzPreset, error) {
	out := new(PtzPreset)
	err := c.cc.Invoke(ctx, "/smartcore.traits.PtzApi/CreatePreset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ptzApiClient) PullPtzStates(ctx context.Context, in *PullPtzStatesRequest, opts ...grpc.CallOption) (PtzApi_PullPtzStatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PtzApi_serviceDesc.Streams[0], "/smartcore.traits.PtzApi/PullPtzStates", opts...)
	if err != nil {
		return nil, err
	}
	x := &ptzApiPullPtzStatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PtzApi_PullPtzStatesClient interface {
	Recv() (*PullPtzStatesResponse, error)
	grpc.ClientStream
}

type ptzApiPullPtzStatesClient struct {
	grpc.ClientStream
}

func (x *ptzApiPullPtzStatesClient) Recv() (*PullPtzStatesResponse, error) {
	m := new(PullPtzStatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PtzApiServer is the server API for PtzApi service.
// All implementations must embed UnimplementedPtzApiServer
// for forward compatibility
type PtzApiServer interface {
	// Set the target state for the device
	GetPtzState(context.Context, *GetPtzStateRequest) (*PtzState, error)
	// Set the target state for the device
	UpdatePtzState(context.Context, *UpdatePtzStateRequest) (*PtzState, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(context.Context, *StopPtzRequest) (*PtzState, error)
	// Create a preset for the ptz position. If no preset ptz position is specified then use the current position
	CreatePreset(context.Context, *CreatePtzPresetRequest) (*PtzPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullPtzStates(*PullPtzStatesRequest, PtzApi_PullPtzStatesServer) error
	mustEmbedUnimplementedPtzApiServer()
}

// UnimplementedPtzApiServer must be embedded to have forward compatible implementations.
type UnimplementedPtzApiServer struct {
}

func (*UnimplementedPtzApiServer) GetPtzState(context.Context, *GetPtzStateRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPtzState not implemented")
}
func (*UnimplementedPtzApiServer) UpdatePtzState(context.Context, *UpdatePtzStateRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePtzState not implemented")
}
func (*UnimplementedPtzApiServer) Stop(context.Context, *StopPtzRequest) (*PtzState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedPtzApiServer) CreatePreset(context.Context, *CreatePtzPresetRequest) (*PtzPreset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePreset not implemented")
}
func (*UnimplementedPtzApiServer) PullPtzStates(*PullPtzStatesRequest, PtzApi_PullPtzStatesServer) error {
	return status.Errorf(codes.Unimplemented, "method PullPtzStates not implemented")
}
func (*UnimplementedPtzApiServer) mustEmbedUnimplementedPtzApiServer() {}

func RegisterPtzApiServer(s *grpc.Server, srv PtzApiServer) {
	s.RegisterService(&_PtzApi_serviceDesc, srv)
}

func _PtzApi_GetPtzState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPtzStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzApiServer).GetPtzState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.PtzApi/GetPtzState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzApiServer).GetPtzState(ctx, req.(*GetPtzStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PtzApi_UpdatePtzState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePtzStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzApiServer).UpdatePtzState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.PtzApi/UpdatePtzState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzApiServer).UpdatePtzState(ctx, req.(*UpdatePtzStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PtzApi_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPtzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzApiServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.PtzApi/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzApiServer).Stop(ctx, req.(*StopPtzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PtzApi_CreatePreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePtzPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PtzApiServer).CreatePreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.PtzApi/CreatePreset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PtzApiServer).CreatePreset(ctx, req.(*CreatePtzPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PtzApi_PullPtzStates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullPtzStatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PtzApiServer).PullPtzStates(m, &ptzApiPullPtzStatesServer{stream})
}

type PtzApi_PullPtzStatesServer interface {
	Send(*PullPtzStatesResponse) error
	grpc.ServerStream
}

type ptzApiPullPtzStatesServer struct {
	grpc.ServerStream
}

func (x *ptzApiPullPtzStatesServer) Send(m *PullPtzStatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PtzApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.PtzApi",
	HandlerType: (*PtzApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPtzState",
			Handler:    _PtzApi_GetPtzState_Handler,
		},
		{
			MethodName: "UpdatePtzState",
			Handler:    _PtzApi_UpdatePtzState_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _PtzApi_Stop_Handler,
		},
		{
			MethodName: "CreatePreset",
			Handler:    _PtzApi_CreatePreset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullPtzStates",
			Handler:       _PtzApi_PullPtzStates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/ptz.proto",
}
