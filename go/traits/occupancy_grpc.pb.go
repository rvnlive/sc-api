// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OccupancyApiClient is the client API for OccupancyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OccupancyApiClient interface {
	// Get the current motion state for the device.
	GetOccupancy(ctx context.Context, in *GetOccupancyRequest, opts ...grpc.CallOption) (*Occupancy, error)
	// subscribe to changes in the motion state for the device.
	PullOccupancy(ctx context.Context, in *PullOccupancyRequest, opts ...grpc.CallOption) (OccupancyApi_PullOccupancyClient, error)
}

type occupancyApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOccupancyApiClient(cc grpc.ClientConnInterface) OccupancyApiClient {
	return &occupancyApiClient{cc}
}

func (c *occupancyApiClient) GetOccupancy(ctx context.Context, in *GetOccupancyRequest, opts ...grpc.CallOption) (*Occupancy, error) {
	out := new(Occupancy)
	err := c.cc.Invoke(ctx, "/smartcore.traits.OccupancyApi/GetOccupancy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *occupancyApiClient) PullOccupancy(ctx context.Context, in *PullOccupancyRequest, opts ...grpc.CallOption) (OccupancyApi_PullOccupancyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OccupancyApi_serviceDesc.Streams[0], "/smartcore.traits.OccupancyApi/PullOccupancy", opts...)
	if err != nil {
		return nil, err
	}
	x := &occupancyApiPullOccupancyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OccupancyApi_PullOccupancyClient interface {
	Recv() (*PullOccupancyResponse, error)
	grpc.ClientStream
}

type occupancyApiPullOccupancyClient struct {
	grpc.ClientStream
}

func (x *occupancyApiPullOccupancyClient) Recv() (*PullOccupancyResponse, error) {
	m := new(PullOccupancyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OccupancyApiServer is the server API for OccupancyApi service.
// All implementations must embed UnimplementedOccupancyApiServer
// for forward compatibility
type OccupancyApiServer interface {
	// Get the current motion state for the device.
	GetOccupancy(context.Context, *GetOccupancyRequest) (*Occupancy, error)
	// subscribe to changes in the motion state for the device.
	PullOccupancy(*PullOccupancyRequest, OccupancyApi_PullOccupancyServer) error
	mustEmbedUnimplementedOccupancyApiServer()
}

// UnimplementedOccupancyApiServer must be embedded to have forward compatible implementations.
type UnimplementedOccupancyApiServer struct {
}

func (*UnimplementedOccupancyApiServer) GetOccupancy(context.Context, *GetOccupancyRequest) (*Occupancy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccupancy not implemented")
}
func (*UnimplementedOccupancyApiServer) PullOccupancy(*PullOccupancyRequest, OccupancyApi_PullOccupancyServer) error {
	return status.Errorf(codes.Unimplemented, "method PullOccupancy not implemented")
}
func (*UnimplementedOccupancyApiServer) mustEmbedUnimplementedOccupancyApiServer() {}

func RegisterOccupancyApiServer(s *grpc.Server, srv OccupancyApiServer) {
	s.RegisterService(&_OccupancyApi_serviceDesc, srv)
}

func _OccupancyApi_GetOccupancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccupancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OccupancyApiServer).GetOccupancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.OccupancyApi/GetOccupancy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OccupancyApiServer).GetOccupancy(ctx, req.(*GetOccupancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OccupancyApi_PullOccupancy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullOccupancyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OccupancyApiServer).PullOccupancy(m, &occupancyApiPullOccupancyServer{stream})
}

type OccupancyApi_PullOccupancyServer interface {
	Send(*PullOccupancyResponse) error
	grpc.ServerStream
}

type occupancyApiPullOccupancyServer struct {
	grpc.ServerStream
}

func (x *occupancyApiPullOccupancyServer) Send(m *PullOccupancyResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _OccupancyApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.OccupancyApi",
	HandlerType: (*OccupancyApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOccupancy",
			Handler:    _OccupancyApi_GetOccupancy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullOccupancy",
			Handler:       _OccupancyApi_PullOccupancy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/occupancy.proto",
}
