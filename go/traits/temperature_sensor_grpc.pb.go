// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TemperatureSensorClient is the client API for TemperatureSensor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemperatureSensorClient interface {
	// Get the current temperature state for the device.
	GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*types.Temperature, error)
	// subscribe to changes in the temperature state for the device.
	PullTemperature(ctx context.Context, in *PullTemperatureRequest, opts ...grpc.CallOption) (TemperatureSensor_PullTemperatureClient, error)
}

type temperatureSensorClient struct {
	cc grpc.ClientConnInterface
}

func NewTemperatureSensorClient(cc grpc.ClientConnInterface) TemperatureSensorClient {
	return &temperatureSensorClient{cc}
}

func (c *temperatureSensorClient) GetTemperature(ctx context.Context, in *GetTemperatureRequest, opts ...grpc.CallOption) (*types.Temperature, error) {
	out := new(types.Temperature)
	err := c.cc.Invoke(ctx, "/smartcore.traits.TemperatureSensor/GetTemperature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *temperatureSensorClient) PullTemperature(ctx context.Context, in *PullTemperatureRequest, opts ...grpc.CallOption) (TemperatureSensor_PullTemperatureClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TemperatureSensor_serviceDesc.Streams[0], "/smartcore.traits.TemperatureSensor/PullTemperature", opts...)
	if err != nil {
		return nil, err
	}
	x := &temperatureSensorPullTemperatureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemperatureSensor_PullTemperatureClient interface {
	Recv() (*PullTemperatureResponse, error)
	grpc.ClientStream
}

type temperatureSensorPullTemperatureClient struct {
	grpc.ClientStream
}

func (x *temperatureSensorPullTemperatureClient) Recv() (*PullTemperatureResponse, error) {
	m := new(PullTemperatureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemperatureSensorServer is the server API for TemperatureSensor service.
// All implementations must embed UnimplementedTemperatureSensorServer
// for forward compatibility
type TemperatureSensorServer interface {
	// Get the current temperature state for the device.
	GetTemperature(context.Context, *GetTemperatureRequest) (*types.Temperature, error)
	// subscribe to changes in the temperature state for the device.
	PullTemperature(*PullTemperatureRequest, TemperatureSensor_PullTemperatureServer) error
	mustEmbedUnimplementedTemperatureSensorServer()
}

// UnimplementedTemperatureSensorServer must be embedded to have forward compatible implementations.
type UnimplementedTemperatureSensorServer struct {
}

func (*UnimplementedTemperatureSensorServer) GetTemperature(context.Context, *GetTemperatureRequest) (*types.Temperature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemperature not implemented")
}
func (*UnimplementedTemperatureSensorServer) PullTemperature(*PullTemperatureRequest, TemperatureSensor_PullTemperatureServer) error {
	return status.Errorf(codes.Unimplemented, "method PullTemperature not implemented")
}
func (*UnimplementedTemperatureSensorServer) mustEmbedUnimplementedTemperatureSensorServer() {}

func RegisterTemperatureSensorServer(s *grpc.Server, srv TemperatureSensorServer) {
	s.RegisterService(&_TemperatureSensor_serviceDesc, srv)
}

func _TemperatureSensor_GetTemperature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemperatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemperatureSensorServer).GetTemperature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.TemperatureSensor/GetTemperature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemperatureSensorServer).GetTemperature(ctx, req.(*GetTemperatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemperatureSensor_PullTemperature_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullTemperatureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemperatureSensorServer).PullTemperature(m, &temperatureSensorPullTemperatureServer{stream})
}

type TemperatureSensor_PullTemperatureServer interface {
	Send(*PullTemperatureResponse) error
	grpc.ServerStream
}

type temperatureSensorPullTemperatureServer struct {
	grpc.ServerStream
}

func (x *temperatureSensorPullTemperatureServer) Send(m *PullTemperatureResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TemperatureSensor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.TemperatureSensor",
	HandlerType: (*TemperatureSensorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTemperature",
			Handler:    _TemperatureSensor_GetTemperature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullTemperature",
			Handler:       _TemperatureSensor_PullTemperature_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/temperature_sensor.proto",
}
