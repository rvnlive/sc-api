// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: traits/air_quality_sensor.proto

package traits

import (
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// AirQualityComfort encodes levels of comfort for an area.
type AirQualityComfort int32

const (
	// The comfort level is unknown
	AirQualityComfort_AIR_QUALITY_COMFORT_UNKNOWN AirQualityComfort = 0
	// The area should be comfortable for occupants
	AirQualityComfort_AIR_QUALITY_COMFORT_COMFORTABLE AirQualityComfort = 1
	// The area might be uncomfortable for occupants
	AirQualityComfort_AIR_QUALITY_COMFORT_UNCOMFORTABLE AirQualityComfort = 2
)

// Enum value maps for AirQualityComfort.
var (
	AirQualityComfort_name = map[int32]string{
		0: "AIR_QUALITY_COMFORT_UNKNOWN",
		1: "AIR_QUALITY_COMFORT_COMFORTABLE",
		2: "AIR_QUALITY_COMFORT_UNCOMFORTABLE",
	}
	AirQualityComfort_value = map[string]int32{
		"AIR_QUALITY_COMFORT_UNKNOWN":       0,
		"AIR_QUALITY_COMFORT_COMFORTABLE":   1,
		"AIR_QUALITY_COMFORT_UNCOMFORTABLE": 2,
	}
)

func (x AirQualityComfort) Enum() *AirQualityComfort {
	p := new(AirQualityComfort)
	*p = x
	return p
}

func (x AirQualityComfort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AirQualityComfort) Descriptor() protoreflect.EnumDescriptor {
	return file_traits_air_quality_sensor_proto_enumTypes[0].Descriptor()
}

func (AirQualityComfort) Type() protoreflect.EnumType {
	return &file_traits_air_quality_sensor_proto_enumTypes[0]
}

func (x AirQualityComfort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AirQualityComfort.Descriptor instead.
func (AirQualityComfort) EnumDescriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{0}
}

// Trait.attribute describing capabilities of the AirQuality device
type AirQualitySensorAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If present then the sensor supports reporting CO2 levels, in parts-per-million.
	CarbonDioxideLevel *types.FloatBounds `protobuf:"bytes,1,opt,name=carbon_dioxide_level,json=carbonDioxideLevel,proto3" json:"carbon_dioxide_level,omitempty"`
	// If present then the sensor supports reporting volatile organic compounds, in parts-per-million.
	VolatileOrganicCompounds *types.FloatBounds `protobuf:"bytes,2,opt,name=volatile_organic_compounds,json=volatileOrganicCompounds,proto3" json:"volatile_organic_compounds,omitempty"`
	// If present then the sensor supports reporting air pressure, in hPa.
	AirPressure *types.FloatBounds `protobuf:"bytes,3,opt,name=air_pressure,json=airPressure,proto3" json:"air_pressure,omitempty"`
	// If non-empty then the sensor supports reporting a general comfort reading of any of the provided types.
	// Unknown should be assumed to be present if supported.
	Comfort []AirQualityComfort `protobuf:"varint,4,rep,packed,name=comfort,proto3,enum=smartcore.traits.AirQualityComfort" json:"comfort,omitempty"`
}

func (x *AirQualitySensorAttributes) Reset() {
	*x = AirQualitySensorAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_quality_sensor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirQualitySensorAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirQualitySensorAttributes) ProtoMessage() {}

func (x *AirQualitySensorAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_quality_sensor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirQualitySensorAttributes.ProtoReflect.Descriptor instead.
func (*AirQualitySensorAttributes) Descriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *AirQualitySensorAttributes) GetCarbonDioxideLevel() *types.FloatBounds {
	if x != nil {
		return x.CarbonDioxideLevel
	}
	return nil
}

func (x *AirQualitySensorAttributes) GetVolatileOrganicCompounds() *types.FloatBounds {
	if x != nil {
		return x.VolatileOrganicCompounds
	}
	return nil
}

func (x *AirQualitySensorAttributes) GetAirPressure() *types.FloatBounds {
	if x != nil {
		return x.AirPressure
	}
	return nil
}

func (x *AirQualitySensorAttributes) GetComfort() []AirQualityComfort {
	if x != nil {
		return x.Comfort
	}
	return nil
}

// AirQuality holds the value of all supported sensors.
type AirQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CO2 level in parts per million
	CarbonDioxideLevel *wrappers.FloatValue `protobuf:"bytes,1,opt,name=carbon_dioxide_level,json=carbonDioxideLevel,proto3" json:"carbon_dioxide_level,omitempty"`
	// The VOC level in parts per million
	VolatileOrganicCompounds *wrappers.FloatValue `protobuf:"bytes,2,opt,name=volatile_organic_compounds,json=volatileOrganicCompounds,proto3" json:"volatile_organic_compounds,omitempty"`
	// The air pressure in hPa
	AirPressure *wrappers.FloatValue `protobuf:"bytes,3,opt,name=air_pressure,json=airPressure,proto3" json:"air_pressure,omitempty"`
	// General comfort of the area
	Comfort AirQualityComfort `protobuf:"varint,4,opt,name=comfort,proto3,enum=smartcore.traits.AirQualityComfort" json:"comfort,omitempty"`
}

func (x *AirQuality) Reset() {
	*x = AirQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_quality_sensor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AirQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AirQuality) ProtoMessage() {}

func (x *AirQuality) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_quality_sensor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AirQuality.ProtoReflect.Descriptor instead.
func (*AirQuality) Descriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *AirQuality) GetCarbonDioxideLevel() *wrappers.FloatValue {
	if x != nil {
		return x.CarbonDioxideLevel
	}
	return nil
}

func (x *AirQuality) GetVolatileOrganicCompounds() *wrappers.FloatValue {
	if x != nil {
		return x.VolatileOrganicCompounds
	}
	return nil
}

func (x *AirQuality) GetAirPressure() *wrappers.FloatValue {
	if x != nil {
		return x.AirPressure
	}
	return nil
}

func (x *AirQuality) GetComfort() AirQualityComfort {
	if x != nil {
		return x.Comfort
	}
	return AirQualityComfort_AIR_QUALITY_COMFORT_UNKNOWN
}

type GetAirQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to request state from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state fields to fetch
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *GetAirQualityRequest) Reset() {
	*x = GetAirQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_quality_sensor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAirQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAirQualityRequest) ProtoMessage() {}

func (x *GetAirQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_quality_sensor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAirQualityRequest.ProtoReflect.Descriptor instead.
func (*GetAirQualityRequest) Descriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{2}
}

func (x *GetAirQualityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetAirQualityRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type PullAirQualityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device to request state from
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The state fields to pull
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *PullAirQualityRequest) Reset() {
	*x = PullAirQualityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_quality_sensor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullAirQualityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullAirQualityRequest) ProtoMessage() {}

func (x *PullAirQualityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_quality_sensor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullAirQualityRequest.ProtoReflect.Descriptor instead.
func (*PullAirQualityRequest) Descriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{3}
}

func (x *PullAirQualityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullAirQualityRequest) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type PullAirQualityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PullAirQualityResponse_Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PullAirQualityResponse) Reset() {
	*x = PullAirQualityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_quality_sensor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullAirQualityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullAirQualityResponse) ProtoMessage() {}

func (x *PullAirQualityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_quality_sensor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullAirQualityResponse.ProtoReflect.Descriptor instead.
func (*PullAirQualityResponse) Descriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{4}
}

func (x *PullAirQualityResponse) GetChanges() []*PullAirQualityResponse_Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

type PullAirQualityResponse_Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the device that has changed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The time the change happened.
	ChangeTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=change_time,json=changeTime,proto3" json:"change_time,omitempty"`
	// The new state of the sensor. Changed fields should be reported via the update_mask property.
	AirQuality *AirQuality `protobuf:"bytes,3,opt,name=air_quality,json=airQuality,proto3" json:"air_quality,omitempty"`
	// The state fields that have changed.
	UpdateMask *field_mask.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *PullAirQualityResponse_Change) Reset() {
	*x = PullAirQualityResponse_Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_traits_air_quality_sensor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullAirQualityResponse_Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullAirQualityResponse_Change) ProtoMessage() {}

func (x *PullAirQualityResponse_Change) ProtoReflect() protoreflect.Message {
	mi := &file_traits_air_quality_sensor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullAirQualityResponse_Change.ProtoReflect.Descriptor instead.
func (*PullAirQualityResponse_Change) Descriptor() ([]byte, []int) {
	return file_traits_air_quality_sensor_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PullAirQualityResponse_Change) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PullAirQualityResponse_Change) GetChangeTime() *timestamp.Timestamp {
	if x != nil {
		return x.ChangeTime
	}
	return nil
}

func (x *PullAirQualityResponse_Change) GetAirQuality() *AirQuality {
	if x != nil {
		return x.AirQuality
	}
	return nil
}

func (x *PullAirQualityResponse_Change) GetUpdateMask() *field_mask.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

var File_traits_air_quality_sensor_proto protoreflect.FileDescriptor

var file_traits_air_quality_sensor_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2f, 0x61, 0x69, 0x72, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x74, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x02, 0x0a, 0x1a, 0x41,
	0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x14, 0x63, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6f, 0x78, 0x69, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x12, 0x63, 0x61, 0x72, 0x62, 0x6f,
	0x6e, 0x44, 0x69, 0x6f, 0x78, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5e, 0x0a,
	0x1a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x18, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x43, 0x0a,
	0x0c, 0x61, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x0b, 0x61, 0x69, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x72,
	0x74, 0x22, 0xb5, 0x02, 0x0a, 0x0a, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x62, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x6f, 0x78, 0x69,
	0x64, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x63, 0x61, 0x72,
	0x62, 0x6f, 0x6e, 0x44, 0x69, 0x6f, 0x78, 0x69, 0x64, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x59, 0x0a, 0x1a, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x18, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x69,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61,
	0x69, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41,
	0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x22, 0x67, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x22, 0x68, 0x0a, 0x15, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xbb, 0x02, 0x0a,
	0x16, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x1a, 0xd5, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x61, 0x69, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x61, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x2a, 0x80, 0x01, 0x0a, 0x11, 0x41,
	0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x49, 0x52, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x49, 0x52, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x49, 0x52, 0x5f, 0x51, 0x55,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e,
	0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x32, 0xc9, 0x01,
	0x0a, 0x13, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x41, 0x70, 0x69, 0x12, 0x50, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x41, 0x69, 0x72,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x7b, 0x0a, 0x14, 0x64, 0x65, 0x76,
	0x2e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x74,
	0x73, 0x42, 0x0f, 0x41, 0x69, 0x72, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x2e, 0x76, 0x61, 0x6e, 0x74, 0x69, 0x2e,
	0x63, 0x6f, 0x2e, 0x75, 0x6b, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x73, 0x63, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x73,
	0xaa, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x69, 0x74, 0x73, 0xca, 0x02, 0x10, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x72, 0x65, 0x5c,
	0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_traits_air_quality_sensor_proto_rawDescOnce sync.Once
	file_traits_air_quality_sensor_proto_rawDescData = file_traits_air_quality_sensor_proto_rawDesc
)

func file_traits_air_quality_sensor_proto_rawDescGZIP() []byte {
	file_traits_air_quality_sensor_proto_rawDescOnce.Do(func() {
		file_traits_air_quality_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(file_traits_air_quality_sensor_proto_rawDescData)
	})
	return file_traits_air_quality_sensor_proto_rawDescData
}

var file_traits_air_quality_sensor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_traits_air_quality_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_traits_air_quality_sensor_proto_goTypes = []interface{}{
	(AirQualityComfort)(0),                // 0: smartcore.traits.AirQualityComfort
	(*AirQualitySensorAttributes)(nil),    // 1: smartcore.traits.AirQualitySensorAttributes
	(*AirQuality)(nil),                    // 2: smartcore.traits.AirQuality
	(*GetAirQualityRequest)(nil),          // 3: smartcore.traits.GetAirQualityRequest
	(*PullAirQualityRequest)(nil),         // 4: smartcore.traits.PullAirQualityRequest
	(*PullAirQualityResponse)(nil),        // 5: smartcore.traits.PullAirQualityResponse
	(*PullAirQualityResponse_Change)(nil), // 6: smartcore.traits.PullAirQualityResponse.Change
	(*types.FloatBounds)(nil),             // 7: smartcore.api.types.FloatBounds
	(*wrappers.FloatValue)(nil),           // 8: google.protobuf.FloatValue
	(*field_mask.FieldMask)(nil),          // 9: google.protobuf.FieldMask
	(*timestamp.Timestamp)(nil),           // 10: google.protobuf.Timestamp
}
var file_traits_air_quality_sensor_proto_depIdxs = []int32{
	7,  // 0: smartcore.traits.AirQualitySensorAttributes.carbon_dioxide_level:type_name -> smartcore.api.types.FloatBounds
	7,  // 1: smartcore.traits.AirQualitySensorAttributes.volatile_organic_compounds:type_name -> smartcore.api.types.FloatBounds
	7,  // 2: smartcore.traits.AirQualitySensorAttributes.air_pressure:type_name -> smartcore.api.types.FloatBounds
	0,  // 3: smartcore.traits.AirQualitySensorAttributes.comfort:type_name -> smartcore.traits.AirQualityComfort
	8,  // 4: smartcore.traits.AirQuality.carbon_dioxide_level:type_name -> google.protobuf.FloatValue
	8,  // 5: smartcore.traits.AirQuality.volatile_organic_compounds:type_name -> google.protobuf.FloatValue
	8,  // 6: smartcore.traits.AirQuality.air_pressure:type_name -> google.protobuf.FloatValue
	0,  // 7: smartcore.traits.AirQuality.comfort:type_name -> smartcore.traits.AirQualityComfort
	9,  // 8: smartcore.traits.GetAirQualityRequest.update_mask:type_name -> google.protobuf.FieldMask
	9,  // 9: smartcore.traits.PullAirQualityRequest.update_mask:type_name -> google.protobuf.FieldMask
	6,  // 10: smartcore.traits.PullAirQualityResponse.changes:type_name -> smartcore.traits.PullAirQualityResponse.Change
	10, // 11: smartcore.traits.PullAirQualityResponse.Change.change_time:type_name -> google.protobuf.Timestamp
	2,  // 12: smartcore.traits.PullAirQualityResponse.Change.air_quality:type_name -> smartcore.traits.AirQuality
	9,  // 13: smartcore.traits.PullAirQualityResponse.Change.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 14: smartcore.traits.AirQualitySensorApi.GetState:input_type -> smartcore.traits.GetAirQualityRequest
	4,  // 15: smartcore.traits.AirQualitySensorApi.PullState:input_type -> smartcore.traits.PullAirQualityRequest
	2,  // 16: smartcore.traits.AirQualitySensorApi.GetState:output_type -> smartcore.traits.AirQuality
	5,  // 17: smartcore.traits.AirQualitySensorApi.PullState:output_type -> smartcore.traits.PullAirQualityResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_traits_air_quality_sensor_proto_init() }
func file_traits_air_quality_sensor_proto_init() {
	if File_traits_air_quality_sensor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_traits_air_quality_sensor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirQualitySensorAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_quality_sensor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AirQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_quality_sensor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAirQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_quality_sensor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullAirQualityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_quality_sensor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullAirQualityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_traits_air_quality_sensor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullAirQualityResponse_Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_traits_air_quality_sensor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_traits_air_quality_sensor_proto_goTypes,
		DependencyIndexes: file_traits_air_quality_sensor_proto_depIdxs,
		EnumInfos:         file_traits_air_quality_sensor_proto_enumTypes,
		MessageInfos:      file_traits_air_quality_sensor_proto_msgTypes,
	}.Build()
	File_traits_air_quality_sensor_proto = out.File
	file_traits_air_quality_sensor_proto_rawDesc = nil
	file_traits_air_quality_sensor_proto_goTypes = nil
	file_traits_air_quality_sensor_proto_depIdxs = nil
}
