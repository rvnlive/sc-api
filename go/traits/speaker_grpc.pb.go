// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	types "git.vanti.co.uk/smartcore/sc-api/go/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpeakerClient is the client API for Speaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeakerClient interface {
	// Get the current state of the volume for the device
	GetVolume(ctx context.Context, in *GetSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error)
	// update the volume state for the device
	UpdateVolume(ctx context.Context, in *UpdateSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error)
	PullVolume(ctx context.Context, in *PullSpeakerVolumeRequest, opts ...grpc.CallOption) (Speaker_PullVolumeClient, error)
}

type speakerClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeakerClient(cc grpc.ClientConnInterface) SpeakerClient {
	return &speakerClient{cc}
}

func (c *speakerClient) GetVolume(ctx context.Context, in *GetSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error) {
	out := new(types.Volume)
	err := c.cc.Invoke(ctx, "/smartcore.traits.Speaker/GetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerClient) UpdateVolume(ctx context.Context, in *UpdateSpeakerVolumeRequest, opts ...grpc.CallOption) (*types.Volume, error) {
	out := new(types.Volume)
	err := c.cc.Invoke(ctx, "/smartcore.traits.Speaker/UpdateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speakerClient) PullVolume(ctx context.Context, in *PullSpeakerVolumeRequest, opts ...grpc.CallOption) (Speaker_PullVolumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Speaker_serviceDesc.Streams[0], "/smartcore.traits.Speaker/PullVolume", opts...)
	if err != nil {
		return nil, err
	}
	x := &speakerPullVolumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Speaker_PullVolumeClient interface {
	Recv() (*PullSpeakerVolumeResponse, error)
	grpc.ClientStream
}

type speakerPullVolumeClient struct {
	grpc.ClientStream
}

func (x *speakerPullVolumeClient) Recv() (*PullSpeakerVolumeResponse, error) {
	m := new(PullSpeakerVolumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeakerServer is the server API for Speaker service.
// All implementations must embed UnimplementedSpeakerServer
// for forward compatibility
type SpeakerServer interface {
	// Get the current state of the volume for the device
	GetVolume(context.Context, *GetSpeakerVolumeRequest) (*types.Volume, error)
	// update the volume state for the device
	UpdateVolume(context.Context, *UpdateSpeakerVolumeRequest) (*types.Volume, error)
	PullVolume(*PullSpeakerVolumeRequest, Speaker_PullVolumeServer) error
	mustEmbedUnimplementedSpeakerServer()
}

// UnimplementedSpeakerServer must be embedded to have forward compatible implementations.
type UnimplementedSpeakerServer struct {
}

func (*UnimplementedSpeakerServer) GetVolume(context.Context, *GetSpeakerVolumeRequest) (*types.Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolume not implemented")
}
func (*UnimplementedSpeakerServer) UpdateVolume(context.Context, *UpdateSpeakerVolumeRequest) (*types.Volume, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVolume not implemented")
}
func (*UnimplementedSpeakerServer) PullVolume(*PullSpeakerVolumeRequest, Speaker_PullVolumeServer) error {
	return status.Errorf(codes.Unimplemented, "method PullVolume not implemented")
}
func (*UnimplementedSpeakerServer) mustEmbedUnimplementedSpeakerServer() {}

func RegisterSpeakerServer(s *grpc.Server, srv SpeakerServer) {
	s.RegisterService(&_Speaker_serviceDesc, srv)
}

func _Speaker_GetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeakerVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).GetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.Speaker/GetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).GetVolume(ctx, req.(*GetSpeakerVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_UpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpeakerVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeakerServer).UpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.Speaker/UpdateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeakerServer).UpdateVolume(ctx, req.(*UpdateSpeakerVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speaker_PullVolume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullSpeakerVolumeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpeakerServer).PullVolume(m, &speakerPullVolumeServer{stream})
}

type Speaker_PullVolumeServer interface {
	Send(*PullSpeakerVolumeResponse) error
	grpc.ServerStream
}

type speakerPullVolumeServer struct {
	grpc.ServerStream
}

func (x *speakerPullVolumeServer) Send(m *PullSpeakerVolumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Speaker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.Speaker",
	HandlerType: (*SpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVolume",
			Handler:    _Speaker_GetVolume_Handler,
		},
		{
			MethodName: "UpdateVolume",
			Handler:    _Speaker_UpdateVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullVolume",
			Handler:       _Speaker_PullVolume_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/speaker.proto",
}
