// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: traits/extend_retract.proto

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExtendRetractApiClient is the client API for ExtendRetractApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtendRetractApiClient interface {
	// Set the target state for the device
	GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*Extension, error)
	// Set the target state for the device
	UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*Extension, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(ctx context.Context, in *ExtendRetractStopRequest, opts ...grpc.CallOption) (*Extension, error)
	// Create a preset for the extension. If no preset extension value is specified then use the current position
	CreateExtensionPreset(ctx context.Context, in *CreateExtensionPresetRequest, opts ...grpc.CallOption) (*ExtensionPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullExtensions(ctx context.Context, in *PullExtensionsRequest, opts ...grpc.CallOption) (ExtendRetractApi_PullExtensionsClient, error)
}

type extendRetractApiClient struct {
	cc grpc.ClientConnInterface
}

func NewExtendRetractApiClient(cc grpc.ClientConnInterface) ExtendRetractApiClient {
	return &extendRetractApiClient{cc}
}

func (c *extendRetractApiClient) GetExtension(ctx context.Context, in *GetExtensionRequest, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ExtendRetractApi/GetExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) UpdateExtension(ctx context.Context, in *UpdateExtensionRequest, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ExtendRetractApi/UpdateExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) Stop(ctx context.Context, in *ExtendRetractStopRequest, opts ...grpc.CallOption) (*Extension, error) {
	out := new(Extension)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ExtendRetractApi/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) CreateExtensionPreset(ctx context.Context, in *CreateExtensionPresetRequest, opts ...grpc.CallOption) (*ExtensionPreset, error) {
	out := new(ExtensionPreset)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ExtendRetractApi/CreateExtensionPreset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extendRetractApiClient) PullExtensions(ctx context.Context, in *PullExtensionsRequest, opts ...grpc.CallOption) (ExtendRetractApi_PullExtensionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExtendRetractApi_ServiceDesc.Streams[0], "/smartcore.traits.ExtendRetractApi/PullExtensions", opts...)
	if err != nil {
		return nil, err
	}
	x := &extendRetractApiPullExtensionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExtendRetractApi_PullExtensionsClient interface {
	Recv() (*PullExtensionsResponse, error)
	grpc.ClientStream
}

type extendRetractApiPullExtensionsClient struct {
	grpc.ClientStream
}

func (x *extendRetractApiPullExtensionsClient) Recv() (*PullExtensionsResponse, error) {
	m := new(PullExtensionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExtendRetractApiServer is the server API for ExtendRetractApi service.
// All implementations must embed UnimplementedExtendRetractApiServer
// for forward compatibility
type ExtendRetractApiServer interface {
	// Set the target state for the device
	GetExtension(context.Context, *GetExtensionRequest) (*Extension, error)
	// Set the target state for the device
	UpdateExtension(context.Context, *UpdateExtensionRequest) (*Extension, error)
	// Stop the device if it is extending or retracting, returns the current known state after stopping.
	Stop(context.Context, *ExtendRetractStopRequest) (*Extension, error)
	// Create a preset for the extension. If no preset extension value is specified then use the current position
	CreateExtensionPreset(context.Context, *CreateExtensionPresetRequest) (*ExtensionPreset, error)
	// Get notified of changes to the OnOffState of a device
	PullExtensions(*PullExtensionsRequest, ExtendRetractApi_PullExtensionsServer) error
	mustEmbedUnimplementedExtendRetractApiServer()
}

// UnimplementedExtendRetractApiServer must be embedded to have forward compatible implementations.
type UnimplementedExtendRetractApiServer struct {
}

func (UnimplementedExtendRetractApiServer) GetExtension(context.Context, *GetExtensionRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtension not implemented")
}
func (UnimplementedExtendRetractApiServer) UpdateExtension(context.Context, *UpdateExtensionRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtension not implemented")
}
func (UnimplementedExtendRetractApiServer) Stop(context.Context, *ExtendRetractStopRequest) (*Extension, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedExtendRetractApiServer) CreateExtensionPreset(context.Context, *CreateExtensionPresetRequest) (*ExtensionPreset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtensionPreset not implemented")
}
func (UnimplementedExtendRetractApiServer) PullExtensions(*PullExtensionsRequest, ExtendRetractApi_PullExtensionsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullExtensions not implemented")
}
func (UnimplementedExtendRetractApiServer) mustEmbedUnimplementedExtendRetractApiServer() {}

// UnsafeExtendRetractApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtendRetractApiServer will
// result in compilation errors.
type UnsafeExtendRetractApiServer interface {
	mustEmbedUnimplementedExtendRetractApiServer()
}

func RegisterExtendRetractApiServer(s grpc.ServiceRegistrar, srv ExtendRetractApiServer) {
	s.RegisterService(&ExtendRetractApi_ServiceDesc, srv)
}

func _ExtendRetractApi_GetExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).GetExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ExtendRetractApi/GetExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).GetExtension(ctx, req.(*GetExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_UpdateExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).UpdateExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ExtendRetractApi/UpdateExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).UpdateExtension(ctx, req.(*UpdateExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendRetractStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ExtendRetractApi/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).Stop(ctx, req.(*ExtendRetractStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_CreateExtensionPreset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtensionPresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractApiServer).CreateExtensionPreset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ExtendRetractApi/CreateExtensionPreset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractApiServer).CreateExtensionPreset(ctx, req.(*CreateExtensionPresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExtendRetractApi_PullExtensions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullExtensionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExtendRetractApiServer).PullExtensions(m, &extendRetractApiPullExtensionsServer{stream})
}

type ExtendRetractApi_PullExtensionsServer interface {
	Send(*PullExtensionsResponse) error
	grpc.ServerStream
}

type extendRetractApiPullExtensionsServer struct {
	grpc.ServerStream
}

func (x *extendRetractApiPullExtensionsServer) Send(m *PullExtensionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ExtendRetractApi_ServiceDesc is the grpc.ServiceDesc for ExtendRetractApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtendRetractApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ExtendRetractApi",
	HandlerType: (*ExtendRetractApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExtension",
			Handler:    _ExtendRetractApi_GetExtension_Handler,
		},
		{
			MethodName: "UpdateExtension",
			Handler:    _ExtendRetractApi_UpdateExtension_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ExtendRetractApi_Stop_Handler,
		},
		{
			MethodName: "CreateExtensionPreset",
			Handler:    _ExtendRetractApi_CreateExtensionPreset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullExtensions",
			Handler:       _ExtendRetractApi_PullExtensions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/extend_retract.proto",
}

// ExtendRetractInfoClient is the client API for ExtendRetractInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtendRetractInfoClient interface {
	// Get information about how a named device implements Extension features
	DescribeExtension(ctx context.Context, in *DescribeExtensionRequest, opts ...grpc.CallOption) (*ExtensionSupport, error)
}

type extendRetractInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewExtendRetractInfoClient(cc grpc.ClientConnInterface) ExtendRetractInfoClient {
	return &extendRetractInfoClient{cc}
}

func (c *extendRetractInfoClient) DescribeExtension(ctx context.Context, in *DescribeExtensionRequest, opts ...grpc.CallOption) (*ExtensionSupport, error) {
	out := new(ExtensionSupport)
	err := c.cc.Invoke(ctx, "/smartcore.traits.ExtendRetractInfo/DescribeExtension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtendRetractInfoServer is the server API for ExtendRetractInfo service.
// All implementations must embed UnimplementedExtendRetractInfoServer
// for forward compatibility
type ExtendRetractInfoServer interface {
	// Get information about how a named device implements Extension features
	DescribeExtension(context.Context, *DescribeExtensionRequest) (*ExtensionSupport, error)
	mustEmbedUnimplementedExtendRetractInfoServer()
}

// UnimplementedExtendRetractInfoServer must be embedded to have forward compatible implementations.
type UnimplementedExtendRetractInfoServer struct {
}

func (UnimplementedExtendRetractInfoServer) DescribeExtension(context.Context, *DescribeExtensionRequest) (*ExtensionSupport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeExtension not implemented")
}
func (UnimplementedExtendRetractInfoServer) mustEmbedUnimplementedExtendRetractInfoServer() {}

// UnsafeExtendRetractInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtendRetractInfoServer will
// result in compilation errors.
type UnsafeExtendRetractInfoServer interface {
	mustEmbedUnimplementedExtendRetractInfoServer()
}

func RegisterExtendRetractInfoServer(s grpc.ServiceRegistrar, srv ExtendRetractInfoServer) {
	s.RegisterService(&ExtendRetractInfo_ServiceDesc, srv)
}

func _ExtendRetractInfo_DescribeExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeExtensionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtendRetractInfoServer).DescribeExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.ExtendRetractInfo/DescribeExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtendRetractInfoServer).DescribeExtension(ctx, req.(*DescribeExtensionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtendRetractInfo_ServiceDesc is the grpc.ServiceDesc for ExtendRetractInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtendRetractInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.ExtendRetractInfo",
	HandlerType: (*ExtendRetractInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DescribeExtension",
			Handler:    _ExtendRetractInfo_DescribeExtension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "traits/extend_retract.proto",
}
