// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ThermostatClient is the client API for Thermostat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThermostatClient interface {
	// Get the current state of the thermostat
	GetState(ctx context.Context, in *GetThermostatStateRequest, opts ...grpc.CallOption) (*ThermostatState, error)
	// Update the target state for the thermostat. the returned state may not be complete but will indicate at least the
	// current values for any set fields as part of the request.
	UpdateState(ctx context.Context, in *UpdateThermostatStateRequest, opts ...grpc.CallOption) (*ThermostatState, error)
	// Request notification of change to the thermostat state. The messages in the response stream may not be complete
	// but will indicate the changes as they occur. They should be merged with the full state as fetched by the GetState
	// method.
	PullState(ctx context.Context, in *PullThermostatStateRequest, opts ...grpc.CallOption) (Thermostat_PullStateClient, error)
}

type thermostatClient struct {
	cc grpc.ClientConnInterface
}

func NewThermostatClient(cc grpc.ClientConnInterface) ThermostatClient {
	return &thermostatClient{cc}
}

func (c *thermostatClient) GetState(ctx context.Context, in *GetThermostatStateRequest, opts ...grpc.CallOption) (*ThermostatState, error) {
	out := new(ThermostatState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.Thermostat/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thermostatClient) UpdateState(ctx context.Context, in *UpdateThermostatStateRequest, opts ...grpc.CallOption) (*ThermostatState, error) {
	out := new(ThermostatState)
	err := c.cc.Invoke(ctx, "/smartcore.traits.Thermostat/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thermostatClient) PullState(ctx context.Context, in *PullThermostatStateRequest, opts ...grpc.CallOption) (Thermostat_PullStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Thermostat_serviceDesc.Streams[0], "/smartcore.traits.Thermostat/PullState", opts...)
	if err != nil {
		return nil, err
	}
	x := &thermostatPullStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Thermostat_PullStateClient interface {
	Recv() (*PullThermostatStateResponse, error)
	grpc.ClientStream
}

type thermostatPullStateClient struct {
	grpc.ClientStream
}

func (x *thermostatPullStateClient) Recv() (*PullThermostatStateResponse, error) {
	m := new(PullThermostatStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThermostatServer is the server API for Thermostat service.
// All implementations must embed UnimplementedThermostatServer
// for forward compatibility
type ThermostatServer interface {
	// Get the current state of the thermostat
	GetState(context.Context, *GetThermostatStateRequest) (*ThermostatState, error)
	// Update the target state for the thermostat. the returned state may not be complete but will indicate at least the
	// current values for any set fields as part of the request.
	UpdateState(context.Context, *UpdateThermostatStateRequest) (*ThermostatState, error)
	// Request notification of change to the thermostat state. The messages in the response stream may not be complete
	// but will indicate the changes as they occur. They should be merged with the full state as fetched by the GetState
	// method.
	PullState(*PullThermostatStateRequest, Thermostat_PullStateServer) error
	mustEmbedUnimplementedThermostatServer()
}

// UnimplementedThermostatServer must be embedded to have forward compatible implementations.
type UnimplementedThermostatServer struct {
}

func (*UnimplementedThermostatServer) GetState(context.Context, *GetThermostatStateRequest) (*ThermostatState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (*UnimplementedThermostatServer) UpdateState(context.Context, *UpdateThermostatStateRequest) (*ThermostatState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (*UnimplementedThermostatServer) PullState(*PullThermostatStateRequest, Thermostat_PullStateServer) error {
	return status.Errorf(codes.Unimplemented, "method PullState not implemented")
}
func (*UnimplementedThermostatServer) mustEmbedUnimplementedThermostatServer() {}

func RegisterThermostatServer(s *grpc.Server, srv ThermostatServer) {
	s.RegisterService(&_Thermostat_serviceDesc, srv)
}

func _Thermostat_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThermostatStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThermostatServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.Thermostat/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThermostatServer).GetState(ctx, req.(*GetThermostatStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thermostat_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThermostatStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThermostatServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.Thermostat/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThermostatServer).UpdateState(ctx, req.(*UpdateThermostatStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thermostat_PullState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullThermostatStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThermostatServer).PullState(m, &thermostatPullStateServer{stream})
}

type Thermostat_PullStateServer interface {
	Send(*PullThermostatStateResponse) error
	grpc.ServerStream
}

type thermostatPullStateServer struct {
	grpc.ServerStream
}

func (x *thermostatPullStateServer) Send(m *PullThermostatStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Thermostat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.Thermostat",
	HandlerType: (*ThermostatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _Thermostat_GetState_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _Thermostat_UpdateState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullState",
			Handler:       _Thermostat_PullState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/thermostat.proto",
}
