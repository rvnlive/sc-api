// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package traits

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RangeApiClient is the client API for RangeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeApiClient interface {
	// request that the range value be changes
	UpdateRangeValue(ctx context.Context, in *UpdateRangeValueRequest, opts ...grpc.CallOption) (*RangeValue, error)
	// get the current value of the range
	GetRangeValue(ctx context.Context, in *GetRangeValueRequest, opts ...grpc.CallOption) (*RangeValue, error)
	// request updates to changes in the range value
	PullRangeValue(ctx context.Context, in *PullRangeValueRequest, opts ...grpc.CallOption) (RangeApi_PullRangeValueClient, error)
}

type rangeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeApiClient(cc grpc.ClientConnInterface) RangeApiClient {
	return &rangeApiClient{cc}
}

func (c *rangeApiClient) UpdateRangeValue(ctx context.Context, in *UpdateRangeValueRequest, opts ...grpc.CallOption) (*RangeValue, error) {
	out := new(RangeValue)
	err := c.cc.Invoke(ctx, "/smartcore.traits.RangeApi/UpdateRangeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rangeApiClient) GetRangeValue(ctx context.Context, in *GetRangeValueRequest, opts ...grpc.CallOption) (*RangeValue, error) {
	out := new(RangeValue)
	err := c.cc.Invoke(ctx, "/smartcore.traits.RangeApi/GetRangeValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rangeApiClient) PullRangeValue(ctx context.Context, in *PullRangeValueRequest, opts ...grpc.CallOption) (RangeApi_PullRangeValueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeApi_serviceDesc.Streams[0], "/smartcore.traits.RangeApi/PullRangeValue", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeApiPullRangeValueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeApi_PullRangeValueClient interface {
	Recv() (*PullRangeValueResponse, error)
	grpc.ClientStream
}

type rangeApiPullRangeValueClient struct {
	grpc.ClientStream
}

func (x *rangeApiPullRangeValueClient) Recv() (*PullRangeValueResponse, error) {
	m := new(PullRangeValueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RangeApiServer is the server API for RangeApi service.
// All implementations must embed UnimplementedRangeApiServer
// for forward compatibility
type RangeApiServer interface {
	// request that the range value be changes
	UpdateRangeValue(context.Context, *UpdateRangeValueRequest) (*RangeValue, error)
	// get the current value of the range
	GetRangeValue(context.Context, *GetRangeValueRequest) (*RangeValue, error)
	// request updates to changes in the range value
	PullRangeValue(*PullRangeValueRequest, RangeApi_PullRangeValueServer) error
	mustEmbedUnimplementedRangeApiServer()
}

// UnimplementedRangeApiServer must be embedded to have forward compatible implementations.
type UnimplementedRangeApiServer struct {
}

func (*UnimplementedRangeApiServer) UpdateRangeValue(context.Context, *UpdateRangeValueRequest) (*RangeValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRangeValue not implemented")
}
func (*UnimplementedRangeApiServer) GetRangeValue(context.Context, *GetRangeValueRequest) (*RangeValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRangeValue not implemented")
}
func (*UnimplementedRangeApiServer) PullRangeValue(*PullRangeValueRequest, RangeApi_PullRangeValueServer) error {
	return status.Errorf(codes.Unimplemented, "method PullRangeValue not implemented")
}
func (*UnimplementedRangeApiServer) mustEmbedUnimplementedRangeApiServer() {}

func RegisterRangeApiServer(s *grpc.Server, srv RangeApiServer) {
	s.RegisterService(&_RangeApi_serviceDesc, srv)
}

func _RangeApi_UpdateRangeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRangeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeApiServer).UpdateRangeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.RangeApi/UpdateRangeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeApiServer).UpdateRangeValue(ctx, req.(*UpdateRangeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RangeApi_GetRangeValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeApiServer).GetRangeValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smartcore.traits.RangeApi/GetRangeValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeApiServer).GetRangeValue(ctx, req.(*GetRangeValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RangeApi_PullRangeValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRangeValueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeApiServer).PullRangeValue(m, &rangeApiPullRangeValueServer{stream})
}

type RangeApi_PullRangeValueServer interface {
	Send(*PullRangeValueResponse) error
	grpc.ServerStream
}

type rangeApiPullRangeValueServer struct {
	grpc.ServerStream
}

func (x *rangeApiPullRangeValueServer) Send(m *PullRangeValueResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RangeApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smartcore.traits.RangeApi",
	HandlerType: (*RangeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRangeValue",
			Handler:    _RangeApi_UpdateRangeValue_Handler,
		},
		{
			MethodName: "GetRangeValue",
			Handler:    _RangeApi_GetRangeValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullRangeValue",
			Handler:       _RangeApi_PullRangeValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "traits/range.proto",
}
