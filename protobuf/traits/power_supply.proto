syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "github.com/smart-core-os/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "PowerSupplyProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/change.proto";
import "types/info.proto";
import "types/number.proto";

// Trait for devices that can supply power, typically electrical.
service PowerSupplyApi {
  // Get the current capacity available for supply.
  // The available capacity shouldn't include any draw made on this device directly.
  rpc GetPowerCapacity (GetPowerCapacityRequest) returns (PowerCapacity);
  // Be notified of changes to the available capacity.
  rpc PullPowerCapacity (PullPowerCapacityRequest) returns (stream PullPowerCapacityResponse);

  // ListDrawNotifications returns the list of active draw notifications.
  rpc ListDrawNotifications (ListDrawNotificationsRequest) returns (ListDrawNotificationsResponse);
  // CreateDrawNotification indicates that the caller intends to draw the given capacity from this power supply.
  // This device may respond to say that the requested draw is not available at this time.
  rpc CreateDrawNotification (CreateDrawNotificationRequest) returns (DrawNotification);
  // Update an existing draw notification.
  // If no such draw notification exists, will return an error.
  rpc UpdateDrawNotification (UpdateDrawNotificationRequest) returns (DrawNotification);
  // DeleteDrawNotification allows the caller to remove their notification of draw.
  // Typically used if the situation has changed and the expected draw will no longer happen.
  // If the expected draw level has changed consider using UpdateDrawNotification.
  // If no such draw notification exists, returns NOT_FOUND unless allow_missing is true.
  // There is no need to remove notifications after their ramp_duration has expired.
  rpc DeleteDrawNotification (DeleteDrawNotificationRequest) returns (google.protobuf.Empty);
  // PullDrawNotifications returns a stream of list changes for active draw notifications.
  // No guarantee is made for if or when a Draw Notification might be removed after it's notification period has
  // expired. Only client initiated events are guaranteed to be published via the returned stream.
  rpc PullDrawNotifications (PullDrawNotificationsRequest) returns (stream PullDrawNotificationsResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service PowerSupplyInfo {
  // Get information about how a named device implements PowerCapacity features
  rpc DescribePowerCapacity (DescribePowerCapacityRequest) returns (PowerCapacitySupport);
  // Get information about how a named device implements DrawNotification features
  rpc DescribeDrawNotification (DescribeDrawNotificationRequest) returns (DrawNotificationSupport);
}

// PowerCapacitySupport describes the capabilities of devices implementing this trait.
message PowerCapacitySupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // Attributes associated with the available capacity property of the supply.
  // This applies to the rating, load, capacity, and free properties of PowerCapacity.
  smartcore.types.FloatAttributes available_attributes = 2;
}
// DrawNotificationSupport describes the capabilities of devices implementing this trait.
message DrawNotificationSupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // If true, the ListDrawNotificationsResponse.total_size property is an estimate, not an exact value.
  bool draw_notifications_total_size_estimated = 2;
}

// PowerCapacity describes how much power is available to be supplied by a device.
// This can also describe how much isn't available.
//
// Note that load + free <= rating (when rating is present).
// When rating is absent it is acceptable to estimate it using load + free for most cases.
// The device may only make some of the total power available for consumption.
//
// Notified draw is not accounted for as part of the free calculation.
// If it were, during the ramp period the device would count the notified load + the actual load
// and potentially double count how much capacity is being used.
message PowerCapacity {
  // What is the maximum rating the device can ever supply.
  // Unlikely to change without changes to the electric circuit.
  // In amps.
  // Zero means absent, not a rating of 0 amps.
  float rating = 1;
  // The voltage level the device supplies.
  // In volts.
  // Zero means absent, not 0 volts.
  float voltage = 2;
  // How much power is currently drawn from this device.
  // In amps.
  optional float load = 3;
  // How much of the rated capacity can be supplied from this device.
  // This will update as available capacity changes.
  // In amps.
  // For example a 100A rating with 30A load is likely to respond with 70A capacity.
  optional float capacity = 4;
  // How much more capacity can be drawn from this device.
  // In amps.
  // Notification of draw should _not_ be included in the calculation for this value.
  // For example a 100A rating with 30A load with a 10A configured safety margin is likely to respond with 60A.
  float free = 5;
  // A total for how much current (in amps) consumers of this supply have notified they will be drawing.
  // See DrawNotification.
  float notified = 6;
  // The total notified power draw on this supply by notifications that are pending. Note that pending notifications
  // are also included in the notified total.
  float pending = 7;
}

// DrawNotification represents a consuming device informing a supply device that it intends to draw current.
// Callers can use this to help make a power supply more resilient to multiple consumers that might be adjusting
// their draw at the same time.
//
// A draw notification should be created when a device intends to begin (or increase) drawing power from the power
// supply. Once it has begun drawing the power and has reached a steady state, it should delete the draw notification
// to prevent double-counting of the power draw.
//
// A draw notification is free to be removed at any time by the caller or the device.
// It is recommended that the notification is removed once all durations have elapsed in order to manage device
// resources.
//
// Min Draw Example
//
// Given a notification of {max_draw: 50A, min_draw: 10A} applied to a device with only 30A free.
// The device may decide to respond as if the notification was for exactly 30A,
// as 30A is within the [10,50] amp range specified in the request.
//
// If no min_draw was specified the device may have responded with an error indicating that
// the value of max_draw:50A isn't available.
message DrawNotification {
  // Identifies the notification of draw.
  // Required for update or delete operations, should be absent for add operations
  string id = 1;
  // The maximum draw that the caller is expecting to consume.
  // In amps.
  // During read, or as part of a write response, this is the maximum draw the supply expects the caller to consume.
  float max_draw = 2;
  // How long does the caller expect it will be before the draw level has reached its maximum.
  // The device is free to forget draw notifications after this duration has elapsed as it is expected
  // the caller is actually drawing the current so it is not available anymore.
  // If absent or outside the devices supported range during write, the device is free to choose a value.
  // The chosen value will be returned in responses to the write.
  //
  // On output the value will be relative to notification time.
  // On input the value should be relative to the current time.
  google.protobuf.Duration ramp_duration = 3;
  // The minimum draw that the caller will accept.
  // A zero value indicates that the caller only draws using max_draw and no less.
  // During write, a non-zero value is an indication to the device that it may choose an expected draw value
  // somewhere between the min_draw and max_draw, typically based on free and unallocated current.
  // The max_draw of the response will inform the caller which value has been chosen.
  // See message docs for more details.
  float min_draw = 4;

  // The time for which durations are relative to.
  // Output only.
  // May change if durations are written to.
  google.protobuf.Timestamp notification_time = 5;

  // If true, any checks used by the device to limit the addition of this notification will be loosened.
  // As an example, a device with 10 unallocated amps should still allow and record a notification of 30 A if force is
  // true.
  //
  // Warning, forcing the acceptance of a notification will likely cause future notifications to fail, even if more
  // free capacity becomes available as this notification has pre-reserved it.
  bool force = 6;

  // If true, the draw notification is inactive, and the caller must not yet begin drawing power.
  // When creating or updating a notification, setting pending to true indicates that the caller is willing to wait
  // for the power to become available. If it is false, the notification will be accepted immediately or not at all.
  // It is an error to create/update a notification with both force=true and pending=true.
  //
  // When reading the notification, pending will be false if the draw amount has been reserved and is available for the
  // caller to start using now. It will be true if the power has not been allocated.
  //
  // A power management system may use the presence of pending draw notifications as a signal to begin load shedding.
  // Once sufficient power is available, it may signal to the caller that it is permitted to begin drawing power by
  // updating the notification with pending=false. The order in which a power management system fulfils pending draw
  // notifications is implementation-defined. The caller can use PullDrawNotifications to detect when this happens.
  bool pending = 7;

}

message GetPowerCapacityRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the PowerCapacity type
  google.protobuf.FieldMask fields = 2;
}

message PullPowerCapacityRequest {
  // Name of the device to fetch the state for
  string name = 1;
  // Fields to fetch relative to the PowerCapacity type
  google.protobuf.FieldMask fields = 2;
}

message PullPowerCapacityResponse {
  // Changes since the last message
  repeated Change changes = 1;

  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the available capacity
    PowerCapacity available_capacity = 3;
  }
}

message DescribePowerCapacityRequest {
  // The name of the device
  string name = 1;
}

message DescribeDrawNotificationRequest {
  // The name of the device
  string name = 1;
}

message ListDrawNotificationsRequest {
  // The name of the device
  string name = 1;

  // The maximum number of draw notifications to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 items will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;
  // A page token, received from a previous `ListDrawNotifications` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 3;
}

message ListDrawNotificationsResponse {
  repeated DrawNotification draw_notifications = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
  // If non-zero this is the total number of draw notifications.
  // This may be an estimate, see the PowerCapacitySupport.draw_notifications_total_size_estimated.
  int32 total_size = 3;
}

message CreateDrawNotificationRequest {
  // Name of the device
  string name = 1;
  DrawNotification draw_notification = 2;
}

message UpdateDrawNotificationRequest {
  // Name of the device
  string name = 1;
  DrawNotification draw_notification = 2;
  // The fields to modify in the draw notification. If absent, all writeable fields will be updated.
  google.protobuf.FieldMask fields = 3;
}

message DeleteDrawNotificationRequest {
  // Name of the device
  string name = 1;
  // Id of the draw notification returned during the CreateDrawNotification call.
  string id = 2;
  // If set to true, and no draw notification with the given id exists, the request will succeed but no action will
  // be taken.
  bool allow_missing = 3;
}

message PullDrawNotificationsRequest {
  // Name of the device
  string name = 1;
  // ID of the notification to receive updates for. If absent, updates for all notifications on the specified device
  // will be returned. If the specified draw notification is deleted, the stream should be closed after the deletion
  // change is sent.
  string id = 2;
}

message PullDrawNotificationsResponse {
  // the list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // the name of the device that emitted this change
    string name = 1;
    // the type of change (e.g. ADD, UPDATE, etc...)
    smartcore.types.ChangeType type = 2;
    // the new value to use for ADD|UPDATE changes
    DrawNotification new_value = 3;
    // the old value to use for UPDATE|REMOVE changes
    DrawNotification old_value = 4;
    // when the change occurred
    google.protobuf.Timestamp change_time = 5;
  }
}
