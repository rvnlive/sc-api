syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "git.vanti.co.uk/smartcore/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "OpenCloseProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/timestamp.proto";
import "types/number.proto";

// Applicable to devices that can open or close. Think window contact closure, window blind, or garage door.
service OpenCloseApi {
  rpc GetPositions (GetOpenClosePositionsRequest) returns (OpenClosePositions);

  rpc UpdatePositions (UpdateOpenClosePositionsRequest) returns (OpenClosePositions);

  // Stop causes any changes being performed by the underlying device to stop. Will return the current state.
  rpc Stop (StopOpenCloseRequest) returns (OpenClosePositions);

  // Get notified of changes to the OpenCloseState of a device
  rpc Pull (PullOpenClosePositionsRequest) returns (stream PullOpenClosePositionsResponse);
}

// Trait.attribute for OpenClose devices
message OpenCloseAttributes {
  // Define how the value for positions behave. The bounds for these attributes will be absent and always in the range
  // 0-100 to represent a percentage
  smartcore.api.types.FloatAttributes position_attributes = 1;
  // The supported directions for the device. If none then assume only a single direction is supported
  repeated OpenCloseDirection directions = 2;
  // Does the device support the Stop method
  bool supports_stop = 3;
}

// All open/closable elements for the device
message OpenClosePositions {
  // The state of each of the devices open-able elements. Most devices will only have a single value here as they can
  // only be opened from a single direction.
  repeated OpenClosePosition states = 1;
}

// Possible directions the device can open/close
enum OpenCloseDirection {
  UNSPECIFIED = 0;
  UP = 1;
  DOWN = 2;
  LEFT = 3;
  RIGHT = 4;
  IN = 5;
  OUT = 6;
}

// Defines the position of one open close element for the device
message OpenClosePosition {
  // 0-100, the current value for the open close position of the device in this direction
  smartcore.api.types.FloatVar position_percent = 1;
  // Optional direction for devices that support multiple open/close directions
  OpenCloseDirection direction = 2;
}

message GetOpenClosePositionsRequest {
  // Name of the device to get the state for
  string name = 1;
}

message UpdateOpenClosePositionsRequest {
  // the name of the device to update the states for
  string name = 1;
  // target states for each directional element of the device. If you don't want to change an open direction don't
  // include it in the states list.
  OpenClosePositions states = 2;
  // indicate whether the state change is a delta or absolute value
  bool delta = 3;
}

message StopOpenCloseRequest {
  // the name of the device to stop
  string name = 1;
}

// Request to begin a subscription for open close state changes
message PullOpenClosePositionsRequest {
  // The name of the device we want events from
  string name = 1;
  // Indicate whether we want to be notified of values while tweening or not. The device may ignore this depending on
  // capabilities
  bool exclude_tweening = 2;
}

// A response as part of the stream of changes to the range value
message PullOpenClosePositionsResponse {
  // The list of changes
  repeated Change changes = 1;

  // A change to a single devices open close state value
  message Change {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp change_time = 2;
    // The new value for the state
    OpenClosePositions state = 3;
  }
}
