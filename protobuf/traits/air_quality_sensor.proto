syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "git.vanti.co.uk/smartcore/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "AirQualityProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "types/number.proto";

// Trait for devices that can report either numeric or descriptive readings about air quality and comfort.
service AirQualitySensor {
  // Get the current state of all reading this device supports
  rpc GetState (GetAirQualityStateRequest) returns (AirQualityState);
  // Be notified of changes to any reading
  rpc PullState (PullAirQualityStateRequest) returns (stream PullAirQualityStateResponse);
}

// Trait.attribute describing capabilities of the AirQuality device
message AirQualitySensorAttributes {
  // If present then the sensor supports reporting CO2 levels, in parts-per-million.
  smartcore.api.types.FloatBounds carbon_dioxide_level = 1;
  // If present then the sensor supports reporting volatile organic compounds, in parts-per-million.
  smartcore.api.types.FloatBounds volatile_organic_compounds = 2;
  // If present then the sensor supports reporting air pressure, in hPa.
  smartcore.api.types.FloatBounds air_pressure = 3;
  // If non-empty then the sensor supports reporting a general comfort reading of any of the provided types.
  // Unknown should be assumed to be present if supported.
  repeated AirQualityComfort comfort = 4;
}

// AirQualityState holds the value of all supported sensors.
message AirQualityState {
  // The CO2 level in parts per million
  google.protobuf.FloatValue carbon_dioxide_level = 1;
  // The VOC level in parts per million
  google.protobuf.FloatValue volatile_organic_compounds = 2;
  // The air pressure in hPa
  google.protobuf.FloatValue air_pressure = 3;
  // General comfort of the area
  AirQualityComfort comfort = 4;
}

// AirQualityComfort encodes levels of comfort for an area.
enum AirQualityComfort {
  // The comfort level is unknown
  AIR_QUALITY_COMFORT_UNKNOWN = 0;
  // The area should be comfortable for occupants
  AIR_QUALITY_COMFORT_COMFORTABLE = 1;
  // The area might be uncomfortable for occupants
  AIR_QUALITY_COMFORT_UNCOMFORTABLE = 2;
}

message GetAirQualityStateRequest {
  // The name of the device to request state from
  string name = 1;
  // The state fields to fetch
  google.protobuf.FieldMask update_mask = 2;
}

message PullAirQualityStateRequest {
  // The name of the device to request state from
  string name = 1;
  // The state fields to pull
  google.protobuf.FieldMask update_mask = 2;
}

message PullAirQualityStateResponse {
  repeated AirQualityStateChange changes = 1;
}

message AirQualityStateChange {
  // The name of the device that has changed.
  string name = 1;
  // The time the change happened.
  google.protobuf.Timestamp change_time = 2;
  // The new state of the sensor. Changed fields should be reported via the update_mask property.
  AirQualityState state = 3;
  // The state fields that have changed.
  google.protobuf.FieldMask update_mask = 4;
}
