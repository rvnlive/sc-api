syntax = "proto3";

package smartcore.traits;

option csharp_namespace = "Smartcore.Traits";
option go_package = "git.vanti.co.uk/smartcore/sc-api/go/traits";
option java_multiple_files = true;
option java_outer_classname = "CountProto";
option java_package = "dev.smartcore.traits";
option php_namespace = "Smartcore\\Traits";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "types/info.proto";

// CountApi tracks both a positive and negative count of some quantity. Can be used for tickers, footfall sensors, and
// devices like that.
service CountApi {
  // Get the current count state
  rpc GetCount (GetCountRequest) returns (Count);
  // Reset the counts to 0 and update the reset time.
  rpc ResetCount (ResetCountRequest) returns (Count);
  // Update one or more properties of the count.
  rpc UpdateCount (UpdateCountRequest) returns (Count);
  // Subscribe to changes to the count.
  rpc PullCounts (PullCountsRequest) returns (stream PullCountsResponse);
}

// Describes the capabilities of a specific named device with respect to this trait.
service CountInfo {
  // Get information about how a named device implements Count features
  rpc DescribeCount (DescribeCountRequest) returns (CountSupport);
}

// CountSupport describes the capabilities of devices implementing this trait
message CountSupport {
  // How a named device supports read/write/pull apis
  smartcore.types.ResourceSupport resource_support = 1;
  // Two way counters count additions and removals separately. Do NOT use this as a way to ignore the Count.removed
  // property, the total count is always added - removed.
  bool two_way = 2;
  // Does the api support resetting the count timer.
  bool supports_reset = 3;
  // When updating the count does this device support the delta property
  bool supports_delta = 4;
}

// Count represents how many of a thing exist. The total measured count is added - removed. Some devices may adjust
// added up and down and leave removed at 0, some might increase both properties.
message Count {
  // Total number of added items
  int32 added = 1;
  // Total number of removed items
  int32 removed = 2;
  // The time the counts were reset
  google.protobuf.Timestamp reset_time = 3;
}

message GetCountRequest {
  string name = 1;
}

message ResetCountRequest {
  string name = 1;
  // if absent then the server timestamp will be used
  google.protobuf.Timestamp reset_time = 2;
}

message UpdateCountRequest {
  string name = 1;
  Count count = 2;
  google.protobuf.FieldMask update_mask = 3;
  // if true the added and removed properties of count should be treated as a change not an absolute value.
  bool delta = 4;
}

message PullCountsRequest {
  string name = 1;
}

message PullCountsResponse {
  repeated Change changes = 1;

  message Change {
    string name = 1;
    Count count = 2;
    // when the change occurred
    google.protobuf.Timestamp change_time = 3;
  }
}

message DescribeCountRequest {
  // The name of the device
  string name = 1;
}
