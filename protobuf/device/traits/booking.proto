syntax = "proto3";

package smartcore.api.device.traits;

option csharp_namespace = "Smartcore.Api.Device.Traits";
option go_package = "git.vanti.co.uk/smartcore/sc-api/go/device/traits";
option java_multiple_files = true;
option java_outer_classname = "BookingProto";
option java_package = "dev.smartcore.api.device.traits";
option php_namespace = "Smartcore\\Api\\Device\\Traits";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "types/change.proto";
import "types/time/period.proto";

// The BookingApi defines an interface for interacting with bookable resources, for example rooms.
// Bookings can be listed, edited, and created.
service BookingApi {
  // list bookings for a given bookable
  rpc ListBookings (ListBookingsRequest) returns (ListBookingsResponse);

  // check in an existing booking
  rpc CheckInBooking (CheckInBookingRequest) returns (CheckInBookingResponse);
  // check out an existing booking
  rpc CheckOutBooking (CheckOutBookingRequest) returns (CheckOutBookingResponse);

  // create a new booking
  rpc CreateBooking (CreateBookingRequest) returns (CreateBookingResponse);
  // update an existing booking
  rpc UpdateBooking (UpdateBookingRequest) returns (UpdateBookingResponse);

  // request updates to booking changes for a given bookable
  rpc PullBookings (ListBookingsRequest) returns (stream PullBookingsResponse);
}

// Trait.attribute for booking capabilities
message BookingAttributes {
  // which fields of a booking can be amended
  google.protobuf.FieldMask updatable_booking_fields = 1;
  // is check in supported, and how
  CheckInSupport check_in_support = 2;
  // is check out supported, and how
  CheckInSupport check_out_support = 3;
  // are subscriptions supported (i.e. PullBookings), and how
  SubscriptionSupport subscription_support = 4;
}

enum CheckInSupport {
  // check in is not supported
  NO_SUPPORT = 0;
  // check in is supported as a state, without an associated time
  STATE = 1;
  // check in is supported with an associated time
  TIME = 2;
}

enum SubscriptionSupport {
  // subscribing to booking changes is not supported
  NO_SUPPORT = 0;
  // subscribing to bookings is supported natively by the underlying system
  NATIVE = 1;
  // subscribing to bookings is supported in the driver, rather than natively
  // usually the driver will poll the system for data
  EMULATED = 2;
}

message ListBookingsRequest {
  // The name of the bookable (e.g. the resource name)
  string name = 1;
  // Specify the time period to return bookings for
  // bookings are returned if they intersect this time period
  smartcore.api.types.time.Period booking_intersects = 2;
}

message ListBookingsResponse {
  // the list of bookings for the given request
  repeated Booking bookings = 1;
}

message Booking {
  // The name of the bookable (e.g. the resource name)
  string bookable = 1;
  // the unique identify for this booking
  int32 id = 2;
  // the title of this booking
  string title = 3;
  // the name of the owner of this booking
  string owner_name = 4;
  // the time period this booking is for
  smartcore.api.types.time.Period booked = 5;
  // The time period this booking was checked in for.
  // If this is absent, then no check in or check out has happened
  // If check_in.start_time is absent, no check in has happened
  // If check_in.end_time is absent, no check out has happened
  smartcore.api.types.time.Period check_in = 6;
}

message CheckInBookingRequest {
  // The name of the bookable (e.g. the resource name)
  string name = 1;
  // Which booking to check in
  int32 booking_id = 2;
  // The time the booking was checked-in. If omitted the server time will be used.
  google.protobuf.Timestamp time = 3;
}

message CheckInBookingResponse {
}

message CheckOutBookingRequest {
  // The name of the bookable (e.g. the resource name)
  string name = 1;
  // Which booking to check out
  int32 booking_id = 2;
  // The time the booking was checked-out. If omitted the server time will be used.
  google.protobuf.Timestamp time = 3;
}

message CheckOutBookingResponse {
}

message CreateBookingRequest {
  // The name of the bookable (e.g. the resource name)
  string name = 1;
  // the booking to add, the id field should not be set
  Booking booking = 2;
}

message CreateBookingResponse {
  // The created bookings' id
  int32 booking_id = 1;
}

message UpdateBookingRequest {
  // The name of the bookable (e.g. the resource name)
  string name = 1;
  // The new value of the booking to use, make sure id is set
  Booking booking = 2;
  // Which fields in the booking to update, any unsupported fields will be ignored, check the return value
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateBookingResponse {
  // The new value of the booking
  Booking booking = 1;
}

message PullBookingsResponse {
  // the list of changes which have occurred
  repeated Change changes = 1;

  message Change {
    // the type of change (e.g. ADD, UPDATE, etc...)
    smartcore.api.types.ChangeType type = 1;
    // the new value to use for ADD|UPDATE changes
    Booking new_value = 2;
    // the old value to use for UPDATE|REMOVE changes
    Booking old_value = 3;
  }
}
