syntax = "proto3";

package smartcore.api.device.traits.audit;

option csharp_namespace = "Smartcore.Api.Device.Traits";
option go_package = "git.vanti.co.uk/smartcore/sc-api/go/device/traits";
option java_multiple_files = true;
option java_outer_classname = "AuditProto";
option java_package = "dev.smartcore.api.device.traits";
option php_namespace = "Smartcore\\Api\\Device\\Traits";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// The device has the concept of an audit record. Audits are a sequence of events that are notable and can be used to
// trace the behaviour of a device over time.
service Audit {
    // List the known audit records the device has
    rpc ListAuditRecords (ListAuditRecordsRequest) returns (ListAuditRecordsResponse);

    // Create a new audit record in this devices record list
    rpc CreateAuditRecord (CreateAuditRecordRequest) returns (AuditRecord);

    // subscribe to new audit records
    rpc PullAuditRecords (PullAuditRecordsRequest) returns (stream PullAuditRecordsResponse);
}

// Trait.attribute for the audit api
message AuditAttributes {
    AuditRetention retention = 1;
    // possible priorities that audit records can have
    repeated Priority priorities = 2;
    // possible severities that audit records can have
    repeated Severity severities = 3;
}

// How are audit records retained on the device.
message AuditRetention {
    // how many total records will the device remember. 0 means no memory.
    int32 max_records = 1;
    // What is the maximum age for records kept on the device. Absent means age does not affect retention
    google.protobuf.Duration max_age = 2;
    // if true then device restarts do not affect audit retention on the device
    bool persistent = 3;
}

// represents humidity for a space
message AuditRecord {
    google.protobuf.Timestamp event_time = 1;
    string title = 2;
    string description = 3;
    // 1 = highest priority. when dealing with audit records, indicates how this record should be scheduled vs other
    // records
    int32 priority_level = 4;
    // 1 = highest severity. An indication of how important or impactful this record is.
    int32 severity_level = 5;

    map<string, string> labels = 8;
}

// defines a category description
message Category {
    // unique name for the category
    string name = 1;
    // An official string for the category, for example "user action" or "security"
    string title = 2;
    string description = 3;
}

// defines a priority description
message Priority {
    // The level value for the priority. Priority 1 should be the highest priority.
    int32 level = 1;
    // An official string for the priority, for example "high" or "critical"
    string title = 2;
    string description = 3;
}

// defines a severity description
message Severity {
    // The level value for the severity. Severity 1 should be the highest impact.
    int32 level = 1;
    // An official string for the severity, for example "high" or "critical"
    string title = 2;
    string description = 3;
}

// List request arguments
message ListAuditRecordsRequest {
    // the name of the device to get the state for
    string name = 1;
    // How many items should be returned. Default is 10, max is 100.
    int32 page_size = 2;
    // The next_page_token from the previous response
    string page_token = 3;
}

// List response body
message ListAuditRecordsResponse {
    // The current page of records to satisfy the request
    repeated AuditRecord audit_records = 1;
    // Use in page_token to retrieve the next page
    string next_page_token = 2;
    // Total number of items that would be returned if not splitting the response into pages.
    int32 total_size = 3;
}

// Request to create an audit record
message CreateAuditRecordRequest {
    // the name of the device to add the record to
    string name = 1;
    AuditRecord audit_record = 2;
}

message PullAuditRecordsRequest {
    // the name of the device to subscribe to
    string name = 1;
}

// response containing new audit records
message PullAuditRecordsResponse {
    // the list of changes that have occurred since the last event
    repeated AuditRecordChange changes = 1;
}

// A change to the humidity reading of the device
message AuditRecordChange {
    // name for the device that issued the change
    string name = 1;
    // when the change occurred
    google.protobuf.Timestamp create_time = 2;
    // the new audit record
    AuditRecord humidity = 3;
}


