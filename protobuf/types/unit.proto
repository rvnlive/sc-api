syntax = "proto3";

package smartcore.api.types;

option csharp_namespace = "Smartcore.Api.Types";
option go_package = "git.vanti.co.uk/smartcore/sc-api/go/types";
option java_multiple_files = true;
option java_outer_classname = "UnitProto";
option java_package = "dev.smartcore.api.types";

import "google/protobuf/timestamp.proto";
import "types/number.proto";
import "types/tween.proto";

// Possible temperature units for physical bodies.
enum TemperatureUnit {
  CELSIUS = 0;
  FAHRENHEIT = 1;
  KELVIN = 2;
}

// A temperature value
message Temperature {
  // The value in celsius, always! Use device attributes if the device 'thinks' in a different unit but always
  // communicate in celsius.
  double value_celsius = 1;
}

// Represents the audio signal level for either input or output devices. When reading mute is always accurate, when
// writing please use a FieldMask to exclude the mute value if you do not intend on changing it.
message Volume {
  smartcore.api.types.FloatVar gain = 1;
  bool mute = 2;
}

// Represents an audio signal level for either input or output devices. Typically if fine grained control of either
// gain or muted is required then a FieldMask should describe this.
message AudioLevel {
  // The current gain, typically as a percentage unless documented in the AudioLevel usage.
  float gain = 1;
  // How the gain is changing or should change over time.
  smartcore.api.types.Tween gain_tween = 2;
  // Read-only, the target value for the gain during a transition
  float target_gain = 3;
  // If the audio level muted.
  bool muted = 4;
}

// A change to the audio level
message AudioLevelChange {
  // The name of the device that is the source of the change
  string name = 1;
  // When the change was applied
  google.protobuf.Timestamp change_time = 2;
  // The new state for the change
  AudioLevel level = 3;
}
