// source: traits/sensor.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var types_number_pb = require('../types/number_pb.js');
goog.object.extend(proto, types_number_pb);
goog.exportSymbol('proto.smartcore.traits.GetSensorStateRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullSensorStateRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullSensorStateResponse', null, global);
goog.exportSymbol('proto.smartcore.traits.SensorAttributes', null, global);
goog.exportSymbol('proto.smartcore.traits.SensorComfort', null, global);
goog.exportSymbol('proto.smartcore.traits.SensorState', null, global);
goog.exportSymbol('proto.smartcore.traits.SensorStateChange', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.SensorAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.SensorAttributes.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.SensorAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.SensorAttributes.displayName = 'proto.smartcore.traits.SensorAttributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.SensorState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.SensorState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.SensorState.displayName = 'proto.smartcore.traits.SensorState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.GetSensorStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.GetSensorStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.GetSensorStateRequest.displayName = 'proto.smartcore.traits.GetSensorStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullSensorStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.PullSensorStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullSensorStateRequest.displayName = 'proto.smartcore.traits.PullSensorStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullSensorStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.PullSensorStateResponse.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.PullSensorStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullSensorStateResponse.displayName = 'proto.smartcore.traits.PullSensorStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.SensorStateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.SensorStateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.SensorStateChange.displayName = 'proto.smartcore.traits.SensorStateChange';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.SensorAttributes.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.SensorAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.SensorAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.SensorAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.SensorAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    brightness: (f = msg.getBrightness()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    carbonDioxideLevel: (f = msg.getCarbonDioxideLevel()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    volatileOrganicCompounds: (f = msg.getVolatileOrganicCompounds()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    airPressure: (f = msg.getAirPressure()) && types_number_pb.FloatBounds.toObject(includeInstance, f),
    comfortList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.SensorAttributes}
 */
proto.smartcore.traits.SensorAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.SensorAttributes;
  return proto.smartcore.traits.SensorAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.SensorAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.SensorAttributes}
 */
proto.smartcore.traits.SensorAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setBrightness(value);
      break;
    case 2:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setCarbonDioxideLevel(value);
      break;
    case 3:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setVolatileOrganicCompounds(value);
      break;
    case 4:
      var value = new types_number_pb.FloatBounds;
      reader.readMessage(value,types_number_pb.FloatBounds.deserializeBinaryFromReader);
      msg.setAirPressure(value);
      break;
    case 5:
      var value = /** @type {!Array<!proto.smartcore.traits.SensorComfort>} */ (reader.readPackedEnum());
      msg.setComfortList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.SensorAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.SensorAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.SensorAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.SensorAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrightness();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getCarbonDioxideLevel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getVolatileOrganicCompounds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getAirPressure();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      types_number_pb.FloatBounds.serializeBinaryToWriter
    );
  }
  f = message.getComfortList();
  if (f.length > 0) {
    writer.writePackedEnum(
      5,
      f
    );
  }
};


/**
 * optional smartcore.api.types.FloatBounds brightness = 1;
 * @return {?proto.smartcore.api.types.FloatBounds}
 */
proto.smartcore.traits.SensorAttributes.prototype.getBrightness = function() {
  return /** @type{?proto.smartcore.api.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 1));
};


/**
 * @param {?proto.smartcore.api.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
*/
proto.smartcore.traits.SensorAttributes.prototype.setBrightness = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.clearBrightness = function() {
  return this.setBrightness(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorAttributes.prototype.hasBrightness = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional smartcore.api.types.FloatBounds carbon_dioxide_level = 2;
 * @return {?proto.smartcore.api.types.FloatBounds}
 */
proto.smartcore.traits.SensorAttributes.prototype.getCarbonDioxideLevel = function() {
  return /** @type{?proto.smartcore.api.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 2));
};


/**
 * @param {?proto.smartcore.api.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
*/
proto.smartcore.traits.SensorAttributes.prototype.setCarbonDioxideLevel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.clearCarbonDioxideLevel = function() {
  return this.setCarbonDioxideLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorAttributes.prototype.hasCarbonDioxideLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional smartcore.api.types.FloatBounds volatile_organic_compounds = 3;
 * @return {?proto.smartcore.api.types.FloatBounds}
 */
proto.smartcore.traits.SensorAttributes.prototype.getVolatileOrganicCompounds = function() {
  return /** @type{?proto.smartcore.api.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 3));
};


/**
 * @param {?proto.smartcore.api.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
*/
proto.smartcore.traits.SensorAttributes.prototype.setVolatileOrganicCompounds = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.clearVolatileOrganicCompounds = function() {
  return this.setVolatileOrganicCompounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorAttributes.prototype.hasVolatileOrganicCompounds = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional smartcore.api.types.FloatBounds air_pressure = 4;
 * @return {?proto.smartcore.api.types.FloatBounds}
 */
proto.smartcore.traits.SensorAttributes.prototype.getAirPressure = function() {
  return /** @type{?proto.smartcore.api.types.FloatBounds} */ (
    jspb.Message.getWrapperField(this, types_number_pb.FloatBounds, 4));
};


/**
 * @param {?proto.smartcore.api.types.FloatBounds|undefined} value
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
*/
proto.smartcore.traits.SensorAttributes.prototype.setAirPressure = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.clearAirPressure = function() {
  return this.setAirPressure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorAttributes.prototype.hasAirPressure = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SensorComfort comfort = 5;
 * @return {!Array<!proto.smartcore.traits.SensorComfort>}
 */
proto.smartcore.traits.SensorAttributes.prototype.getComfortList = function() {
  return /** @type {!Array<!proto.smartcore.traits.SensorComfort>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<!proto.smartcore.traits.SensorComfort>} value
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.setComfortList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!proto.smartcore.traits.SensorComfort} value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.addComfort = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.SensorAttributes} returns this
 */
proto.smartcore.traits.SensorAttributes.prototype.clearComfortList = function() {
  return this.setComfortList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.SensorState.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.SensorState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.SensorState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.SensorState.toObject = function(includeInstance, msg) {
  var f, obj = {
    brightnessLux: (f = msg.getBrightnessLux()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    carbonDioxideLevel: (f = msg.getCarbonDioxideLevel()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    volatileOrganicCompounds: (f = msg.getVolatileOrganicCompounds()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    airPressure: (f = msg.getAirPressure()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f),
    comfort: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.SensorState}
 */
proto.smartcore.traits.SensorState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.SensorState;
  return proto.smartcore.traits.SensorState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.SensorState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.SensorState}
 */
proto.smartcore.traits.SensorState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setBrightnessLux(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setCarbonDioxideLevel(value);
      break;
    case 3:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setVolatileOrganicCompounds(value);
      break;
    case 4:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAirPressure(value);
      break;
    case 5:
      var value = /** @type {!proto.smartcore.traits.SensorComfort} */ (reader.readEnum());
      msg.setComfort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.SensorState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.SensorState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.SensorState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.SensorState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrightnessLux();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getCarbonDioxideLevel();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getVolatileOrganicCompounds();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getAirPressure();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
  f = message.getComfort();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional google.protobuf.FloatValue brightness_lux = 1;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.smartcore.traits.SensorState.prototype.getBrightnessLux = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 1));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.smartcore.traits.SensorState} returns this
*/
proto.smartcore.traits.SensorState.prototype.setBrightnessLux = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorState} returns this
 */
proto.smartcore.traits.SensorState.prototype.clearBrightnessLux = function() {
  return this.setBrightnessLux(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorState.prototype.hasBrightnessLux = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.FloatValue carbon_dioxide_level = 2;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.smartcore.traits.SensorState.prototype.getCarbonDioxideLevel = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 2));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.smartcore.traits.SensorState} returns this
*/
proto.smartcore.traits.SensorState.prototype.setCarbonDioxideLevel = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorState} returns this
 */
proto.smartcore.traits.SensorState.prototype.clearCarbonDioxideLevel = function() {
  return this.setCarbonDioxideLevel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorState.prototype.hasCarbonDioxideLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FloatValue volatile_organic_compounds = 3;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.smartcore.traits.SensorState.prototype.getVolatileOrganicCompounds = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 3));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.smartcore.traits.SensorState} returns this
*/
proto.smartcore.traits.SensorState.prototype.setVolatileOrganicCompounds = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorState} returns this
 */
proto.smartcore.traits.SensorState.prototype.clearVolatileOrganicCompounds = function() {
  return this.setVolatileOrganicCompounds(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorState.prototype.hasVolatileOrganicCompounds = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.FloatValue air_pressure = 4;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.smartcore.traits.SensorState.prototype.getAirPressure = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 4));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.smartcore.traits.SensorState} returns this
*/
proto.smartcore.traits.SensorState.prototype.setAirPressure = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorState} returns this
 */
proto.smartcore.traits.SensorState.prototype.clearAirPressure = function() {
  return this.setAirPressure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorState.prototype.hasAirPressure = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SensorComfort comfort = 5;
 * @return {!proto.smartcore.traits.SensorComfort}
 */
proto.smartcore.traits.SensorState.prototype.getComfort = function() {
  return /** @type {!proto.smartcore.traits.SensorComfort} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.smartcore.traits.SensorComfort} value
 * @return {!proto.smartcore.traits.SensorState} returns this
 */
proto.smartcore.traits.SensorState.prototype.setComfort = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.GetSensorStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.GetSensorStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetSensorStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.GetSensorStateRequest}
 */
proto.smartcore.traits.GetSensorStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.GetSensorStateRequest;
  return proto.smartcore.traits.GetSensorStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.GetSensorStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.GetSensorStateRequest}
 */
proto.smartcore.traits.GetSensorStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.GetSensorStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.GetSensorStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetSensorStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.GetSensorStateRequest} returns this
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask update_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.GetSensorStateRequest} returns this
*/
proto.smartcore.traits.GetSensorStateRequest.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.GetSensorStateRequest} returns this
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.GetSensorStateRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullSensorStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullSensorStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullSensorStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullSensorStateRequest}
 */
proto.smartcore.traits.PullSensorStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullSensorStateRequest;
  return proto.smartcore.traits.PullSensorStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullSensorStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullSensorStateRequest}
 */
proto.smartcore.traits.PullSensorStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullSensorStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullSensorStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullSensorStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.PullSensorStateRequest} returns this
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.FieldMask update_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 2));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.PullSensorStateRequest} returns this
*/
proto.smartcore.traits.PullSensorStateRequest.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.PullSensorStateRequest} returns this
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.PullSensorStateRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.PullSensorStateResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullSensorStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullSensorStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullSensorStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullSensorStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.smartcore.traits.SensorStateChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullSensorStateResponse}
 */
proto.smartcore.traits.PullSensorStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullSensorStateResponse;
  return proto.smartcore.traits.PullSensorStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullSensorStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullSensorStateResponse}
 */
proto.smartcore.traits.PullSensorStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smartcore.traits.SensorStateChange;
      reader.readMessage(value,proto.smartcore.traits.SensorStateChange.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullSensorStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullSensorStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullSensorStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullSensorStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.smartcore.traits.SensorStateChange.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SensorStateChange changes = 1;
 * @return {!Array<!proto.smartcore.traits.SensorStateChange>}
 */
proto.smartcore.traits.PullSensorStateResponse.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.smartcore.traits.SensorStateChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.smartcore.traits.SensorStateChange, 1));
};


/**
 * @param {!Array<!proto.smartcore.traits.SensorStateChange>} value
 * @return {!proto.smartcore.traits.PullSensorStateResponse} returns this
*/
proto.smartcore.traits.PullSensorStateResponse.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.smartcore.traits.SensorStateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.SensorStateChange}
 */
proto.smartcore.traits.PullSensorStateResponse.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.smartcore.traits.SensorStateChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.PullSensorStateResponse} returns this
 */
proto.smartcore.traits.PullSensorStateResponse.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.SensorStateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.SensorStateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.SensorStateChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.SensorStateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changeTime: (f = msg.getChangeTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.smartcore.traits.SensorState.toObject(includeInstance, f),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.SensorStateChange}
 */
proto.smartcore.traits.SensorStateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.SensorStateChange;
  return proto.smartcore.traits.SensorStateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.SensorStateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.SensorStateChange}
 */
proto.smartcore.traits.SensorStateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setChangeTime(value);
      break;
    case 3:
      var value = new proto.smartcore.traits.SensorState;
      reader.readMessage(value,proto.smartcore.traits.SensorState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 4:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.SensorStateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.SensorStateChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.SensorStateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.SensorStateChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangeTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smartcore.traits.SensorState.serializeBinaryToWriter
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.SensorStateChange.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
 */
proto.smartcore.traits.SensorStateChange.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp change_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.smartcore.traits.SensorStateChange.prototype.getChangeTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
*/
proto.smartcore.traits.SensorStateChange.prototype.setChangeTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
 */
proto.smartcore.traits.SensorStateChange.prototype.clearChangeTime = function() {
  return this.setChangeTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorStateChange.prototype.hasChangeTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SensorState state = 3;
 * @return {?proto.smartcore.traits.SensorState}
 */
proto.smartcore.traits.SensorStateChange.prototype.getState = function() {
  return /** @type{?proto.smartcore.traits.SensorState} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.SensorState, 3));
};


/**
 * @param {?proto.smartcore.traits.SensorState|undefined} value
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
*/
proto.smartcore.traits.SensorStateChange.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
 */
proto.smartcore.traits.SensorStateChange.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorStateChange.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.FieldMask update_mask = 4;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.SensorStateChange.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 4));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
*/
proto.smartcore.traits.SensorStateChange.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.SensorStateChange} returns this
 */
proto.smartcore.traits.SensorStateChange.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.SensorStateChange.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.smartcore.traits.SensorComfort = {
  SENSOR_COMFORT_UNKNOWN: 0,
  SENSOR_COMFORT_COMFORTABLE: 1,
  SENSOR_COMFORT_UNCOMFORTABLE: 2
};

goog.object.extend(exports, proto.smartcore.traits);
