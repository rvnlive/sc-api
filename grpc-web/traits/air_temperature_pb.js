// source: traits/air_temperature.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_field_mask_pb = require('google-protobuf/google/protobuf/field_mask_pb.js');
goog.object.extend(proto, google_protobuf_field_mask_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
var types_unit_pb = require('../types/unit_pb.js');
goog.object.extend(proto, types_unit_pb);
goog.exportSymbol('proto.smartcore.traits.AirTemperatureAttributes', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperatureMode', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperatureState', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperatureState.TemperatureGoalCase', null, global);
goog.exportSymbol('proto.smartcore.traits.AirTemperatureStateChange', null, global);
goog.exportSymbol('proto.smartcore.traits.GetAirTemperatureStateRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirTemperatureStateRequest', null, global);
goog.exportSymbol('proto.smartcore.traits.PullAirTemperatureStateResponse', null, global);
goog.exportSymbol('proto.smartcore.traits.TemperatureRange', null, global);
goog.exportSymbol('proto.smartcore.traits.UpdateAirTemperatureStateRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirTemperatureAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.AirTemperatureAttributes.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.AirTemperatureAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirTemperatureAttributes.displayName = 'proto.smartcore.traits.AirTemperatureAttributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.GetAirTemperatureStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.GetAirTemperatureStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.GetAirTemperatureStateRequest.displayName = 'proto.smartcore.traits.GetAirTemperatureStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.UpdateAirTemperatureStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.UpdateAirTemperatureStateRequest.displayName = 'proto.smartcore.traits.UpdateAirTemperatureStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirTemperatureStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.PullAirTemperatureStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirTemperatureStateRequest.displayName = 'proto.smartcore.traits.PullAirTemperatureStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.PullAirTemperatureStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.smartcore.traits.PullAirTemperatureStateResponse.repeatedFields_, null);
};
goog.inherits(proto.smartcore.traits.PullAirTemperatureStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.PullAirTemperatureStateResponse.displayName = 'proto.smartcore.traits.PullAirTemperatureStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirTemperatureStateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.AirTemperatureStateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirTemperatureStateChange.displayName = 'proto.smartcore.traits.AirTemperatureStateChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.AirTemperatureState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.smartcore.traits.AirTemperatureState.oneofGroups_);
};
goog.inherits(proto.smartcore.traits.AirTemperatureState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.AirTemperatureState.displayName = 'proto.smartcore.traits.AirTemperatureState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.smartcore.traits.TemperatureRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.smartcore.traits.TemperatureRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.smartcore.traits.TemperatureRange.displayName = 'proto.smartcore.traits.TemperatureRange';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.AirTemperatureAttributes.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirTemperatureAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirTemperatureAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    nativeUnit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    supportedModesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    minRangeCelsius: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirTemperatureAttributes}
 */
proto.smartcore.traits.AirTemperatureAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirTemperatureAttributes;
  return proto.smartcore.traits.AirTemperatureAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirTemperatureAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirTemperatureAttributes}
 */
proto.smartcore.traits.AirTemperatureAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.smartcore.api.types.TemperatureUnit} */ (reader.readEnum());
      msg.setNativeUnit(value);
      break;
    case 2:
      var value = /** @type {!Array<!proto.smartcore.traits.AirTemperatureMode>} */ (reader.readPackedEnum());
      msg.setSupportedModesList(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinRangeCelsius(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirTemperatureAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirTemperatureAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNativeUnit();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSupportedModesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
  f = message.getMinRangeCelsius();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional smartcore.api.types.TemperatureUnit native_unit = 1;
 * @return {!proto.smartcore.api.types.TemperatureUnit}
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.getNativeUnit = function() {
  return /** @type {!proto.smartcore.api.types.TemperatureUnit} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.smartcore.api.types.TemperatureUnit} value
 * @return {!proto.smartcore.traits.AirTemperatureAttributes} returns this
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.setNativeUnit = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated AirTemperatureMode supported_modes = 2;
 * @return {!Array<!proto.smartcore.traits.AirTemperatureMode>}
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.getSupportedModesList = function() {
  return /** @type {!Array<!proto.smartcore.traits.AirTemperatureMode>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.smartcore.traits.AirTemperatureMode>} value
 * @return {!proto.smartcore.traits.AirTemperatureAttributes} returns this
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.setSupportedModesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.smartcore.traits.AirTemperatureMode} value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.AirTemperatureAttributes} returns this
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.addSupportedModes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.AirTemperatureAttributes} returns this
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.clearSupportedModesList = function() {
  return this.setSupportedModesList([]);
};


/**
 * optional double min_range_celsius = 3;
 * @return {number}
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.getMinRangeCelsius = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.smartcore.traits.AirTemperatureAttributes} returns this
 */
proto.smartcore.traits.AirTemperatureAttributes.prototype.setMinRangeCelsius = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.GetAirTemperatureStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.GetAirTemperatureStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.GetAirTemperatureStateRequest}
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.GetAirTemperatureStateRequest;
  return proto.smartcore.traits.GetAirTemperatureStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.GetAirTemperatureStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.GetAirTemperatureStateRequest}
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.GetAirTemperatureStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.GetAirTemperatureStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.GetAirTemperatureStateRequest} returns this
 */
proto.smartcore.traits.GetAirTemperatureStateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.UpdateAirTemperatureStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: (f = msg.getState()) && proto.smartcore.traits.AirTemperatureState.toObject(includeInstance, f),
    updateMask: (f = msg.getUpdateMask()) && google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.UpdateAirTemperatureStateRequest;
  return proto.smartcore.traits.UpdateAirTemperatureStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.smartcore.traits.AirTemperatureState;
      reader.readMessage(value,proto.smartcore.traits.AirTemperatureState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 3:
      var value = new google_protobuf_field_mask_pb.FieldMask;
      reader.readMessage(value,google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader);
      msg.setUpdateMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.UpdateAirTemperatureStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.smartcore.traits.AirTemperatureState.serializeBinaryToWriter
    );
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} returns this
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AirTemperatureState state = 2;
 * @return {?proto.smartcore.traits.AirTemperatureState}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.getState = function() {
  return /** @type{?proto.smartcore.traits.AirTemperatureState} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.AirTemperatureState, 2));
};


/**
 * @param {?proto.smartcore.traits.AirTemperatureState|undefined} value
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} returns this
*/
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} returns this
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.FieldMask update_mask = 3;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (
    jspb.Message.getWrapperField(this, google_protobuf_field_mask_pb.FieldMask, 3));
};


/**
 * @param {?proto.google.protobuf.FieldMask|undefined} value
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} returns this
*/
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.setUpdateMask = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.UpdateAirTemperatureStateRequest} returns this
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.clearUpdateMask = function() {
  return this.setUpdateMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.UpdateAirTemperatureStateRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirTemperatureStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirTemperatureStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirTemperatureStateRequest}
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirTemperatureStateRequest;
  return proto.smartcore.traits.PullAirTemperatureStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirTemperatureStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirTemperatureStateRequest}
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirTemperatureStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirTemperatureStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.PullAirTemperatureStateRequest} returns this
 */
proto.smartcore.traits.PullAirTemperatureStateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.PullAirTemperatureStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.PullAirTemperatureStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.smartcore.traits.AirTemperatureStateChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.PullAirTemperatureStateResponse}
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.PullAirTemperatureStateResponse;
  return proto.smartcore.traits.PullAirTemperatureStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.PullAirTemperatureStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.PullAirTemperatureStateResponse}
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.smartcore.traits.AirTemperatureStateChange;
      reader.readMessage(value,proto.smartcore.traits.AirTemperatureStateChange.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.PullAirTemperatureStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.PullAirTemperatureStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.smartcore.traits.AirTemperatureStateChange.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AirTemperatureStateChange changes = 1;
 * @return {!Array<!proto.smartcore.traits.AirTemperatureStateChange>}
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.smartcore.traits.AirTemperatureStateChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.smartcore.traits.AirTemperatureStateChange, 1));
};


/**
 * @param {!Array<!proto.smartcore.traits.AirTemperatureStateChange>} value
 * @return {!proto.smartcore.traits.PullAirTemperatureStateResponse} returns this
*/
proto.smartcore.traits.PullAirTemperatureStateResponse.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.smartcore.traits.AirTemperatureStateChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.smartcore.traits.AirTemperatureStateChange}
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.smartcore.traits.AirTemperatureStateChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.smartcore.traits.PullAirTemperatureStateResponse} returns this
 */
proto.smartcore.traits.PullAirTemperatureStateResponse.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirTemperatureStateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirTemperatureStateChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureStateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createTime: (f = msg.getCreateTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    state: (f = msg.getState()) && proto.smartcore.traits.AirTemperatureState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirTemperatureStateChange}
 */
proto.smartcore.traits.AirTemperatureStateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirTemperatureStateChange;
  return proto.smartcore.traits.AirTemperatureStateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirTemperatureStateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirTemperatureStateChange}
 */
proto.smartcore.traits.AirTemperatureStateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreateTime(value);
      break;
    case 3:
      var value = new proto.smartcore.traits.AirTemperatureState;
      reader.readMessage(value,proto.smartcore.traits.AirTemperatureState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirTemperatureStateChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirTemperatureStateChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureStateChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreateTime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.smartcore.traits.AirTemperatureState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.smartcore.traits.AirTemperatureStateChange} returns this
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp create_time = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.getCreateTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureStateChange} returns this
*/
proto.smartcore.traits.AirTemperatureStateChange.prototype.setCreateTime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureStateChange} returns this
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.clearCreateTime = function() {
  return this.setCreateTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AirTemperatureState state = 3;
 * @return {?proto.smartcore.traits.AirTemperatureState}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.getState = function() {
  return /** @type{?proto.smartcore.traits.AirTemperatureState} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.AirTemperatureState, 3));
};


/**
 * @param {?proto.smartcore.traits.AirTemperatureState|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureStateChange} returns this
*/
proto.smartcore.traits.AirTemperatureStateChange.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureStateChange} returns this
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureStateChange.prototype.hasState = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.smartcore.traits.AirTemperatureState.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.smartcore.traits.AirTemperatureState.TemperatureGoalCase = {
  TEMPERATURE_GOAL_NOT_SET: 0,
  TEMPERATURE_SET_POINT: 2,
  TEMPERATURE_SET_POINT_DELTA: 3,
  TEMPERATURE_RANGE: 4
};

/**
 * @return {proto.smartcore.traits.AirTemperatureState.TemperatureGoalCase}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getTemperatureGoalCase = function() {
  return /** @type {proto.smartcore.traits.AirTemperatureState.TemperatureGoalCase} */(jspb.Message.computeOneofCase(this, proto.smartcore.traits.AirTemperatureState.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.AirTemperatureState.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.AirTemperatureState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.AirTemperatureState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureState.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    temperatureSetPoint: (f = msg.getTemperatureSetPoint()) && types_unit_pb.Temperature.toObject(includeInstance, f),
    temperatureSetPointDelta: (f = msg.getTemperatureSetPointDelta()) && types_unit_pb.Temperature.toObject(includeInstance, f),
    temperatureRange: (f = msg.getTemperatureRange()) && proto.smartcore.traits.TemperatureRange.toObject(includeInstance, f),
    ambientTemperature: (f = msg.getAmbientTemperature()) && types_unit_pb.Temperature.toObject(includeInstance, f),
    ambientHumidity: (f = msg.getAmbientHumidity()) && google_protobuf_wrappers_pb.FloatValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.AirTemperatureState}
 */
proto.smartcore.traits.AirTemperatureState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.AirTemperatureState;
  return proto.smartcore.traits.AirTemperatureState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.AirTemperatureState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.AirTemperatureState}
 */
proto.smartcore.traits.AirTemperatureState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.smartcore.traits.AirTemperatureMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setTemperatureSetPoint(value);
      break;
    case 3:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setTemperatureSetPointDelta(value);
      break;
    case 4:
      var value = new proto.smartcore.traits.TemperatureRange;
      reader.readMessage(value,proto.smartcore.traits.TemperatureRange.deserializeBinaryFromReader);
      msg.setTemperatureRange(value);
      break;
    case 5:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setAmbientTemperature(value);
      break;
    case 6:
      var value = new google_protobuf_wrappers_pb.FloatValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.FloatValue.deserializeBinaryFromReader);
      msg.setAmbientHumidity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.AirTemperatureState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.AirTemperatureState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.AirTemperatureState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.AirTemperatureState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTemperatureSetPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getTemperatureSetPointDelta();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getTemperatureRange();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.smartcore.traits.TemperatureRange.serializeBinaryToWriter
    );
  }
  f = message.getAmbientTemperature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getAmbientHumidity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_wrappers_pb.FloatValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional AirTemperatureMode mode = 1;
 * @return {!proto.smartcore.traits.AirTemperatureMode}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getMode = function() {
  return /** @type {!proto.smartcore.traits.AirTemperatureMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.smartcore.traits.AirTemperatureMode} value
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
 */
proto.smartcore.traits.AirTemperatureState.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional smartcore.api.types.Temperature temperature_set_point = 2;
 * @return {?proto.smartcore.api.types.Temperature}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getTemperatureSetPoint = function() {
  return /** @type{?proto.smartcore.api.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 2));
};


/**
 * @param {?proto.smartcore.api.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
*/
proto.smartcore.traits.AirTemperatureState.prototype.setTemperatureSetPoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.smartcore.traits.AirTemperatureState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
 */
proto.smartcore.traits.AirTemperatureState.prototype.clearTemperatureSetPoint = function() {
  return this.setTemperatureSetPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureState.prototype.hasTemperatureSetPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional smartcore.api.types.Temperature temperature_set_point_delta = 3;
 * @return {?proto.smartcore.api.types.Temperature}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getTemperatureSetPointDelta = function() {
  return /** @type{?proto.smartcore.api.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 3));
};


/**
 * @param {?proto.smartcore.api.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
*/
proto.smartcore.traits.AirTemperatureState.prototype.setTemperatureSetPointDelta = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.smartcore.traits.AirTemperatureState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
 */
proto.smartcore.traits.AirTemperatureState.prototype.clearTemperatureSetPointDelta = function() {
  return this.setTemperatureSetPointDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureState.prototype.hasTemperatureSetPointDelta = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TemperatureRange temperature_range = 4;
 * @return {?proto.smartcore.traits.TemperatureRange}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getTemperatureRange = function() {
  return /** @type{?proto.smartcore.traits.TemperatureRange} */ (
    jspb.Message.getWrapperField(this, proto.smartcore.traits.TemperatureRange, 4));
};


/**
 * @param {?proto.smartcore.traits.TemperatureRange|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
*/
proto.smartcore.traits.AirTemperatureState.prototype.setTemperatureRange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.smartcore.traits.AirTemperatureState.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
 */
proto.smartcore.traits.AirTemperatureState.prototype.clearTemperatureRange = function() {
  return this.setTemperatureRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureState.prototype.hasTemperatureRange = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional smartcore.api.types.Temperature ambient_temperature = 5;
 * @return {?proto.smartcore.api.types.Temperature}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getAmbientTemperature = function() {
  return /** @type{?proto.smartcore.api.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 5));
};


/**
 * @param {?proto.smartcore.api.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
*/
proto.smartcore.traits.AirTemperatureState.prototype.setAmbientTemperature = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
 */
proto.smartcore.traits.AirTemperatureState.prototype.clearAmbientTemperature = function() {
  return this.setAmbientTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureState.prototype.hasAmbientTemperature = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.FloatValue ambient_humidity = 6;
 * @return {?proto.google.protobuf.FloatValue}
 */
proto.smartcore.traits.AirTemperatureState.prototype.getAmbientHumidity = function() {
  return /** @type{?proto.google.protobuf.FloatValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.FloatValue, 6));
};


/**
 * @param {?proto.google.protobuf.FloatValue|undefined} value
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
*/
proto.smartcore.traits.AirTemperatureState.prototype.setAmbientHumidity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.AirTemperatureState} returns this
 */
proto.smartcore.traits.AirTemperatureState.prototype.clearAmbientHumidity = function() {
  return this.setAmbientHumidity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.AirTemperatureState.prototype.hasAmbientHumidity = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.smartcore.traits.TemperatureRange.prototype.toObject = function(opt_includeInstance) {
  return proto.smartcore.traits.TemperatureRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.smartcore.traits.TemperatureRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.TemperatureRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    low: (f = msg.getLow()) && types_unit_pb.Temperature.toObject(includeInstance, f),
    high: (f = msg.getHigh()) && types_unit_pb.Temperature.toObject(includeInstance, f),
    ideal: (f = msg.getIdeal()) && types_unit_pb.Temperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.smartcore.traits.TemperatureRange}
 */
proto.smartcore.traits.TemperatureRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.smartcore.traits.TemperatureRange;
  return proto.smartcore.traits.TemperatureRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.smartcore.traits.TemperatureRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.smartcore.traits.TemperatureRange}
 */
proto.smartcore.traits.TemperatureRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setLow(value);
      break;
    case 2:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setHigh(value);
      break;
    case 3:
      var value = new types_unit_pb.Temperature;
      reader.readMessage(value,types_unit_pb.Temperature.deserializeBinaryFromReader);
      msg.setIdeal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.smartcore.traits.TemperatureRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.smartcore.traits.TemperatureRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.smartcore.traits.TemperatureRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.smartcore.traits.TemperatureRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getHigh();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getIdeal();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      types_unit_pb.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * optional smartcore.api.types.Temperature low = 1;
 * @return {?proto.smartcore.api.types.Temperature}
 */
proto.smartcore.traits.TemperatureRange.prototype.getLow = function() {
  return /** @type{?proto.smartcore.api.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 1));
};


/**
 * @param {?proto.smartcore.api.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
*/
proto.smartcore.traits.TemperatureRange.prototype.setLow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
 */
proto.smartcore.traits.TemperatureRange.prototype.clearLow = function() {
  return this.setLow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.TemperatureRange.prototype.hasLow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional smartcore.api.types.Temperature high = 2;
 * @return {?proto.smartcore.api.types.Temperature}
 */
proto.smartcore.traits.TemperatureRange.prototype.getHigh = function() {
  return /** @type{?proto.smartcore.api.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 2));
};


/**
 * @param {?proto.smartcore.api.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
*/
proto.smartcore.traits.TemperatureRange.prototype.setHigh = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
 */
proto.smartcore.traits.TemperatureRange.prototype.clearHigh = function() {
  return this.setHigh(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.TemperatureRange.prototype.hasHigh = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional smartcore.api.types.Temperature ideal = 3;
 * @return {?proto.smartcore.api.types.Temperature}
 */
proto.smartcore.traits.TemperatureRange.prototype.getIdeal = function() {
  return /** @type{?proto.smartcore.api.types.Temperature} */ (
    jspb.Message.getWrapperField(this, types_unit_pb.Temperature, 3));
};


/**
 * @param {?proto.smartcore.api.types.Temperature|undefined} value
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
*/
proto.smartcore.traits.TemperatureRange.prototype.setIdeal = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.smartcore.traits.TemperatureRange} returns this
 */
proto.smartcore.traits.TemperatureRange.prototype.clearIdeal = function() {
  return this.setIdeal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.smartcore.traits.TemperatureRange.prototype.hasIdeal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.smartcore.traits.AirTemperatureMode = {
  UNKNOWN: 0,
  ON: 1,
  OFF: 2,
  HEAT: 3,
  COOL: 4,
  HEAT_COOL: 5,
  AUTO: 6,
  FAN_ONLY: 7,
  ECO: 8,
  PURIFIER: 9,
  DRY: 10,
  LOCKED: 11
};

goog.object.extend(exports, proto.smartcore.traits);
